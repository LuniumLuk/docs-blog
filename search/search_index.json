{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Prefix I am an undergraduate of Dept. of Computer Science Zhejiang University. I like Graphics, Web developing and Games. This is a teck blog holding some of my notes or talks mainly covers subjects of Computer Graphics, Computer Vision, Game Developing or AI This site is hosted on Github and is continuely being updated For more info please visit >> my homepage <<","title":"Prefix"},{"location":"#prefix","text":"I am an undergraduate of Dept. of Computer Science Zhejiang University. I like Graphics, Web developing and Games. This is a teck blog holding some of my notes or talks mainly covers subjects of Computer Graphics, Computer Vision, Game Developing or AI This site is hosted on Github and is continuely being updated For more info please visit >> my homepage <<","title":"Prefix"},{"location":"Scene_Reconstruction/","text":"Scene Reconstruction Reference: [1] Choi, Robust Reconstruction of Indoor Scenes [2] Zhou, Dense Scene Reconstruction with Points of Interest [3] Zhou, Color Map Optimization for 3D Reconstruction with Consumer Depth Cameras [4] Izadi, KinectFusion: Real-time 3D Reconstruction and Interaction Using a Moving Depth Camera [5] Park, Colored Point Cloud Registration Revisited [6] Newcombe, KinectFusion: Real-time Dense Surface Mapping and Tracking [7] Kummerle, g2o: A General Framework for Graph Optimization [8] Triggs, Bundle Adjustment - A Modern Synthesis [9] Schonberger, Structure-from-Motion Revisited","title":"Scene Reconstruction"},{"location":"Scene_Reconstruction/#scene-reconstruction","text":"Reference: [1] Choi, Robust Reconstruction of Indoor Scenes [2] Zhou, Dense Scene Reconstruction with Points of Interest [3] Zhou, Color Map Optimization for 3D Reconstruction with Consumer Depth Cameras [4] Izadi, KinectFusion: Real-time 3D Reconstruction and Interaction Using a Moving Depth Camera [5] Park, Colored Point Cloud Registration Revisited [6] Newcombe, KinectFusion: Real-time Dense Surface Mapping and Tracking [7] Kummerle, g2o: A General Framework for Graph Optimization [8] Triggs, Bundle Adjustment - A Modern Synthesis [9] Schonberger, Structure-from-Motion Revisited","title":"Scene Reconstruction"},{"location":"Simple_SIMD/","text":"Simple SIMD SIMD\u662f\uff08Single Structure Multi Data\uff09\u7684\u7b80\u79f0\uff0c\u4e00\u822c\u662f\u5728\u786c\u4ef6\u4e0a\u5b9e\u73b0\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5c06\u591a\u4e2a\u6570\u636e\u5f53\u4f5c\u4e00\u4e2a\u7279\u5b9a\u7684\u7ed3\u6784\u53bb\u5904\u7406\uff0c\u8fd9\u6837\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u5347\u5927\u89c4\u6a21\u6570\u636e\u7684\u5904\u7406\u901f\u5ea6\u3002 \u4e0b\u9762\u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u56fe\u50cf\u5904\u7406\u4e3a\u4f8b\u5b50\uff1a \u5bf9\u4e8eBMP\u683c\u5f0f\u7684\u56fe\u50cf\uff0c\u5728\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2dRGB\u989c\u8272\u4ee5BGR\u7684\u987a\u5e8f\u5b58\u50a8\uff0c\u4e00\u822c\u6bcf\u4e2a\u5206\u91cf\u7684\u989c\u8272\u5927\u5c0f\u4e3a8 bits\uff0c\u5373\u53ef\u4ee5\u50a8\u5b58\u4e00\u4e2a\u4ece0\u5230255\u7684\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u800c\u4e00\u4e2a\u50cf\u7d20\u5305\u542b\u4e09\u4e2a\u5206\u91cf\u7684\u989c\u8272\uff0c\u5219\u4e00\u4e2a\u50cf\u7d20\u7684\u5927\u5c0f\u5219\u4e3a24 bits\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5047\u8bbe\u4e00\u5f20 100 * 100 \u7684RGB\u56fe\u50cf\u4ee5BMP\u683c\u5f0f\u5b58\u50a8\uff0c\u5e76\u4e14\u5176\u56fe\u50cf\u6570\u636e\u88ab\u5199\u5165\u4e00\u4e2a\u5927\u5c0f\u4e3a 100*100*3 byte \u7684\u7f13\u5b58\uff0c\u4e0b\u9762\u4ee5c++\u4ee3\u7801\u5f62\u5f0f\u5c55\u793a\uff1a unsigned char * buffer = new unsigned char [ 30000 ]; readBMPImage ( buffer , \"source.bmp\" ); // buffer = { B_0_0, G_0_0, R_0_0, B_0_1, G_0_1, R_0_1, ... , B_99_99, G_99_99, R_99_99 } \u4f46\u662f\uff0c\u5bf9\u4e8e\u5927\u90e8\u5206\u4e60\u60ef\u4f7f\u7528RGB\u987a\u5e8f\u7684\u7a0b\u5e8f\u5458\u4ee5\u53ca\u4ed6\u4eec\u5199\u51fa\u7684\u56fe\u5f62\u63a5\u53e3\u800c\u8a00\uff0cBGR\u987a\u5e8f\u5e76\u4e0d\u53d7\u6b22\u8fce\u3002\u90a3\u4e48\u600e\u4e48\u529e\u5462\uff1f\u81ea\u7136\u662f\u5c06BGR\u989c\u8272\u8f6c\u6362\u4e3aRGB\u989c\u8272\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u5355\u7ebf\u7a0b\u4e0b\u7684\u4e00\u822c\u505a\u6cd5\uff1a for ( int i = 0 ; i < 30000 ; i += 3 ) { std :: swap ( buffer [ i ], buffer [ i + 2 ]); } \u4e0b\u9762\uff0c\u6211\u4eec\u7528SIMD\u65b9\u6cd5\u6765\u8f6c\u6362\u989c\u8272\u7a7a\u95f4\uff1a union { unsigned char c [ 16 ]; __uint128_t i ; } mask = { . c = { 0xFF , 0x00 , 0x00 , 0xFF , 0x00 , 0x00 , 0xFF , 0x00 , 0x00 , 0xFF , 0x00 , 0x00 , 0xFF , 0x00 , 0x00 , 0x00 } }; // the step above generated a mask that looks like this in binary: // 11111111 11111111 00000000 00000000 00000000 00000000 11111111 11111111 ... __uint128_t s0 , sr , sg , sb ; for ( int i = 0 ; i < 30000 ; i += 15 ) { memcpy ( & s0 , buffer + i , 15 ); sr = mask . i & s0 ; // extract R channels by using bit operator // sg = mask . i & ( s0 >> 8 ); // suppose digits are stored as 'big endian' order // that a 2byte integer 258 = 256 + 2 = 0x0102 // is stored in memory as 00000010 00000001 or 0x02 0x01 // // therefore, a right shift operator is actually performed // by left shift in memory, and by left shift s0, we align // G channels to the mask // sb = mask . i & ( s0 >> 16 ); s0 = std :: move ( sb ); // faster than memcpy s0 |= ( sr << 16 ); s0 |= ( sg << 8 ); memcpy ( buffer + i , & s0 , 15 ); buffer_ptr += 15 ; } \u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528\u4e00\u4e2a 128 bits \u7684\u5927\u6574\u6570\u7ed3\u6784\u53ef\u4ee5\u4e00\u6b21\u6027\u5904\u74065\u4e2a\u50cf\u7d20\u7684\u8f6c\u6362\uff0c\u800c\u4e14\u7531\u4e8e\u5728\u786c\u4ef6\u5c42\u9762\uff0c\u8fd9\u4e2a128 bits\u7684\u5904\u7406\u548c\u4ee5\u4e00\u4e2a32 bits\u7684\u6574\u6570\u7684\u5904\u7406\u901f\u5ea6\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\uff0c\u5728\u540c\u6837\u662f\u5355\u7ebf\u7a0b\u7684\u989c\u8272\u8f6c\u6362\u4efb\u52a1\u4e0a\uff0cSIMD\u53ef\u4ee5\u5c06\u8fd0\u884c\u65f6\u95f4\u7f29\u51cf\u5230 1/3 \u5230 1/5 \u5de6\u53f3\uff0c\u6781\u5927\u63d0\u5347\u4e86\u8fd0\u7b97\u6027\u80fd\u3002","title":"Simple SIMD"},{"location":"Simple_SIMD/#simple-simd","text":"SIMD\u662f\uff08Single Structure Multi Data\uff09\u7684\u7b80\u79f0\uff0c\u4e00\u822c\u662f\u5728\u786c\u4ef6\u4e0a\u5b9e\u73b0\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5c06\u591a\u4e2a\u6570\u636e\u5f53\u4f5c\u4e00\u4e2a\u7279\u5b9a\u7684\u7ed3\u6784\u53bb\u5904\u7406\uff0c\u8fd9\u6837\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u5347\u5927\u89c4\u6a21\u6570\u636e\u7684\u5904\u7406\u901f\u5ea6\u3002 \u4e0b\u9762\u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u56fe\u50cf\u5904\u7406\u4e3a\u4f8b\u5b50\uff1a \u5bf9\u4e8eBMP\u683c\u5f0f\u7684\u56fe\u50cf\uff0c\u5728\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2dRGB\u989c\u8272\u4ee5BGR\u7684\u987a\u5e8f\u5b58\u50a8\uff0c\u4e00\u822c\u6bcf\u4e2a\u5206\u91cf\u7684\u989c\u8272\u5927\u5c0f\u4e3a8 bits\uff0c\u5373\u53ef\u4ee5\u50a8\u5b58\u4e00\u4e2a\u4ece0\u5230255\u7684\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u800c\u4e00\u4e2a\u50cf\u7d20\u5305\u542b\u4e09\u4e2a\u5206\u91cf\u7684\u989c\u8272\uff0c\u5219\u4e00\u4e2a\u50cf\u7d20\u7684\u5927\u5c0f\u5219\u4e3a24 bits\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5047\u8bbe\u4e00\u5f20 100 * 100 \u7684RGB\u56fe\u50cf\u4ee5BMP\u683c\u5f0f\u5b58\u50a8\uff0c\u5e76\u4e14\u5176\u56fe\u50cf\u6570\u636e\u88ab\u5199\u5165\u4e00\u4e2a\u5927\u5c0f\u4e3a 100*100*3 byte \u7684\u7f13\u5b58\uff0c\u4e0b\u9762\u4ee5c++\u4ee3\u7801\u5f62\u5f0f\u5c55\u793a\uff1a unsigned char * buffer = new unsigned char [ 30000 ]; readBMPImage ( buffer , \"source.bmp\" ); // buffer = { B_0_0, G_0_0, R_0_0, B_0_1, G_0_1, R_0_1, ... , B_99_99, G_99_99, R_99_99 } \u4f46\u662f\uff0c\u5bf9\u4e8e\u5927\u90e8\u5206\u4e60\u60ef\u4f7f\u7528RGB\u987a\u5e8f\u7684\u7a0b\u5e8f\u5458\u4ee5\u53ca\u4ed6\u4eec\u5199\u51fa\u7684\u56fe\u5f62\u63a5\u53e3\u800c\u8a00\uff0cBGR\u987a\u5e8f\u5e76\u4e0d\u53d7\u6b22\u8fce\u3002\u90a3\u4e48\u600e\u4e48\u529e\u5462\uff1f\u81ea\u7136\u662f\u5c06BGR\u989c\u8272\u8f6c\u6362\u4e3aRGB\u989c\u8272\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u5355\u7ebf\u7a0b\u4e0b\u7684\u4e00\u822c\u505a\u6cd5\uff1a for ( int i = 0 ; i < 30000 ; i += 3 ) { std :: swap ( buffer [ i ], buffer [ i + 2 ]); } \u4e0b\u9762\uff0c\u6211\u4eec\u7528SIMD\u65b9\u6cd5\u6765\u8f6c\u6362\u989c\u8272\u7a7a\u95f4\uff1a union { unsigned char c [ 16 ]; __uint128_t i ; } mask = { . c = { 0xFF , 0x00 , 0x00 , 0xFF , 0x00 , 0x00 , 0xFF , 0x00 , 0x00 , 0xFF , 0x00 , 0x00 , 0xFF , 0x00 , 0x00 , 0x00 } }; // the step above generated a mask that looks like this in binary: // 11111111 11111111 00000000 00000000 00000000 00000000 11111111 11111111 ... __uint128_t s0 , sr , sg , sb ; for ( int i = 0 ; i < 30000 ; i += 15 ) { memcpy ( & s0 , buffer + i , 15 ); sr = mask . i & s0 ; // extract R channels by using bit operator // sg = mask . i & ( s0 >> 8 ); // suppose digits are stored as 'big endian' order // that a 2byte integer 258 = 256 + 2 = 0x0102 // is stored in memory as 00000010 00000001 or 0x02 0x01 // // therefore, a right shift operator is actually performed // by left shift in memory, and by left shift s0, we align // G channels to the mask // sb = mask . i & ( s0 >> 16 ); s0 = std :: move ( sb ); // faster than memcpy s0 |= ( sr << 16 ); s0 |= ( sg << 8 ); memcpy ( buffer + i , & s0 , 15 ); buffer_ptr += 15 ; } \u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528\u4e00\u4e2a 128 bits \u7684\u5927\u6574\u6570\u7ed3\u6784\u53ef\u4ee5\u4e00\u6b21\u6027\u5904\u74065\u4e2a\u50cf\u7d20\u7684\u8f6c\u6362\uff0c\u800c\u4e14\u7531\u4e8e\u5728\u786c\u4ef6\u5c42\u9762\uff0c\u8fd9\u4e2a128 bits\u7684\u5904\u7406\u548c\u4ee5\u4e00\u4e2a32 bits\u7684\u6574\u6570\u7684\u5904\u7406\u901f\u5ea6\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\uff0c\u5728\u540c\u6837\u662f\u5355\u7ebf\u7a0b\u7684\u989c\u8272\u8f6c\u6362\u4efb\u52a1\u4e0a\uff0cSIMD\u53ef\u4ee5\u5c06\u8fd0\u884c\u65f6\u95f4\u7f29\u51cf\u5230 1/3 \u5230 1/5 \u5de6\u53f3\uff0c\u6781\u5927\u63d0\u5347\u4e86\u8fd0\u7b97\u6027\u80fd\u3002","title":"Simple SIMD"},{"location":"barycentric_coordinates/","text":"Barycentric coordinates & Mesh transfer \u91cd\u5fc3\u5750\u6807\uff08Barycentric coordinate\uff09\uff0c\u5373\u901a\u8fc7\u4f7f\u7528\u5355\u7eaf\u5f62\uff08Simplex\uff09\u5bf9\u4e00\u4e2a\u70b9\u7684\u5750\u6807\u8868\u793a\u3002\u6bd4\u5982\uff0c\u5728\u4e8c\u7ef4\u5e73\u9762\u5185\uff0c\u4f7f\u7528\u4e00\u4e2a\u4e09\u89d2\u5f62\u8868\u793a\uff0c\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u7528\u4e00\u4e2a\u56db\u9762\u4f53\uff08Tetrahedron\uff09\u8868\u793a\u3002\u91cd\u5fc3\u5750\u6807\u53ef\u4ee5\u7406\u89e3\u4e3a\u5f53\u8be5\u70b9\u5750\u6807\u7684\u6570\u503c\u4e3a\u8be5\u5355\u7eaf\u5f62\u7684\u9876\u70b9\u8d28\u91cf\u65f6\uff0c\u8be5\u70b9\u5373\u4e3a\u8be5\u5355\u7eaf\u5f62\u7684\u91cd\u5fc3\u3002\u91cd\u5fc3\u5750\u6807\u5206\u91cf\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff0c\u800c\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u5206\u91cf\u4e3a\u6b63\u7684\u65f6\u5019\uff0c\u70b9\u4f4d\u4e8e\u5355\u7eaf\u5f62\u5185\u90e8\u3002 \u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\uff0c\u91cd\u5fc3\u5750\u6807\u4f7f\u7528\u4e09\u4e2ascaler\u63cf\u8ff0\u4efb\u610f\u4e00\u4e2a\u843d\u5728\u4e09\u89d2\u5f62\u5185\u7684\u70b9\u3002\u8ba1\u7b97\u8fd9\u6837\u7684\u5750\u6807\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7b49\u5f0f\uff1a $$ P = wA + uB + vC\uff0cw+u+v= 1 $$ \u56e0\u6b64\uff0c\u91cd\u5fc3\u5750\u6807\u7684\u4e00\u4e2a\u76f8\u5f53\u91cd\u8981\u7684\u5e94\u7528\u4fbf\u662f\u5728\u4e09\u89d2\u5f62\u5185\u63d2\u503c\u9876\u70b9\u6570\u636e\uff0c\u6bd4\u5982\u6cd5\u5411\u3001\u989c\u8272\u3001\u7eb9\u7406\u5750\u6807\u7b49\u7b49\u3002\u4e0b\u9762\u901a\u8fc7\u5c04\u7ebf\u68c0\u6d4b\u7684\u7b80\u5355\u4ee3\u7801\u7ed9\u51fa\u793a\u4f8b\uff1a size_t face_idx = 0 ; Vertex vt1 = vertices [ faces [ face_idx ][ 0 ]]; Vertex vt2 = vertices [ faces [ face_idx ][ 1 ]]; Vertex vt3 = vertices [ faces [ face_idx ][ 2 ]]; if ( rayTriangleIntersect (...)) // if intersects with this triangle { Color color = w * vt1 . color + u * vt2 . color + v * vt3 . color ; Vector3 normal = w * vt1 . normal + u * vt2 . normal + v * vt3 . normal ; Vector3 reflect = ray . reflect ( normal ); // ... } \u5907\u6ce8 \u4e09\u89d2\u5f62\u5185\u70b9\u7684\u5750\u6807\u4e5f\u53ef\u4ee5\u7528UV\u5750\u6807\u8868\u793a\uff0c\u5982\u4e0b\uff1a $$ P = A + u\\overrightarrow{AB} + v\\overrightarrow{AC} \\ = A + u(B - A) + v(C - A) = (1-u-v)A+uB+vC $$ \u56e0\u6b64\uff0cUV\u5750\u6807\u5b9e\u9645\u4e0a\u4e5f\u662f\u91cd\u5fc3\u5750\u6807\u7684\u4e00\u79cd\u53d8\u79cd\uff0c\u4e5f\u56e0\u6b64\uff0c\u91cd\u5fc3\u5750\u6807\u7684\u4e09\u4e2a\u53c2\u6570\u6211\u4eec\u5199\u4f5c \\(w,u,v\\) \u7684\u987a\u5e8f\u3002 \u524d\u7f6e\u5185\u5bb9 \u4eff\u5c04\u7a7a\u95f4 \u4eff\u5c04\u7a7a\u95f4\uff08Affine space\uff09\u662f\u70b9\uff08points\uff09\u548c\u5411\u91cf\uff08vectors\uff09\u7684\u96c6\u5408\uff0c\u5728\u4eff\u5c04\u7a7a\u95f4\u4e2d\uff0c\u70b9\u548c\u70b9\u76f8\u51cf\u5f97\u5230\u5411\u91cf\uff0c\u70b9\u548c\u5411\u91cf\u76f8\u52a0\u5f97\u5230\u53e6\u4e00\u4e2a\u70b9\uff0c\u4f46\u662f\u70b9\u548c\u70b9\u4e0d\u80fd\u76f8\u52a0\u3002\u5728\u4eff\u5c04\u7a7a\u95f4\u4e2d\u6ca1\u6709\u539f\u70b9\uff08origin\uff09\u7684\u6982\u5ff5\uff0c\u5411\u91cf\u4e5f\u4e0d\u548c\u70b9\u552f\u4e00\u5bf9\u5e94\u3002\u6211\u4eec\u53ef\u4ee5\u63cf\u8ff0\u4e00\u4e2a\u4eff\u5c04\u7a7a\u95f4\u4e3a\uff1a\u4e00\u4e2a\u96c6\u5408 \\(A\\) \u3001\u4e00\u4e2a\u5411\u91cf\u7a7a\u95f4 $\\overrightarrow{A} $ \u4ee5\u53ca\u4e00\u4e2a\u6620\u5c04\u5173\u7cfb \\(A\\times\\overrightarrow{A}\\rightarrow{A}\\) \u3002\u8be5\u6620\u5c04\u5177\u6709\u7ed3\u5408\u6027\uff08associative\uff09\u3001\u4f20\u9012\u6027\uff08transitive\uff09\uff0c\u4ee5\u53ca\u4e00\u4e00\u5bf9\u5e94\u6027\uff08bijective\uff09\u3002 \u4eff\u5c04\u7ec4\u5408 \u4eff\u5c04\u7ec4\u5408\uff08Affine combination\uff09\u662f\u7279\u6b8a\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6027\u7ec4\u5408\uff1a $$ \\sum_{i=1}^n \\alpha_i \\cdot x_i = \\alpha_1 x_1 + \\alpha_2 x_2 + \\cdots + \\alpha_n x_n $$ \u5f53\u6709\uff1a $$ \\sum_{i=1}^n \\alpha_i = 1 $$ \u65f6\uff0c\u4e3a\u4eff\u5c04\u7ec4\u5408\u3002 \u5bf9\u4e00\u4e2a\u4eff\u5c04\u7ec4\u5408\u7684\u4eff\u5c04\u53d8\u6362\u7b49\u540c\u4e8e\u5bf9\u5176\u5411\u91cf\u7684\u4eff\u5c04\u53d8\u6362\uff1a $$ T\\sum_{i=1}^n \\alpha_i \\cdot x_i = \\sum_{i=1}^n T\\alpha_i \\cdot x_i $$ \u4eff\u5c04\u53d8\u6362 \u4eff\u5c04\u53d8\u6362\uff08Affine Transformation\uff09\u662f\u5bf9\u4e00\u4e2a\u4eff\u5c04\u7a7a\u95f4\u8fdb\u884c\u4e00\u6b21\u7ebf\u6027\u53d8\u6362\uff0c\u52a0\u4e00\u6b21\u5e73\u6613\u53d8\u6362\u3002\u4eff\u5c04\u53d8\u6362\u4fdd\u7559\u4e86\u4ee5\u4e0b\u7279\u5f81\uff1a \u70b9\u4e4b\u95f4\u7684\u5171\u7ebf\u6027 \u76f4\u7ebf\u7684\u5e73\u884c\u6027 \u96c6\u5408\u7684\u51f8\u6027 \u5e73\u884c\u7ebf\u6bb5\u957f\u5ea6\u7684\u6bd4\u4f8b \u4e0d\u540c\u8d28\u91cf\u7684\u70b9\u7ec4\u6210\u96c6\u5408\u7684\u8d28\u5fc3 \u4eff\u5c04\u53d8\u6362\u662f\u4eff\u5c04\u7a7a\u95f4\u7684\u4e00\u4e2a\u81ea\u540c\u6784\uff08Automorphism\uff09\uff0c\u5373\uff0c\u4eff\u5c04\u53d8\u6362\u5c06\u4e00\u4e2a\u4eff\u5c04\u7a7a\u95f4\u6620\u5c04\uff08\u53ef\u9006\uff09\u56de\u81ea\u8eab\uff0c\u5e76\u4e14\u4fdd\u7559\u5176\u6240\u6709\u4eff\u5c04\u5b50\u7a7a\u95f4\u7684\u7ef4\u5ea6\u3002\u4eff\u5c04\u5b50\u7a7a\u95f4\uff08Affine subspace\uff09\u7684\u5b9a\u4e49\u4e3a\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4eff\u5c04\u7a7a\u95f4A\uff0c\u5176\u5b50\u7a7a\u95f4B\u7684\u5411\u91cf\u7a7a\u95f4\u4e3aA\u7684\u5411\u91cf\u7a7a\u95f4\u7684\u4e00\u4e2a\u5b50\u96c6\u3002 \u4eff\u5c04\u53d8\u6362\u53ef\u4ee5\u63cf\u8ff0\u4e3a\uff1a $$ f(x) = A\\vec{x} + \\vec{b} $$ \u6216\u8005\u4f7f\u7528\u589e\u5e7f\u77e9\u9635\uff1a $$ \\begin{bmatrix} f(x) \\ 1 \\end{bmatrix} = \\begin{bmatrix} A &\\bigm|& \\vec{b} \\ 0 \\cdots 0 &\\bigm|& 1 \\end{bmatrix}\\begin{bmatrix} x \\ 1 \\end{bmatrix} $$ \u4eff\u5c04\u76f8\u5173 \u5728n\u7ef4\u7a7a\u95f4\u4e2d\uff0cn\u4e2a\u7ebf\u6027\u76f8\u5173\uff08Linear dependent\uff09\u7684\u70b9\uff08\u5411\u91cf\uff09\u88ab\u63cf\u8ff0\u4e3a\uff1a $$ \\exists a_i \\in \\mathbb{R}, \\vec{x_i} \\in \\mathbb{R}^{n}, i = 1,2,...,n \\Rightarrow \\sum_{i=1}^n a_i \\vec{x_i} = \\vec{0} $$ \u800c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u4e00\u7ec4\u7cfb\u6570\u4f7f\u5f97n\u4e2a\u5411\u91cf\u7684\u7ec4\u5408\u4e3a0\uff0c\u5219\u8fd9\u4e00\u7ec4\u5411\u91cf\u7ebf\u6027\u65e0\u5173\u3002\u4e00\u4e2a\u7a7a\u95f4\u7684\u7ef4\u5ea6\u7531\u8be5\u7a7a\u95f4\u4e2d\u6700\u5927\u6570\u91cf\u7684\u7ebf\u6027\u65e0\u5173\u5411\u91cf\u7684\u4e2a\u6570\u51b3\u5b9a\u3002 \u4eff\u5c04\u76f8\u5173\uff08Affine dependent\uff09\u5219\u662f\u5728\u7ebf\u6027\u76f8\u5173\u7684\u57fa\u7840\u4e0a\uff0c\u589e\u52a0\u4e00\u4e2a\u6761\u4ef6\uff0c\u5373 \\(\\sum_{i=1}^n a_i = 1\\) \u3002\u6216\u8005\uff0c\u4e5f\u53ef\u4ee5\u63cf\u8ff0\u4e3a\uff0c\u5bf9n\u4e2a\u70b9\uff0c\u5982\u679c\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u70b9\u4e0d\u80fd\u88ab\u5176\u4ed6\u70b9\u7684\u4eff\u5c04\u7ec4\u5408\u8868\u793a\uff0c\u5219\u8be5n\u4e2a\u70b9\u7ebf\u6027\u65e0\u5173\uff1b\u76f8\u53cd\uff0c\u5219\u7ebf\u6027\u76f8\u5173\u3002 \u7531\u4e8e\u4eff\u5c04\u7a7a\u95f4\u6ca1\u6709\u539f\u70b9\u7684\u6982\u5ff5\uff0c\u6211\u4eec\u53ef\u4ee5\u4ecen\u4e2a\u70b9\u9009\u62e9\u4e00\u4e2a\u4f5c\u4e3a\u539f\u70b9\uff0c\u5982\u679c\u5269\u4e0b\u7684n-1\u4e2a\u70b9\u76f8\u5bf9\u4e8e\u539f\u70b9\u7ebf\u6027\u76f8\u5173\uff0c\u5219\u8be5n\u4e2a\u70b9\u4eff\u5c04\u76f8\u5173\u3002 \u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u4e09\u4e2a\u70b9\u5982\u679c\u5171\u7ebf\u6216\u8005\u5171\u70b9\uff0c\u5219\u4e3a\u4eff\u5c04\u76f8\u5173\uff1b\u5426\u5219\uff0c\u4e3a\u4eff\u5c04\u65e0\u5173\uff0c\u5176\u4eff\u5c04\u7ec4\u5408\u5f20\u6210\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u3002\u56db\u4e2a\u4eff\u5c04\u65e0\u5173\u7684\u70b9\u901a\u8fc7\u4eff\u5c04\u7ec4\u5408\u5f20\u6210\u4e00\u4e2a\u4e09\u7ef4\u7a7a\u95f4\u3002 \u91cd\u5fc3\u5750\u6807 \u5728\u6b27\u6c0f\u7a7a\u95f4\u6216\u8005n\u7ef4\u4eff\u5c04\u7a7a\u95f4A\u4e2d\u6709n+1\u4e2a\u4eff\u5c04\u65e0\u5173\u7684\u70b9 \\(A_0,...,A_n\\) \uff0c\u4efb\u7ed9 \\(P\\in A\\) \uff0c\u6709\u4e00\u7ec4\u7cfb\u6570 \\(a_0,...,a_n\\) \u5bf9\u4efb\u610fO\uff08\u539f\u70b9\uff09\u4f7f\u4e0b\u5f0f\u6210\u7acb\uff1a $$ (a_0 + ... + a_n)\\overrightarrow{OP} = a_0\\overrightarrow{OA_0} + ... + a_n\\overrightarrow{OA_n} $$ \u5219\uff0c\u7531n+1\u4e2a\u5143\u7d20\u7ec4\u6210\u7684\u5750\u6807 \\((a_0:...:a_n)\\) \u5373\u4e3a\u70b9P\u7684\u91cd\u5fc3\u5750\u6807\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a \u8be5\u5750\u6807\u4e0e\u539f\u70b9\u7684\u9009\u62e9\u65e0\u5173 \u8be5\u5750\u6807\u4e3a\u9f50\u6b21\u5750\u6807\uff0c\u5373\u8be5\u5750\u6807\u5728\u6570\u503c\u4e0a\u7684\u7f29\u653e\u5e76\u4e0d\u6539\u53d8\u8fd9\u4e2a\u5750\u6807\uff0c\u67d0\u70b9P\u7684\u91cd\u5fc3\u5750\u6807\u4e0d\u552f\u4e00 \u91cd\u5fc3\u5750\u6807\u5177\u6709\u4eff\u5c04\u4e0d\u53d8\u6027 \u8ba1\u7b97\u91cd\u5fc3\u5750\u6807 \u91cd\u5fc3\u5750\u6807\u7684\u6570\u503c\u4e0e\u5176\u5185\u90e8\u70b9P\u5212\u5206\u51fa\u7684\u4e09\u4e2a\u5c0f\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u6709\u5173\uff0c\u6211\u4eec\u8bbe\u6709\u4e09\u89d2\u5f62 \\(\\triangle{ABC}\\) \uff0c\u5176\u5185\u90e8\u6709\u4e00\u70b9P\uff0c\u5219\u6709\uff1a \\[ w = \\frac{\\triangle{BCP}_{Area}}{\\triangle{ABC}_{Area}} \\\\ u = \\frac{\\triangle{ACP}_{Area}}{\\triangle{ABC}_{Area}} \\\\ v = \\frac{\\triangle{ABP}_{Area}}{\\triangle{ABC}_{Area}} \\] \u9996\u5148\uff0c\u6211\u4eec\u719f\u6089\u4e00\u4e0b\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u8ba1\u7b97\u516c\u5f0f\uff1a \\[ \\triangle{ABC}_{Area} = \\frac{||(B-A)||\\cdot||(C-A)||sin(\\theta)}{2} \\\\ = \\frac{||(B-A)\\times(C-A)||}{2} \\] \u8fd9\u91cc\uff0c \\(\\theta\\) \u662fAB\u4e0eAC\u5f62\u6210\u7684\u5939\u89d2\uff0c\u6839\u636e\u4e0a\u5f0f\uff0c\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u53ef\u4ee5\u89c6\u4f5c\u4efb\u610f\u4e24\u8fb9\u5411\u91cf\u7684\u53c9\u4e58\u7684\u5927\u5c0f\u9664\u4ee52\uff0c\u4e5f\u5c31\u662f\u4e09\u89d2\u5f62\u7684\u672a\u5f52\u4e00\u5316\u7684\u6cd5\u5411\u91cf\u7684\u957f\u5ea6\u9664\u4ee52\u3002 Vector3 v01 = v1 - v0 ; Vector3 v02 = v2 - v0 ; Vector3 normal = v01 . cross ( v02 ); float triangle_area = normal . length (); \u6240\u4ee5\uff0c\u91cd\u5fc3\u5750\u6807\u7684uv\u53ef\u4ee5\u7531\u4e0b\u5f0f\u8ba1\u7b97\uff1a \\[ u = \\frac{\\triangle{ACP}_{Area}}{\\triangle{ABC}_{Area}} = \\frac{||\\overrightarrow{AC}\\times\\overrightarrow{AP}||}{||\\overrightarrow{AB}\\times\\overrightarrow{AC}||} \\\\ v = \\frac{\\triangle{ABP}_{Area}}{\\triangle{ABC}_{Area}} = \\frac{||\\overrightarrow{AB}\\times\\overrightarrow{AP}||}{||\\overrightarrow{AB}\\times\\overrightarrow{AC}||} \\] \u8fd9\u91cc\uff0c\u56e0\u4e3a \\(\\overrightarrow{AB}\\times\\overrightarrow{AC} = \\overrightarrow{N}\\) \u800c\u4e14\uff0c\u7531\u4e8e \\(\\overrightarrow{AC}\\times\\overrightarrow{AP}\\) \u4e0e \\(\\overrightarrow{N}\\) \u662f\u540c\u5411\u7684\uff08P\u70b9\u5728ABC\u5185\uff09\uff0c\u4e3a\u7b80\u5316\u8ba1\u7b97\uff08\u907f\u514d\u5f00\u9500\u8f83\u5927\u7684\u5927\u5c0f\u8ba1\u7b97\uff09\u6211\u4eec\u6709\uff1a \\[ u = \\frac{||\\overrightarrow{AC}\\times\\overrightarrow{AP}||}{||\\overrightarrow{AB}\\times\\overrightarrow{AC}||} = \\frac{(\\overrightarrow{AC}\\times\\overrightarrow{AP})\\cdot\\overrightarrow{N}}{\\overrightarrow{N}\\cdot\\overrightarrow{N}} \\\\ v = \\frac{||\\overrightarrow{AB}\\times\\overrightarrow{AP}||}{||\\overrightarrow{AB}\\times\\overrightarrow{AC}||} = \\frac{(\\overrightarrow{AB}\\times\\overrightarrow{AP})\\cdot\\overrightarrow{N}}{\\overrightarrow{N}\\cdot\\overrightarrow{N}} \\] \u6b64\u5916\uff0c\u7531\u4e8e \\((\\overrightarrow{AC}\\times\\overrightarrow{AP})\\cdot\\overrightarrow{N}\\) \u53ef\u7528\u4e8e\u5224\u65adP\u70b9\u662f\u5426\u4f4d\u4e8e\u4e09\u89d2\u5f62ABC\u5185\u90e8\uff0c\u56e0\u6b64\u5728ray tracing\u7684\u7ba1\u7ebf\u4e2d\uff0c\u5b9e\u9645\u4e0a\u8be5\u503c\u5df2\u7ecf\u8ba1\u7b97\u8fc7\uff0c\u56e0\u6b64\u66f4\u8fdb\u4e00\u6b65\u8282\u7701\u4e86\u8fd0\u7b97\u5f00\u9500\u3002\u5bf9\u4e8eRay Tracing\u4e2d\u7684\u5c04\u7ebf\u6c42\u4ea4\uff0c\u5728\u4e4b\u540e\u7684\u7b14\u8bb0\u4e2d\u4f1a\u8c08\u5230\u3002 \u7b80\u5316\u8fd0\u7b97 \u5bf9\u4e8e\u8ba1\u7b97\u673a\u800c\u8a00\uff0c\u4e24\u4e2a\u4e09\u7ef4\u5411\u91cf\u7684\u53c9\u4e58\u5f00\u9500\u8f83\u5927\uff0c\u4e0b\u9762\u7528\u8f83\u4e3a\u7b80\u5355\u7684\u7b97\u6cd5\u8ba1\u7b97\uff1a \\[ P = wA + uB + vC = (1-u-v)A+uB+vC = A + u(B-A) + v(C-A) \\\\ \\Rightarrow P - A = u(B-A) + v(C-A) \\\\ \\Rightarrow \\overrightarrow{AP} = u\\overrightarrow{AB} + v\\overrightarrow{AC} \\] \u4ee4 \\(\\overrightarrow{AB} = \\vec{v_0}\\) \uff0c \\(\\overrightarrow{AC} = \\vec{v_1}\\) \u4ee5\u53ca \\(\\overrightarrow{AP} = \\vec{v_2}\\) \uff0c \u5e76\u4e14 \\(d_{ij} = \\vec{v_i}\\cdot\\vec{v_j}\\) \uff0c\u5219\u6709\uff1a \\[ \\vec{v_2} = u\\vec{v_0} + v\\vec{v_1} \\] \uff0815\uff09\u4e24\u8fb9\u70b9\u4e58 \\(v_0\\) \uff1a \\[ \\vec{v_2}\\cdot\\vec{v_0} = u\\vec{v_0}\\cdot\\vec{v_0} + v\\vec{v_1}\\cdot\\vec{v_0} \\] \uff0815\uff09\u4e24\u8fb9\u70b9\u4e58 \\(\\vec{v_1}\\) \uff1a \\[ \\vec{v_2}\\cdot\\vec{v_1} = u\\vec{v_0}\\cdot\\vec{v_1} + v\\vec{v_1}\\cdot\\vec{v_1} \\] \u5f97\uff1a \\[ d_{02} = d_{00}u + d_{01}w \\\\ d_{12} = d_{01}u + d_{11}w \\] \u89e3\u5f97\uff1a \\[ v = \\frac{d_{11}d_{02}-d_{01}d_{12}}{d_{00}d_{11}-d^2_{01}}\\qquad w = \\frac{d_{00}d_{12}-d_{01}d_{02}}{d_{00}d_{11}-d^2_{01}} \\] Mesh Transfer : SMPL to SMPLX smpl\u662f\u4e00\u4e2a\u4eba\u4f53\u53c2\u6570\u5316\u6a21\u578b\uff0c\u800csmplx\u5219\u662f\u5176\u5347\u7ea7\u7248\uff0c\u5305\u62ec\u5e26\u5173\u8282\u7684\u624b\u90e8\u6a21\u578b\u4ee5\u53ca\u5e26\u5173\u8282\u548c\u8868\u60c5\u7684\u5934\u90e8\u6a21\u578b\u3002smplx\u548csmpl\u6709\u7740\u7565\u5fae\u533a\u522b\u7684pose\u548cshape\u53c2\u6570\uff0c\u56e0\u6b64\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u53c2\u6570\u5e76\u4e0d\u662f\u53ef\u4e92\u6362\u7684\u3002\u56e0\u6b64\uff0c\u5982\u679c\u9700\u8981\u5c06smpl\u5347\u7ea7\u4e3asmplx\uff0c\u5148\u5c06smplx\u7684\u7f51\u683c\u62df\u5408\u5230\u76ee\u6807smpl\u6a21\u578b\u7684\u7f51\u683c\u4e0a\uff0c\u7136\u540e\u518d\u62df\u5408smplx\u7684\u53c2\u6570\uff0c\u5f97\u5230\u6211\u4eec\u9700\u8981\u7684\u7ed3\u679c\u3002 \u5177\u4f53\u505a\u6cd5\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u4f7f\u7528rest shape\u7684smpl\u548csmplx\u6a21\u578b\u505aregistration\uff0c\u5bf9\u6bcf\u4e00\u4e2asmplx\u6a21\u578b\u4e0a\u7684\u9876\u70b9\uff0c\u5728smpl\u6a21\u578b\u4e0a\u627e\u5230\u8ddd\u79bb\u5176\u6700\u8fd1\u7684\u4e09\u89d2\u9762\uff0c\u5e76\u4e14\u5c06smplx\u7684\u8be5\u9876\u70b9\u7528\u91cd\u5fc3\u5750\u6807\u8868\u793a\u5728smpl\u6a21\u578b\u7684\u8be5\u4e09\u89d2\u9762\u4e0a\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f97\u5230\u4ee5\u4e0b\u4e24\u4e2a\u6570\u636e\uff1a \u4e00\u4e2asmplx\u9876\u70b9\u5230smpl\u4e09\u89d2\u9762\u7684\u5bf9\u5e94\u8868 \u4e00\u4e2asmplx\u9876\u70b9\u5728\u5bf9\u5e94\u7684smpl\u4e09\u89d2\u9762\u4e0a\u7684\u91cd\u5fc3\u5750\u6807 \u540c\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u906e\u7f69\u6392\u9664\u6389smplx\u4e0a\u76f8\u5bf9\u4e8esmpl\u7279\u6b8a\u7684\u7ed3\u6784\uff0c\u6bd4\u5982\u773c\u7403\u548c\u53e3\u8154\u7b49\u7b49\u3002 \u7136\u540e\uff0c\u5728\u76ee\u6807\u7684smpl\u6a21\u578b\u4e0a\uff0c\u4ee4 \\(f_i\\in\\mathbb{N}^3\\) \u4e3aSMPLX\u7b2ci\u4e2a\u9876\u70b9\u5bf9\u5e94\u7684SMPL\u7684\u4e09\u89d2\u9762\u7684\u4e09\u4e2a\u9876\u70b9\u5e8f\u53f7\uff0c \\([a_i, b_i, c_i]\\) \u4e3aSMPLX\u7b2ci\u4e2a\u9876\u70b9\u5728\u8be5\u4e09\u89d2\u9762\u4e2d\u7684\u91cd\u5fc3\u5750\u6807\u3002\u5219SMPLX\u7684\u7b2ci\u4e2a\u9876\u70b9\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u8ba1\u7b97\u83b7\u5f97\uff1a $$ v_i^{SMPL-X} = a_i * v_{f_i^0}^{SMPL} + b_i * v_{f_i^1}^{SMPL} + c_i * v_{f_i^2}^{SMPL} $$ \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u83b7\u5f97\u4e86\u5728SMPLX\u62d3\u6251\u4e0b\u7684\u6a21\u578b\uff0c\u7136\u540e\u4f7f\u7528\u4f18\u5316\u62df\u5408\u7684\u65b9\u5f0f\uff0c\u6700\u7ec8\u5f97\u5230\u6211\u4eec\u9700\u8981\u7684SMPLX\u53c2\u6570\u5316\u6a21\u578b\u7684beta\u3001pose\u7b49\u53c2\u6570\u3002 \u53c2\u8003 [1] https://en.wikipedia.org/wiki/Barycentric_coordinate_system [2] https://en.wikipedia.org/wiki/Affine_space [3] https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/barycentric-coordinates [4] https://github.com/vchoutas/smplx/blob/master/transfer_model/docs/transfer.md","title":"Barycentric coordinates & Mesh transfer"},{"location":"barycentric_coordinates/#barycentric-coordinates-mesh-transfer","text":"\u91cd\u5fc3\u5750\u6807\uff08Barycentric coordinate\uff09\uff0c\u5373\u901a\u8fc7\u4f7f\u7528\u5355\u7eaf\u5f62\uff08Simplex\uff09\u5bf9\u4e00\u4e2a\u70b9\u7684\u5750\u6807\u8868\u793a\u3002\u6bd4\u5982\uff0c\u5728\u4e8c\u7ef4\u5e73\u9762\u5185\uff0c\u4f7f\u7528\u4e00\u4e2a\u4e09\u89d2\u5f62\u8868\u793a\uff0c\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u7528\u4e00\u4e2a\u56db\u9762\u4f53\uff08Tetrahedron\uff09\u8868\u793a\u3002\u91cd\u5fc3\u5750\u6807\u53ef\u4ee5\u7406\u89e3\u4e3a\u5f53\u8be5\u70b9\u5750\u6807\u7684\u6570\u503c\u4e3a\u8be5\u5355\u7eaf\u5f62\u7684\u9876\u70b9\u8d28\u91cf\u65f6\uff0c\u8be5\u70b9\u5373\u4e3a\u8be5\u5355\u7eaf\u5f62\u7684\u91cd\u5fc3\u3002\u91cd\u5fc3\u5750\u6807\u5206\u91cf\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff0c\u800c\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u5206\u91cf\u4e3a\u6b63\u7684\u65f6\u5019\uff0c\u70b9\u4f4d\u4e8e\u5355\u7eaf\u5f62\u5185\u90e8\u3002 \u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\uff0c\u91cd\u5fc3\u5750\u6807\u4f7f\u7528\u4e09\u4e2ascaler\u63cf\u8ff0\u4efb\u610f\u4e00\u4e2a\u843d\u5728\u4e09\u89d2\u5f62\u5185\u7684\u70b9\u3002\u8ba1\u7b97\u8fd9\u6837\u7684\u5750\u6807\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u7b49\u5f0f\uff1a $$ P = wA + uB + vC\uff0cw+u+v= 1 $$ \u56e0\u6b64\uff0c\u91cd\u5fc3\u5750\u6807\u7684\u4e00\u4e2a\u76f8\u5f53\u91cd\u8981\u7684\u5e94\u7528\u4fbf\u662f\u5728\u4e09\u89d2\u5f62\u5185\u63d2\u503c\u9876\u70b9\u6570\u636e\uff0c\u6bd4\u5982\u6cd5\u5411\u3001\u989c\u8272\u3001\u7eb9\u7406\u5750\u6807\u7b49\u7b49\u3002\u4e0b\u9762\u901a\u8fc7\u5c04\u7ebf\u68c0\u6d4b\u7684\u7b80\u5355\u4ee3\u7801\u7ed9\u51fa\u793a\u4f8b\uff1a size_t face_idx = 0 ; Vertex vt1 = vertices [ faces [ face_idx ][ 0 ]]; Vertex vt2 = vertices [ faces [ face_idx ][ 1 ]]; Vertex vt3 = vertices [ faces [ face_idx ][ 2 ]]; if ( rayTriangleIntersect (...)) // if intersects with this triangle { Color color = w * vt1 . color + u * vt2 . color + v * vt3 . color ; Vector3 normal = w * vt1 . normal + u * vt2 . normal + v * vt3 . normal ; Vector3 reflect = ray . reflect ( normal ); // ... }","title":"Barycentric coordinates &amp; Mesh transfer"},{"location":"barycentric_coordinates/#_1","text":"\u4e09\u89d2\u5f62\u5185\u70b9\u7684\u5750\u6807\u4e5f\u53ef\u4ee5\u7528UV\u5750\u6807\u8868\u793a\uff0c\u5982\u4e0b\uff1a $$ P = A + u\\overrightarrow{AB} + v\\overrightarrow{AC} \\ = A + u(B - A) + v(C - A) = (1-u-v)A+uB+vC $$ \u56e0\u6b64\uff0cUV\u5750\u6807\u5b9e\u9645\u4e0a\u4e5f\u662f\u91cd\u5fc3\u5750\u6807\u7684\u4e00\u79cd\u53d8\u79cd\uff0c\u4e5f\u56e0\u6b64\uff0c\u91cd\u5fc3\u5750\u6807\u7684\u4e09\u4e2a\u53c2\u6570\u6211\u4eec\u5199\u4f5c \\(w,u,v\\) \u7684\u987a\u5e8f\u3002","title":"\u5907\u6ce8"},{"location":"barycentric_coordinates/#_2","text":"","title":"\u524d\u7f6e\u5185\u5bb9"},{"location":"barycentric_coordinates/#_3","text":"\u4eff\u5c04\u7a7a\u95f4\uff08Affine space\uff09\u662f\u70b9\uff08points\uff09\u548c\u5411\u91cf\uff08vectors\uff09\u7684\u96c6\u5408\uff0c\u5728\u4eff\u5c04\u7a7a\u95f4\u4e2d\uff0c\u70b9\u548c\u70b9\u76f8\u51cf\u5f97\u5230\u5411\u91cf\uff0c\u70b9\u548c\u5411\u91cf\u76f8\u52a0\u5f97\u5230\u53e6\u4e00\u4e2a\u70b9\uff0c\u4f46\u662f\u70b9\u548c\u70b9\u4e0d\u80fd\u76f8\u52a0\u3002\u5728\u4eff\u5c04\u7a7a\u95f4\u4e2d\u6ca1\u6709\u539f\u70b9\uff08origin\uff09\u7684\u6982\u5ff5\uff0c\u5411\u91cf\u4e5f\u4e0d\u548c\u70b9\u552f\u4e00\u5bf9\u5e94\u3002\u6211\u4eec\u53ef\u4ee5\u63cf\u8ff0\u4e00\u4e2a\u4eff\u5c04\u7a7a\u95f4\u4e3a\uff1a\u4e00\u4e2a\u96c6\u5408 \\(A\\) \u3001\u4e00\u4e2a\u5411\u91cf\u7a7a\u95f4 $\\overrightarrow{A} $ \u4ee5\u53ca\u4e00\u4e2a\u6620\u5c04\u5173\u7cfb \\(A\\times\\overrightarrow{A}\\rightarrow{A}\\) \u3002\u8be5\u6620\u5c04\u5177\u6709\u7ed3\u5408\u6027\uff08associative\uff09\u3001\u4f20\u9012\u6027\uff08transitive\uff09\uff0c\u4ee5\u53ca\u4e00\u4e00\u5bf9\u5e94\u6027\uff08bijective\uff09\u3002","title":"\u4eff\u5c04\u7a7a\u95f4"},{"location":"barycentric_coordinates/#_4","text":"\u4eff\u5c04\u7ec4\u5408\uff08Affine combination\uff09\u662f\u7279\u6b8a\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6027\u7ec4\u5408\uff1a $$ \\sum_{i=1}^n \\alpha_i \\cdot x_i = \\alpha_1 x_1 + \\alpha_2 x_2 + \\cdots + \\alpha_n x_n $$ \u5f53\u6709\uff1a $$ \\sum_{i=1}^n \\alpha_i = 1 $$ \u65f6\uff0c\u4e3a\u4eff\u5c04\u7ec4\u5408\u3002 \u5bf9\u4e00\u4e2a\u4eff\u5c04\u7ec4\u5408\u7684\u4eff\u5c04\u53d8\u6362\u7b49\u540c\u4e8e\u5bf9\u5176\u5411\u91cf\u7684\u4eff\u5c04\u53d8\u6362\uff1a $$ T\\sum_{i=1}^n \\alpha_i \\cdot x_i = \\sum_{i=1}^n T\\alpha_i \\cdot x_i $$","title":"\u4eff\u5c04\u7ec4\u5408"},{"location":"barycentric_coordinates/#_5","text":"\u4eff\u5c04\u53d8\u6362\uff08Affine Transformation\uff09\u662f\u5bf9\u4e00\u4e2a\u4eff\u5c04\u7a7a\u95f4\u8fdb\u884c\u4e00\u6b21\u7ebf\u6027\u53d8\u6362\uff0c\u52a0\u4e00\u6b21\u5e73\u6613\u53d8\u6362\u3002\u4eff\u5c04\u53d8\u6362\u4fdd\u7559\u4e86\u4ee5\u4e0b\u7279\u5f81\uff1a \u70b9\u4e4b\u95f4\u7684\u5171\u7ebf\u6027 \u76f4\u7ebf\u7684\u5e73\u884c\u6027 \u96c6\u5408\u7684\u51f8\u6027 \u5e73\u884c\u7ebf\u6bb5\u957f\u5ea6\u7684\u6bd4\u4f8b \u4e0d\u540c\u8d28\u91cf\u7684\u70b9\u7ec4\u6210\u96c6\u5408\u7684\u8d28\u5fc3 \u4eff\u5c04\u53d8\u6362\u662f\u4eff\u5c04\u7a7a\u95f4\u7684\u4e00\u4e2a\u81ea\u540c\u6784\uff08Automorphism\uff09\uff0c\u5373\uff0c\u4eff\u5c04\u53d8\u6362\u5c06\u4e00\u4e2a\u4eff\u5c04\u7a7a\u95f4\u6620\u5c04\uff08\u53ef\u9006\uff09\u56de\u81ea\u8eab\uff0c\u5e76\u4e14\u4fdd\u7559\u5176\u6240\u6709\u4eff\u5c04\u5b50\u7a7a\u95f4\u7684\u7ef4\u5ea6\u3002\u4eff\u5c04\u5b50\u7a7a\u95f4\uff08Affine subspace\uff09\u7684\u5b9a\u4e49\u4e3a\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4eff\u5c04\u7a7a\u95f4A\uff0c\u5176\u5b50\u7a7a\u95f4B\u7684\u5411\u91cf\u7a7a\u95f4\u4e3aA\u7684\u5411\u91cf\u7a7a\u95f4\u7684\u4e00\u4e2a\u5b50\u96c6\u3002 \u4eff\u5c04\u53d8\u6362\u53ef\u4ee5\u63cf\u8ff0\u4e3a\uff1a $$ f(x) = A\\vec{x} + \\vec{b} $$ \u6216\u8005\u4f7f\u7528\u589e\u5e7f\u77e9\u9635\uff1a $$ \\begin{bmatrix} f(x) \\ 1 \\end{bmatrix} = \\begin{bmatrix} A &\\bigm|& \\vec{b} \\ 0 \\cdots 0 &\\bigm|& 1 \\end{bmatrix}\\begin{bmatrix} x \\ 1 \\end{bmatrix} $$","title":"\u4eff\u5c04\u53d8\u6362"},{"location":"barycentric_coordinates/#_6","text":"\u5728n\u7ef4\u7a7a\u95f4\u4e2d\uff0cn\u4e2a\u7ebf\u6027\u76f8\u5173\uff08Linear dependent\uff09\u7684\u70b9\uff08\u5411\u91cf\uff09\u88ab\u63cf\u8ff0\u4e3a\uff1a $$ \\exists a_i \\in \\mathbb{R}, \\vec{x_i} \\in \\mathbb{R}^{n}, i = 1,2,...,n \\Rightarrow \\sum_{i=1}^n a_i \\vec{x_i} = \\vec{0} $$ \u800c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u4e00\u7ec4\u7cfb\u6570\u4f7f\u5f97n\u4e2a\u5411\u91cf\u7684\u7ec4\u5408\u4e3a0\uff0c\u5219\u8fd9\u4e00\u7ec4\u5411\u91cf\u7ebf\u6027\u65e0\u5173\u3002\u4e00\u4e2a\u7a7a\u95f4\u7684\u7ef4\u5ea6\u7531\u8be5\u7a7a\u95f4\u4e2d\u6700\u5927\u6570\u91cf\u7684\u7ebf\u6027\u65e0\u5173\u5411\u91cf\u7684\u4e2a\u6570\u51b3\u5b9a\u3002 \u4eff\u5c04\u76f8\u5173\uff08Affine dependent\uff09\u5219\u662f\u5728\u7ebf\u6027\u76f8\u5173\u7684\u57fa\u7840\u4e0a\uff0c\u589e\u52a0\u4e00\u4e2a\u6761\u4ef6\uff0c\u5373 \\(\\sum_{i=1}^n a_i = 1\\) \u3002\u6216\u8005\uff0c\u4e5f\u53ef\u4ee5\u63cf\u8ff0\u4e3a\uff0c\u5bf9n\u4e2a\u70b9\uff0c\u5982\u679c\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u70b9\u4e0d\u80fd\u88ab\u5176\u4ed6\u70b9\u7684\u4eff\u5c04\u7ec4\u5408\u8868\u793a\uff0c\u5219\u8be5n\u4e2a\u70b9\u7ebf\u6027\u65e0\u5173\uff1b\u76f8\u53cd\uff0c\u5219\u7ebf\u6027\u76f8\u5173\u3002 \u7531\u4e8e\u4eff\u5c04\u7a7a\u95f4\u6ca1\u6709\u539f\u70b9\u7684\u6982\u5ff5\uff0c\u6211\u4eec\u53ef\u4ee5\u4ecen\u4e2a\u70b9\u9009\u62e9\u4e00\u4e2a\u4f5c\u4e3a\u539f\u70b9\uff0c\u5982\u679c\u5269\u4e0b\u7684n-1\u4e2a\u70b9\u76f8\u5bf9\u4e8e\u539f\u70b9\u7ebf\u6027\u76f8\u5173\uff0c\u5219\u8be5n\u4e2a\u70b9\u4eff\u5c04\u76f8\u5173\u3002 \u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u4e09\u4e2a\u70b9\u5982\u679c\u5171\u7ebf\u6216\u8005\u5171\u70b9\uff0c\u5219\u4e3a\u4eff\u5c04\u76f8\u5173\uff1b\u5426\u5219\uff0c\u4e3a\u4eff\u5c04\u65e0\u5173\uff0c\u5176\u4eff\u5c04\u7ec4\u5408\u5f20\u6210\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u3002\u56db\u4e2a\u4eff\u5c04\u65e0\u5173\u7684\u70b9\u901a\u8fc7\u4eff\u5c04\u7ec4\u5408\u5f20\u6210\u4e00\u4e2a\u4e09\u7ef4\u7a7a\u95f4\u3002","title":"\u4eff\u5c04\u76f8\u5173"},{"location":"barycentric_coordinates/#_7","text":"\u5728\u6b27\u6c0f\u7a7a\u95f4\u6216\u8005n\u7ef4\u4eff\u5c04\u7a7a\u95f4A\u4e2d\u6709n+1\u4e2a\u4eff\u5c04\u65e0\u5173\u7684\u70b9 \\(A_0,...,A_n\\) \uff0c\u4efb\u7ed9 \\(P\\in A\\) \uff0c\u6709\u4e00\u7ec4\u7cfb\u6570 \\(a_0,...,a_n\\) \u5bf9\u4efb\u610fO\uff08\u539f\u70b9\uff09\u4f7f\u4e0b\u5f0f\u6210\u7acb\uff1a $$ (a_0 + ... + a_n)\\overrightarrow{OP} = a_0\\overrightarrow{OA_0} + ... + a_n\\overrightarrow{OA_n} $$ \u5219\uff0c\u7531n+1\u4e2a\u5143\u7d20\u7ec4\u6210\u7684\u5750\u6807 \\((a_0:...:a_n)\\) \u5373\u4e3a\u70b9P\u7684\u91cd\u5fc3\u5750\u6807\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a \u8be5\u5750\u6807\u4e0e\u539f\u70b9\u7684\u9009\u62e9\u65e0\u5173 \u8be5\u5750\u6807\u4e3a\u9f50\u6b21\u5750\u6807\uff0c\u5373\u8be5\u5750\u6807\u5728\u6570\u503c\u4e0a\u7684\u7f29\u653e\u5e76\u4e0d\u6539\u53d8\u8fd9\u4e2a\u5750\u6807\uff0c\u67d0\u70b9P\u7684\u91cd\u5fc3\u5750\u6807\u4e0d\u552f\u4e00 \u91cd\u5fc3\u5750\u6807\u5177\u6709\u4eff\u5c04\u4e0d\u53d8\u6027","title":"\u91cd\u5fc3\u5750\u6807"},{"location":"barycentric_coordinates/#_8","text":"\u91cd\u5fc3\u5750\u6807\u7684\u6570\u503c\u4e0e\u5176\u5185\u90e8\u70b9P\u5212\u5206\u51fa\u7684\u4e09\u4e2a\u5c0f\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u6709\u5173\uff0c\u6211\u4eec\u8bbe\u6709\u4e09\u89d2\u5f62 \\(\\triangle{ABC}\\) \uff0c\u5176\u5185\u90e8\u6709\u4e00\u70b9P\uff0c\u5219\u6709\uff1a \\[ w = \\frac{\\triangle{BCP}_{Area}}{\\triangle{ABC}_{Area}} \\\\ u = \\frac{\\triangle{ACP}_{Area}}{\\triangle{ABC}_{Area}} \\\\ v = \\frac{\\triangle{ABP}_{Area}}{\\triangle{ABC}_{Area}} \\] \u9996\u5148\uff0c\u6211\u4eec\u719f\u6089\u4e00\u4e0b\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u8ba1\u7b97\u516c\u5f0f\uff1a \\[ \\triangle{ABC}_{Area} = \\frac{||(B-A)||\\cdot||(C-A)||sin(\\theta)}{2} \\\\ = \\frac{||(B-A)\\times(C-A)||}{2} \\] \u8fd9\u91cc\uff0c \\(\\theta\\) \u662fAB\u4e0eAC\u5f62\u6210\u7684\u5939\u89d2\uff0c\u6839\u636e\u4e0a\u5f0f\uff0c\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u53ef\u4ee5\u89c6\u4f5c\u4efb\u610f\u4e24\u8fb9\u5411\u91cf\u7684\u53c9\u4e58\u7684\u5927\u5c0f\u9664\u4ee52\uff0c\u4e5f\u5c31\u662f\u4e09\u89d2\u5f62\u7684\u672a\u5f52\u4e00\u5316\u7684\u6cd5\u5411\u91cf\u7684\u957f\u5ea6\u9664\u4ee52\u3002 Vector3 v01 = v1 - v0 ; Vector3 v02 = v2 - v0 ; Vector3 normal = v01 . cross ( v02 ); float triangle_area = normal . length (); \u6240\u4ee5\uff0c\u91cd\u5fc3\u5750\u6807\u7684uv\u53ef\u4ee5\u7531\u4e0b\u5f0f\u8ba1\u7b97\uff1a \\[ u = \\frac{\\triangle{ACP}_{Area}}{\\triangle{ABC}_{Area}} = \\frac{||\\overrightarrow{AC}\\times\\overrightarrow{AP}||}{||\\overrightarrow{AB}\\times\\overrightarrow{AC}||} \\\\ v = \\frac{\\triangle{ABP}_{Area}}{\\triangle{ABC}_{Area}} = \\frac{||\\overrightarrow{AB}\\times\\overrightarrow{AP}||}{||\\overrightarrow{AB}\\times\\overrightarrow{AC}||} \\] \u8fd9\u91cc\uff0c\u56e0\u4e3a \\(\\overrightarrow{AB}\\times\\overrightarrow{AC} = \\overrightarrow{N}\\) \u800c\u4e14\uff0c\u7531\u4e8e \\(\\overrightarrow{AC}\\times\\overrightarrow{AP}\\) \u4e0e \\(\\overrightarrow{N}\\) \u662f\u540c\u5411\u7684\uff08P\u70b9\u5728ABC\u5185\uff09\uff0c\u4e3a\u7b80\u5316\u8ba1\u7b97\uff08\u907f\u514d\u5f00\u9500\u8f83\u5927\u7684\u5927\u5c0f\u8ba1\u7b97\uff09\u6211\u4eec\u6709\uff1a \\[ u = \\frac{||\\overrightarrow{AC}\\times\\overrightarrow{AP}||}{||\\overrightarrow{AB}\\times\\overrightarrow{AC}||} = \\frac{(\\overrightarrow{AC}\\times\\overrightarrow{AP})\\cdot\\overrightarrow{N}}{\\overrightarrow{N}\\cdot\\overrightarrow{N}} \\\\ v = \\frac{||\\overrightarrow{AB}\\times\\overrightarrow{AP}||}{||\\overrightarrow{AB}\\times\\overrightarrow{AC}||} = \\frac{(\\overrightarrow{AB}\\times\\overrightarrow{AP})\\cdot\\overrightarrow{N}}{\\overrightarrow{N}\\cdot\\overrightarrow{N}} \\] \u6b64\u5916\uff0c\u7531\u4e8e \\((\\overrightarrow{AC}\\times\\overrightarrow{AP})\\cdot\\overrightarrow{N}\\) \u53ef\u7528\u4e8e\u5224\u65adP\u70b9\u662f\u5426\u4f4d\u4e8e\u4e09\u89d2\u5f62ABC\u5185\u90e8\uff0c\u56e0\u6b64\u5728ray tracing\u7684\u7ba1\u7ebf\u4e2d\uff0c\u5b9e\u9645\u4e0a\u8be5\u503c\u5df2\u7ecf\u8ba1\u7b97\u8fc7\uff0c\u56e0\u6b64\u66f4\u8fdb\u4e00\u6b65\u8282\u7701\u4e86\u8fd0\u7b97\u5f00\u9500\u3002\u5bf9\u4e8eRay Tracing\u4e2d\u7684\u5c04\u7ebf\u6c42\u4ea4\uff0c\u5728\u4e4b\u540e\u7684\u7b14\u8bb0\u4e2d\u4f1a\u8c08\u5230\u3002","title":"\u8ba1\u7b97\u91cd\u5fc3\u5750\u6807"},{"location":"barycentric_coordinates/#_9","text":"\u5bf9\u4e8e\u8ba1\u7b97\u673a\u800c\u8a00\uff0c\u4e24\u4e2a\u4e09\u7ef4\u5411\u91cf\u7684\u53c9\u4e58\u5f00\u9500\u8f83\u5927\uff0c\u4e0b\u9762\u7528\u8f83\u4e3a\u7b80\u5355\u7684\u7b97\u6cd5\u8ba1\u7b97\uff1a \\[ P = wA + uB + vC = (1-u-v)A+uB+vC = A + u(B-A) + v(C-A) \\\\ \\Rightarrow P - A = u(B-A) + v(C-A) \\\\ \\Rightarrow \\overrightarrow{AP} = u\\overrightarrow{AB} + v\\overrightarrow{AC} \\] \u4ee4 \\(\\overrightarrow{AB} = \\vec{v_0}\\) \uff0c \\(\\overrightarrow{AC} = \\vec{v_1}\\) \u4ee5\u53ca \\(\\overrightarrow{AP} = \\vec{v_2}\\) \uff0c \u5e76\u4e14 \\(d_{ij} = \\vec{v_i}\\cdot\\vec{v_j}\\) \uff0c\u5219\u6709\uff1a \\[ \\vec{v_2} = u\\vec{v_0} + v\\vec{v_1} \\] \uff0815\uff09\u4e24\u8fb9\u70b9\u4e58 \\(v_0\\) \uff1a \\[ \\vec{v_2}\\cdot\\vec{v_0} = u\\vec{v_0}\\cdot\\vec{v_0} + v\\vec{v_1}\\cdot\\vec{v_0} \\] \uff0815\uff09\u4e24\u8fb9\u70b9\u4e58 \\(\\vec{v_1}\\) \uff1a \\[ \\vec{v_2}\\cdot\\vec{v_1} = u\\vec{v_0}\\cdot\\vec{v_1} + v\\vec{v_1}\\cdot\\vec{v_1} \\] \u5f97\uff1a \\[ d_{02} = d_{00}u + d_{01}w \\\\ d_{12} = d_{01}u + d_{11}w \\] \u89e3\u5f97\uff1a \\[ v = \\frac{d_{11}d_{02}-d_{01}d_{12}}{d_{00}d_{11}-d^2_{01}}\\qquad w = \\frac{d_{00}d_{12}-d_{01}d_{02}}{d_{00}d_{11}-d^2_{01}} \\]","title":"\u7b80\u5316\u8fd0\u7b97"},{"location":"barycentric_coordinates/#mesh-transfer-smpl-to-smplx","text":"smpl\u662f\u4e00\u4e2a\u4eba\u4f53\u53c2\u6570\u5316\u6a21\u578b\uff0c\u800csmplx\u5219\u662f\u5176\u5347\u7ea7\u7248\uff0c\u5305\u62ec\u5e26\u5173\u8282\u7684\u624b\u90e8\u6a21\u578b\u4ee5\u53ca\u5e26\u5173\u8282\u548c\u8868\u60c5\u7684\u5934\u90e8\u6a21\u578b\u3002smplx\u548csmpl\u6709\u7740\u7565\u5fae\u533a\u522b\u7684pose\u548cshape\u53c2\u6570\uff0c\u56e0\u6b64\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u53c2\u6570\u5e76\u4e0d\u662f\u53ef\u4e92\u6362\u7684\u3002\u56e0\u6b64\uff0c\u5982\u679c\u9700\u8981\u5c06smpl\u5347\u7ea7\u4e3asmplx\uff0c\u5148\u5c06smplx\u7684\u7f51\u683c\u62df\u5408\u5230\u76ee\u6807smpl\u6a21\u578b\u7684\u7f51\u683c\u4e0a\uff0c\u7136\u540e\u518d\u62df\u5408smplx\u7684\u53c2\u6570\uff0c\u5f97\u5230\u6211\u4eec\u9700\u8981\u7684\u7ed3\u679c\u3002 \u5177\u4f53\u505a\u6cd5\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u4f7f\u7528rest shape\u7684smpl\u548csmplx\u6a21\u578b\u505aregistration\uff0c\u5bf9\u6bcf\u4e00\u4e2asmplx\u6a21\u578b\u4e0a\u7684\u9876\u70b9\uff0c\u5728smpl\u6a21\u578b\u4e0a\u627e\u5230\u8ddd\u79bb\u5176\u6700\u8fd1\u7684\u4e09\u89d2\u9762\uff0c\u5e76\u4e14\u5c06smplx\u7684\u8be5\u9876\u70b9\u7528\u91cd\u5fc3\u5750\u6807\u8868\u793a\u5728smpl\u6a21\u578b\u7684\u8be5\u4e09\u89d2\u9762\u4e0a\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f97\u5230\u4ee5\u4e0b\u4e24\u4e2a\u6570\u636e\uff1a \u4e00\u4e2asmplx\u9876\u70b9\u5230smpl\u4e09\u89d2\u9762\u7684\u5bf9\u5e94\u8868 \u4e00\u4e2asmplx\u9876\u70b9\u5728\u5bf9\u5e94\u7684smpl\u4e09\u89d2\u9762\u4e0a\u7684\u91cd\u5fc3\u5750\u6807 \u540c\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u906e\u7f69\u6392\u9664\u6389smplx\u4e0a\u76f8\u5bf9\u4e8esmpl\u7279\u6b8a\u7684\u7ed3\u6784\uff0c\u6bd4\u5982\u773c\u7403\u548c\u53e3\u8154\u7b49\u7b49\u3002 \u7136\u540e\uff0c\u5728\u76ee\u6807\u7684smpl\u6a21\u578b\u4e0a\uff0c\u4ee4 \\(f_i\\in\\mathbb{N}^3\\) \u4e3aSMPLX\u7b2ci\u4e2a\u9876\u70b9\u5bf9\u5e94\u7684SMPL\u7684\u4e09\u89d2\u9762\u7684\u4e09\u4e2a\u9876\u70b9\u5e8f\u53f7\uff0c \\([a_i, b_i, c_i]\\) \u4e3aSMPLX\u7b2ci\u4e2a\u9876\u70b9\u5728\u8be5\u4e09\u89d2\u9762\u4e2d\u7684\u91cd\u5fc3\u5750\u6807\u3002\u5219SMPLX\u7684\u7b2ci\u4e2a\u9876\u70b9\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u8ba1\u7b97\u83b7\u5f97\uff1a $$ v_i^{SMPL-X} = a_i * v_{f_i^0}^{SMPL} + b_i * v_{f_i^1}^{SMPL} + c_i * v_{f_i^2}^{SMPL} $$ \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u83b7\u5f97\u4e86\u5728SMPLX\u62d3\u6251\u4e0b\u7684\u6a21\u578b\uff0c\u7136\u540e\u4f7f\u7528\u4f18\u5316\u62df\u5408\u7684\u65b9\u5f0f\uff0c\u6700\u7ec8\u5f97\u5230\u6211\u4eec\u9700\u8981\u7684SMPLX\u53c2\u6570\u5316\u6a21\u578b\u7684beta\u3001pose\u7b49\u53c2\u6570\u3002","title":"Mesh Transfer : SMPL to SMPLX"},{"location":"barycentric_coordinates/#_10","text":"[1] https://en.wikipedia.org/wiki/Barycentric_coordinate_system [2] https://en.wikipedia.org/wiki/Affine_space [3] https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/barycentric-coordinates [4] https://github.com/vchoutas/smplx/blob/master/transfer_model/docs/transfer.md","title":"\u53c2\u8003"},{"location":"freeform_deformation/","text":"Freeform Deformation Reference : Botsch, An Intuitive Framework for Real-Time Freeform Modeling \u76ee\u7684\uff1a\u7b80\u5316\u7528\u6237\u4ea4\u4e92\uff0c\u5373\u4f7f\u5bf9\u590d\u6742\u7684\u7f51\u683c\u3002\u7528\u6237\u9996\u5148\u8bbe\u7f6e\u8fb9\u754c\u7ea6\u675f\uff08Boundary constraints\uff09\uff0c\u7136\u540e\u4f7f\u7528\u4e00\u4e2a9-dof\u7684manipulator\u6765\u63a7\u5236\u7269\u4f53\u3002 \u8bba\u6587\u8ba4\u4e3a\uff0cCAD\u4e2d\u5bf9\u51e0\u4f55\u7684\u5904\u7406\u6700\u91cd\u8981\u7684\u8fd8\u662f\u7528\u6237\u80fd\u65b9\u4fbf\u5730\u7ed9\u51fa\u5bf9\u7269\u4f53\u5f62\u72b6\u7684\u9884\u60f3\uff08metaphor\uff09\uff0c\u5e76\u4e14\u80fd\u5b9e\u65f6\u89c2\u5bdf\u5230\u7ed3\u679c\u3002\u5728\u6280\u672f\u4e0a\u7684\u95ee\u9898\u662f\uff0c\u53ef\u80fd\u7684\u51e0\u4f55\u5f62\u72b6\uff08\u5f62\u53d8\uff09\u7a7a\u95f4\u5341\u5206\u5de8\u5927\uff0c\u800c\u4e14\u7ef4\u5ea6\u6781\u9ad8\u3002\u7528\u6237\u7684\u64cd\u4f5c\u4e0d\u5916\u4e4e\u5bf9\u4e00\u4e2a\u9876\u70b9\u6216\u8005\u4e00\u7ec4\u9876\u70b9\u8fdb\u884c3-dof\u7684\u5e73\u79fb\u64cd\u4f5c\uff0c\u6216\u80056-dof\u7684\u521a\u6027\u53d8\u6362\u6216\u80059-dof\u7684\u66f4\u52a0\u590d\u6742\u7684\u53d8\u6362\uff08\u5177\u6709\u66f4\u9ad8\u7684\u8981\u6c42\uff0c\u4ee5\u53ca\u66f4\u591a\u7684handle\uff09\u3002","title":"Freeform Deformation"},{"location":"freeform_deformation/#freeform-deformation","text":"Reference : Botsch, An Intuitive Framework for Real-Time Freeform Modeling \u76ee\u7684\uff1a\u7b80\u5316\u7528\u6237\u4ea4\u4e92\uff0c\u5373\u4f7f\u5bf9\u590d\u6742\u7684\u7f51\u683c\u3002\u7528\u6237\u9996\u5148\u8bbe\u7f6e\u8fb9\u754c\u7ea6\u675f\uff08Boundary constraints\uff09\uff0c\u7136\u540e\u4f7f\u7528\u4e00\u4e2a9-dof\u7684manipulator\u6765\u63a7\u5236\u7269\u4f53\u3002 \u8bba\u6587\u8ba4\u4e3a\uff0cCAD\u4e2d\u5bf9\u51e0\u4f55\u7684\u5904\u7406\u6700\u91cd\u8981\u7684\u8fd8\u662f\u7528\u6237\u80fd\u65b9\u4fbf\u5730\u7ed9\u51fa\u5bf9\u7269\u4f53\u5f62\u72b6\u7684\u9884\u60f3\uff08metaphor\uff09\uff0c\u5e76\u4e14\u80fd\u5b9e\u65f6\u89c2\u5bdf\u5230\u7ed3\u679c\u3002\u5728\u6280\u672f\u4e0a\u7684\u95ee\u9898\u662f\uff0c\u53ef\u80fd\u7684\u51e0\u4f55\u5f62\u72b6\uff08\u5f62\u53d8\uff09\u7a7a\u95f4\u5341\u5206\u5de8\u5927\uff0c\u800c\u4e14\u7ef4\u5ea6\u6781\u9ad8\u3002\u7528\u6237\u7684\u64cd\u4f5c\u4e0d\u5916\u4e4e\u5bf9\u4e00\u4e2a\u9876\u70b9\u6216\u8005\u4e00\u7ec4\u9876\u70b9\u8fdb\u884c3-dof\u7684\u5e73\u79fb\u64cd\u4f5c\uff0c\u6216\u80056-dof\u7684\u521a\u6027\u53d8\u6362\u6216\u80059-dof\u7684\u66f4\u52a0\u590d\u6742\u7684\u53d8\u6362\uff08\u5177\u6709\u66f4\u9ad8\u7684\u8981\u6c42\uff0c\u4ee5\u53ca\u66f4\u591a\u7684handle\uff09\u3002","title":"Freeform Deformation"},{"location":"laplacian_processing/","text":"Laplacian Mesh Processing Generalized barycentric coordinates harmonic weights mesh optimization","title":"Laplacian Mesh Processing"},{"location":"laplacian_processing/#laplacian-mesh-processing","text":"Generalized barycentric coordinates harmonic weights mesh optimization","title":"Laplacian Mesh Processing"},{"location":"least_squares/","text":"\u6700\u5c0f\u4e8c\u4e58\u6cd5 \u7efc\u8ff0 \u6700\u5c0f\u4e8c\u4e58\u6cd5\u662f\u5728\u56de\u5f52\u5206\u6790\u4e2d\u7528\u4e8e\u62df\u5408overdetermined system\uff08\u5373\u65b9\u7a0b\u6570\u591a\u4e8e\u672a\u77e5\u6570\u7684\u65b9\u7a0b\u7ec4\uff09\u7684\u6807\u51c6\u65b9\u6cd5\u3002\u5176\u57fa\u672c\u601d\u60f3\u662f\u6700\u5c0f\u5316\u6b8b\u5dee\u5e73\u65b9\u548c\uff08\u6b8b\u5dee\u88ab\u5b9a\u4e49\u4e3a\u89c2\u6d4b\u503c\u548c\u62df\u5408\u503c\u7684\u5dee\uff09\u3002 \u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u5206\u4e3a\u4e24\u7c7b\uff1a\u7ebf\u6027\u4e8c\u4e58\u548c\u975e\u7ebf\u6027\u4e8c\u4e58\uff0c\u7ebf\u6027\u4e8c\u4e58\u4e2d\u6240\u6709\u7684\u6b8b\u5dee\u5747\u4e3a\u7ebf\u6027\u3002\u7ebf\u6027\u4e8c\u4e58\u95ee\u9898\u5b58\u5728\u89e3\u6790\u89e3\uff0c\u800c\u975e\u7ebf\u6027\u4e8c\u4e58\u95ee\u9898\u5219\u9700\u8981\u901a\u8fc7\u8fed\u4ee3\u4f18\u5316\u7684\u65b9\u6cd5\uff0c\u5728\u6bcf\u6b65\u8fed\u4ee3\u7684\u8fc7\u7a0b\u4e2d\u4f9d\u7136\u662f\u4f7f\u7528\u7684\u7ebf\u6027\u4e8c\u4e58\u89e3\u6cd5\uff0c\u56e0\u6b64\u8fd9\u4e24\u7c7b\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u5177\u6709\u7edf\u4e00\u7684\u5f62\u5f0f\u3002 \u5f62\u5f0f\u5316\u95ee\u9898 \u4e00\u4e2a\u7b80\u5355\u7684\u8f93\u5165\u53ef\u4ee5\u8ba4\u4e3a\u662fn\u4e2a\u70b9\u7684\u96c6\u5408 \\((x_i, y_i), i = 1, ..., n\\) \u8fd9\u91ccx\u662f\u81ea\u53d8\u91cf\uff0cy\u662f\u56e0\u53d8\u91cf\uff08\u89c2\u6d4b\u503c\uff09\u3002\u800c\u62df\u5408\u6a21\u578b \\(f(x, \\beta )\\) \u542b\u6709m\u4e2a\u53c2\u6570\uff0c\u5373 \\(\\beta_i, i = 1,...,m\\) \uff0c\u90a3\u4e48\uff0c\u6700\u5c0f\u4e8c\u4e58\u6cd5\u7684\u76ee\u6807\u4fbf\u662f\u627e\u5230\u6700\u62df\u5408\u8fd9\u7ec4\u6570\u636e\u7684\u6a21\u578b\u53c2\u6570\u3002\u4e0b\u9762\u662f\u6b8b\u5dee\u7684\u5b9a\u4e49\uff1a \\(r_i = y_i - f(x_i, \\beta)\\) \uff0c\u800c\u6700\u5c0f\u4e8c\u4e58\u5c31\u662f\u6700\u5c0f\u5316\u8fd9\u4e2a\u6b8b\u5dee\u5e73\u65b9\u7684\u548c\uff1a \\(S = \\sum_{i=1}^n r^2_i\\) \u9650\u5236 \u76f8\u6bd4\u4f7f\u7528total least squares\uff0c\u6700\u5c0f\u4e8c\u4e58\u6cd5\u7684\u76ee\u6807\u51fd\u6570\u53ea\u8003\u8651\u4e86\u89c2\u6d4b\u503c\u7684\u8bef\u5dee\uff0c\u800ctotal least squares\u5219\u540c\u65f6\u8003\u8651\u4e86\u81ea\u53d8\u91cf\u548c\u56e0\u53d8\u91cf\uff0c\u5176\u76ee\u6807\u51fd\u6570\u53ef\u4ee5\u5199\u4e3a\uff1a \\(S = r^T_x M^{-1}_xr_X + r^T_y M^{-1}_y r_y\\) \u5176\u4e2d \\(M_x\\) \u548c \\(M_y\\) \u662fx\u548cy\u7684\u534f\u65b9\u5dee\u77e9\u9635\uff0c \\(r_x\\) \u548c \\(r_y\\) \u5219\u662fx\u548cy\u7684\u6b8b\u5dee\u3002\u66f4\u591a\u5173\u4e8etotal least squares\u7684\u8ba8\u8bba\uff1a Wiki \u89e3\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898 \u89e3\u6700\u5c0f\u4e8c\u4e58\u7684\u672c\u8d28\u65b9\u6cd5\u5c31\u662f\u4f7f\u68af\u5ea6\u4e3a0\uff0c\u5373\uff1a \\[ \\frac{\\partial S}{\\partial \\beta_j} = 2 \\sum_i r_i \\frac{\\partial r_i}{\\partial \\beta_j} = 0, j=1,...,m \\] \u7136\u540e\uff0c\u5373\u7136 \\(r_i=y_i-f(x_i,\\beta)\\) \uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u68af\u5ea6\u53ef\u4ee5\u5199\u4e3a\uff1a \\[ -2\\sum_i r_i \\frac{\\partial f(x_i, \\beta)}{\\partial \\beta_j} = 0, j = 1,...,m \\] \u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u6cd5 \u5bf9\u4e8e \u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\uff08Linear Least Squares\uff09 \uff0c\u6211\u4eec\u7684\u56de\u5f52\u6a21\u578b\u662f\u6a21\u578b\u53c2\u6570\u7684\u7ebf\u6027\u7ec4\u5408\uff1a \\[ f(x,\\beta) = \\sum_{j=1}^m \\beta_j\\phi_j(x) \\] \u5176\u4e2d \\(\\phi_j\\) \u662fx\u7684\u51fd\u6570\uff0c\u6211\u4eec\u4ee4 \\(X_{ij} = \\phi_j(x_i)\\) \u7136\u540e\u628a\u81ea\u53d8\u91cf\u548c\u56e0\u53d8\u91cf\u653e\u5165X\u548cY\u77e9\u9635\u4e2d\uff0c\u800cD\u5219\u662f\u6240\u6709\u6570\u636e\u7684\u96c6\u5408\uff0c\u6211\u4eec\u6709\uff1a \\[ Y = \\begin{vmatrix} Y_1 \\\\ Y_2 \\\\ \\vdots \\\\ Y_n \\end{vmatrix}, X = \\begin{vmatrix} \\phi_1(x_1) & \\phi_2(x_1) & \\cdots & \\phi_m(x_1) \\\\ \\phi_1(x_2) & \\phi_2(x_2) & \\cdots & \\phi_m(x_2) \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\phi_1(x_n) & \\phi_2(x_n) & \\cdots & \\phi_m(x_n) \\end{vmatrix}, \\beta = \\begin{vmatrix} \\beta_1 \\\\ \\beta_2 \\\\ \\vdots \\\\ \\beta_m \\end{vmatrix} \\] \\[ L(D,\\beta) = ||Y - X\\beta||^2 = (Y-X\\beta)^T(Y-X\\beta)=Y^TY-Y^TX\\beta-\\beta^TX^TY+\\beta^TX^TX\\beta \\] \u90a3\u4e48\uff0c\u89e3\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u5c31\u53ef\u4ee5\u8ba1\u7b97L\u7684\u68af\u5ea6\uff0c\u5e76\u4f7f\u5f97\u5176\u4e3a0\u3002 \\[ Y^TX\\beta = \\sum_{i=1}^n\\sum_{j=1}^m Y_i\\phi_j(x_i)\\beta_j = \\beta X^TY \\] \\[ \\frac{\\partial L(D,\\beta)}{\\partial \\beta} = \\frac{\\partial(Y^TY-Y^TX\\beta-\\beta^TX^TY+\\beta^TX^TX\\beta)}{\\partial \\beta} = \\frac{\\partial(-2\\beta^T X^TY + \\beta^T X^TX\\beta)}{\\partial \\beta} = -2X^TY + 2X^TX\\beta \\] \\[ -2XTY + 2X^TX\\beta = 0 \\Rightarrow X^TY = X^TX\\beta \\] \\[ \\hat{\\beta} = (X^TX)^{-1}X^TY \\] \u5176\u4e2d \\((X^TX)^{-1}X^T\\) \u79f0\u4e3aMoore-Penrose Generalized Inverse Matrix\uff08\u7a46\u5c14-\u5f6d\u7f57\u65af\u5e7f\u4e49\u9006\u77e9\u9635\uff09\uff0c\u66f4\u591a\uff1a Wiki \u975e\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u6cd5 \u5bf9\u4e8e\u5927\u591a\u6570\u975e\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\uff0c\u5e76\u4e0d\u5b58\u5728\u4e00\u4e2a\u5f62\u5f0f\u56fa\u5b9a\u7684\u6570\u503c\u89e3\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u8fd9\u91cc\u4ecb\u7ecd\u6c42\u89e3\u975e\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u7684\u8fed\u4ee3\u6cd5\u3002\u5176\u4e00\u822c\u5f62\u5f0f\u4e3a\uff0c\u5373\u4f7f\u7528\u8fed\u4ee3\u7ed3\u679c \\(\\beta_j\\) \u6765\u4f5c\u4e3a\u53c2\u6570 \\(\\beta\\) \u7684\u62df\u5408\u503c\uff1a \\[ \\beta_j \\approx \\beta_j^{k+1} = \\beta_j^k + \\Delta \\beta_j \\] \u800c\u6bcf\u4e00\u6b65\u8fed\u4ee3\u53ef\u4ee5\u770b\u505a\u662f\u4f7f\u7528\u6cf0\u52d2\u5c55\u5f00\u7684\u7b2c\u4e00\u9879\u7684\u7ebf\u6027\u62df\u5408\u6b65\u9aa4\uff1a \\[ f(x_i, \\beta) \\approx f(x_i, \\beta^k) + \\sum_j \\frac{\\partial f(x_i,\\beta)}{\\partial\\beta_j}(\\beta_j - \\beta_j^k) \\\\ = f(x_i, \\beta^k) + \\sum_j J_{ij}(\\beta_j - \\beta_j^k) \\] \u800c\u5982\u524d\u9762\u6240\u8bf4\uff0c\u6700\u5c0f\u4e8c\u4e58\u6cd5\u7684\u76ee\u6807\u662f\u6700\u5c0f\u5316\u6b8b\u5dee\u5e73\u65b9\uff0c\u5728\u975e\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u4e2d\uff0c\u6b8b\u5dee\u7684\u8868\u793a\u4e0e\u4e0a\u6587\u4e00\u81f4\uff0c\u4e3a \\(r_i = y_i - f(x_i, \\beta), i = 1,2,...,m\\) \u4ee5\u53ca\u6b8b\u5dee\u5e73\u65b9 \\(S = \\sum_{i=1}^m r^2_i\\) \u5219\uff0c\u4ee4\u6b8b\u5dee\u5e73\u65b9\u7684\u68af\u5ea6\u4e3a0\uff0c\u6211\u4eec\u6709\uff1a \\[ \\frac{\\partial S}{\\partial \\beta_j} = 2 \\sum_i r_i \\frac{\\partial r_i}{\\partial \\beta_j} = 0 \\] \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u96c5\u53ef\u6bd4\u77e9\u9635\u8868\u793a\u6b8b\u5dee\u5bf9\u53c2\u6570\u7684\u504f\u5bfc\uff1a \\[ \\frac{\\partial r_i}{\\partial \\beta_j} = \\frac{\\partial (y_i - f(x_i, \\beta))}{\\partial \\beta_j} = -\\frac{\\partial f(x_i, \\beta)}{\\partial \\beta_j} = -J_{ij} \\] \u800c\uff0c\u5bf9\u4e8e\u6b8b\u5dee\uff0c\u6211\u4eec\u6709\uff1a \\[ r_i = y_i - f(x_i, \\beta) = (y_i - f(x_i, \\beta^k)) + (f(x_i, \\beta^k) - f(x_i, \\beta)) \\\\ \\approx \\Delta y_i - \\sum_{s=1}^n J_{is} \\Delta \\beta_s \\] \u5c06\uff0813\uff09\uff0814\uff09\u4ee3\u5165\uff0812\uff09\u5f97\uff1a \\[ -2\\sum_{i=1}^m J_{ij}(\\Delta y_i - \\sum_{s=1}^n J_{is}\\Delta \\beta_s) \\\\ \\Rightarrow \\sum_{i=1}^m\\sum_{s=1}^n J_{ij}J_{is}\\Delta\\beta_s = \\sum_{i=1}^m J_{ij}\\Delta y_i, j = 1,2,...,n \\] \u4f7f\u7528\u77e9\u9635\u6539\u5199\uff0815\uff09\u4e3a\uff0c\u4e5f\u5c31\u662f\u9ad8\u65af-\u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u5f62\u5f0f\u5316\u63cf\u8ff0\uff1a \\[ (J^TJ)\\Delta\\beta=J^T\\Delta{y} \\] \\[ \\beta^{k+1} = \\beta^k+\\Delta\\beta = \\beta^k+(J^TJ)^{-1}J^T\\Delta{y} \\] \u8fd9\u91cc \\(\\Delta y_i\\) \u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a\u5728\u7b2ck\u6b21\u8fed\u4ee3\u65f6\u7684\u6b8b\u5dee \\(r_i^k = y_i - f(x_i, \\beta^k)\\) Levenberg\u2013Marquardt\u8fed\u4ee3\u6cd5 LM\u6cd5\u5c06\uff0816\uff09\u5f0f\u6539\u4e3a\u4e86\u5e26\u963b\u5c3c\u7cfb\u6570\u7684\u7248\u672c\uff1a \\[ (J^TJ + \\lambda I)\\Delta\\beta = J^T\\Delta y \\] \\(\\lambda\\) \u662f\u4e00\u4e2a\u975e\u8d1f\u7cfb\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u68af\u5ea6\u4e0b\u964d\u7684\u901f\u5ea6\u3002\u5f53\u6b8b\u5dee\u5e73\u65b9\u4e0b\u964d\u7684\u901f\u5ea6\u8db3\u591f\u5feb\u7684\u65f6\u5019\uff0c\u53d6\u503c\u8f83\u5c0f\uff0c\u6b64\u65f6\u65b9\u6cd5\u8d8b\u8fd1\u9ad8\u65af-\u725b\u987f\u6cd5\uff1b\u5f53\u4e0b\u964d\u901f\u5ea6\u8f83\u6162\u7684\u65f6\u5019\uff0c\u53d6\u503c\u8f83\u5927\uff0c\u6b64\u65f6\u8fed\u4ee3\u5728\u68af\u5ea6\u7684\u53cd\u65b9\u5411\u5177\u6709\u66f4\u5927\u7684\u6b65\u957f\u3002 \u5bf9LM\u7684\u4e00\u79cdscale-invariant\u7684\u6539\u8fdb\uff0c\u5373\u5bf9\u6bcf\u4e2a\u68af\u5ea6\u5143\u7d20\u4f7f\u7528\u4e0d\u540c\u7684\u7cfb\u6570 \\(\\lambda\\) \uff0c\u4e8e\u662f\u6211\u4eec\u6709\uff1a \\[ (J^TJ+\\lambda diag(J^TJ))\\Delta\\beta = J^T\\Delta y \\] \u53c2\u8003\uff1a [1] https://en.wikipedia.org/wiki/Least_squares [2] http://www.gatsby.ucl.ac.uk/teaching/courses/sntn/sntn-2017/resources/Matrix_derivatives_cribsheet.pdf [3] https://atmos.washington.edu/~dennis/MatrixCalculus.pdf [4] https://www.math.uwaterloo.ca/~hwolkowi/matrixcookbook.pdf [5] https://en.wikipedia.org/wiki/Levenberg-Marquardt_algorithm","title":"\u6700\u5c0f\u4e8c\u4e58\u6cd5"},{"location":"least_squares/#_1","text":"","title":"\u6700\u5c0f\u4e8c\u4e58\u6cd5"},{"location":"least_squares/#_2","text":"\u6700\u5c0f\u4e8c\u4e58\u6cd5\u662f\u5728\u56de\u5f52\u5206\u6790\u4e2d\u7528\u4e8e\u62df\u5408overdetermined system\uff08\u5373\u65b9\u7a0b\u6570\u591a\u4e8e\u672a\u77e5\u6570\u7684\u65b9\u7a0b\u7ec4\uff09\u7684\u6807\u51c6\u65b9\u6cd5\u3002\u5176\u57fa\u672c\u601d\u60f3\u662f\u6700\u5c0f\u5316\u6b8b\u5dee\u5e73\u65b9\u548c\uff08\u6b8b\u5dee\u88ab\u5b9a\u4e49\u4e3a\u89c2\u6d4b\u503c\u548c\u62df\u5408\u503c\u7684\u5dee\uff09\u3002 \u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u5206\u4e3a\u4e24\u7c7b\uff1a\u7ebf\u6027\u4e8c\u4e58\u548c\u975e\u7ebf\u6027\u4e8c\u4e58\uff0c\u7ebf\u6027\u4e8c\u4e58\u4e2d\u6240\u6709\u7684\u6b8b\u5dee\u5747\u4e3a\u7ebf\u6027\u3002\u7ebf\u6027\u4e8c\u4e58\u95ee\u9898\u5b58\u5728\u89e3\u6790\u89e3\uff0c\u800c\u975e\u7ebf\u6027\u4e8c\u4e58\u95ee\u9898\u5219\u9700\u8981\u901a\u8fc7\u8fed\u4ee3\u4f18\u5316\u7684\u65b9\u6cd5\uff0c\u5728\u6bcf\u6b65\u8fed\u4ee3\u7684\u8fc7\u7a0b\u4e2d\u4f9d\u7136\u662f\u4f7f\u7528\u7684\u7ebf\u6027\u4e8c\u4e58\u89e3\u6cd5\uff0c\u56e0\u6b64\u8fd9\u4e24\u7c7b\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u5177\u6709\u7edf\u4e00\u7684\u5f62\u5f0f\u3002","title":"\u7efc\u8ff0"},{"location":"least_squares/#_3","text":"\u4e00\u4e2a\u7b80\u5355\u7684\u8f93\u5165\u53ef\u4ee5\u8ba4\u4e3a\u662fn\u4e2a\u70b9\u7684\u96c6\u5408 \\((x_i, y_i), i = 1, ..., n\\) \u8fd9\u91ccx\u662f\u81ea\u53d8\u91cf\uff0cy\u662f\u56e0\u53d8\u91cf\uff08\u89c2\u6d4b\u503c\uff09\u3002\u800c\u62df\u5408\u6a21\u578b \\(f(x, \\beta )\\) \u542b\u6709m\u4e2a\u53c2\u6570\uff0c\u5373 \\(\\beta_i, i = 1,...,m\\) \uff0c\u90a3\u4e48\uff0c\u6700\u5c0f\u4e8c\u4e58\u6cd5\u7684\u76ee\u6807\u4fbf\u662f\u627e\u5230\u6700\u62df\u5408\u8fd9\u7ec4\u6570\u636e\u7684\u6a21\u578b\u53c2\u6570\u3002\u4e0b\u9762\u662f\u6b8b\u5dee\u7684\u5b9a\u4e49\uff1a \\(r_i = y_i - f(x_i, \\beta)\\) \uff0c\u800c\u6700\u5c0f\u4e8c\u4e58\u5c31\u662f\u6700\u5c0f\u5316\u8fd9\u4e2a\u6b8b\u5dee\u5e73\u65b9\u7684\u548c\uff1a \\(S = \\sum_{i=1}^n r^2_i\\)","title":"\u5f62\u5f0f\u5316\u95ee\u9898"},{"location":"least_squares/#_4","text":"\u76f8\u6bd4\u4f7f\u7528total least squares\uff0c\u6700\u5c0f\u4e8c\u4e58\u6cd5\u7684\u76ee\u6807\u51fd\u6570\u53ea\u8003\u8651\u4e86\u89c2\u6d4b\u503c\u7684\u8bef\u5dee\uff0c\u800ctotal least squares\u5219\u540c\u65f6\u8003\u8651\u4e86\u81ea\u53d8\u91cf\u548c\u56e0\u53d8\u91cf\uff0c\u5176\u76ee\u6807\u51fd\u6570\u53ef\u4ee5\u5199\u4e3a\uff1a \\(S = r^T_x M^{-1}_xr_X + r^T_y M^{-1}_y r_y\\) \u5176\u4e2d \\(M_x\\) \u548c \\(M_y\\) \u662fx\u548cy\u7684\u534f\u65b9\u5dee\u77e9\u9635\uff0c \\(r_x\\) \u548c \\(r_y\\) \u5219\u662fx\u548cy\u7684\u6b8b\u5dee\u3002\u66f4\u591a\u5173\u4e8etotal least squares\u7684\u8ba8\u8bba\uff1a Wiki","title":"\u9650\u5236"},{"location":"least_squares/#_5","text":"\u89e3\u6700\u5c0f\u4e8c\u4e58\u7684\u672c\u8d28\u65b9\u6cd5\u5c31\u662f\u4f7f\u68af\u5ea6\u4e3a0\uff0c\u5373\uff1a \\[ \\frac{\\partial S}{\\partial \\beta_j} = 2 \\sum_i r_i \\frac{\\partial r_i}{\\partial \\beta_j} = 0, j=1,...,m \\] \u7136\u540e\uff0c\u5373\u7136 \\(r_i=y_i-f(x_i,\\beta)\\) \uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u68af\u5ea6\u53ef\u4ee5\u5199\u4e3a\uff1a \\[ -2\\sum_i r_i \\frac{\\partial f(x_i, \\beta)}{\\partial \\beta_j} = 0, j = 1,...,m \\]","title":"\u89e3\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898"},{"location":"least_squares/#_6","text":"\u5bf9\u4e8e \u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\uff08Linear Least Squares\uff09 \uff0c\u6211\u4eec\u7684\u56de\u5f52\u6a21\u578b\u662f\u6a21\u578b\u53c2\u6570\u7684\u7ebf\u6027\u7ec4\u5408\uff1a \\[ f(x,\\beta) = \\sum_{j=1}^m \\beta_j\\phi_j(x) \\] \u5176\u4e2d \\(\\phi_j\\) \u662fx\u7684\u51fd\u6570\uff0c\u6211\u4eec\u4ee4 \\(X_{ij} = \\phi_j(x_i)\\) \u7136\u540e\u628a\u81ea\u53d8\u91cf\u548c\u56e0\u53d8\u91cf\u653e\u5165X\u548cY\u77e9\u9635\u4e2d\uff0c\u800cD\u5219\u662f\u6240\u6709\u6570\u636e\u7684\u96c6\u5408\uff0c\u6211\u4eec\u6709\uff1a \\[ Y = \\begin{vmatrix} Y_1 \\\\ Y_2 \\\\ \\vdots \\\\ Y_n \\end{vmatrix}, X = \\begin{vmatrix} \\phi_1(x_1) & \\phi_2(x_1) & \\cdots & \\phi_m(x_1) \\\\ \\phi_1(x_2) & \\phi_2(x_2) & \\cdots & \\phi_m(x_2) \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\phi_1(x_n) & \\phi_2(x_n) & \\cdots & \\phi_m(x_n) \\end{vmatrix}, \\beta = \\begin{vmatrix} \\beta_1 \\\\ \\beta_2 \\\\ \\vdots \\\\ \\beta_m \\end{vmatrix} \\] \\[ L(D,\\beta) = ||Y - X\\beta||^2 = (Y-X\\beta)^T(Y-X\\beta)=Y^TY-Y^TX\\beta-\\beta^TX^TY+\\beta^TX^TX\\beta \\] \u90a3\u4e48\uff0c\u89e3\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u5c31\u53ef\u4ee5\u8ba1\u7b97L\u7684\u68af\u5ea6\uff0c\u5e76\u4f7f\u5f97\u5176\u4e3a0\u3002 \\[ Y^TX\\beta = \\sum_{i=1}^n\\sum_{j=1}^m Y_i\\phi_j(x_i)\\beta_j = \\beta X^TY \\] \\[ \\frac{\\partial L(D,\\beta)}{\\partial \\beta} = \\frac{\\partial(Y^TY-Y^TX\\beta-\\beta^TX^TY+\\beta^TX^TX\\beta)}{\\partial \\beta} = \\frac{\\partial(-2\\beta^T X^TY + \\beta^T X^TX\\beta)}{\\partial \\beta} = -2X^TY + 2X^TX\\beta \\] \\[ -2XTY + 2X^TX\\beta = 0 \\Rightarrow X^TY = X^TX\\beta \\] \\[ \\hat{\\beta} = (X^TX)^{-1}X^TY \\] \u5176\u4e2d \\((X^TX)^{-1}X^T\\) \u79f0\u4e3aMoore-Penrose Generalized Inverse Matrix\uff08\u7a46\u5c14-\u5f6d\u7f57\u65af\u5e7f\u4e49\u9006\u77e9\u9635\uff09\uff0c\u66f4\u591a\uff1a Wiki","title":"\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u6cd5"},{"location":"least_squares/#_7","text":"\u5bf9\u4e8e\u5927\u591a\u6570\u975e\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\uff0c\u5e76\u4e0d\u5b58\u5728\u4e00\u4e2a\u5f62\u5f0f\u56fa\u5b9a\u7684\u6570\u503c\u89e3\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u8fd9\u91cc\u4ecb\u7ecd\u6c42\u89e3\u975e\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u7684\u8fed\u4ee3\u6cd5\u3002\u5176\u4e00\u822c\u5f62\u5f0f\u4e3a\uff0c\u5373\u4f7f\u7528\u8fed\u4ee3\u7ed3\u679c \\(\\beta_j\\) \u6765\u4f5c\u4e3a\u53c2\u6570 \\(\\beta\\) \u7684\u62df\u5408\u503c\uff1a \\[ \\beta_j \\approx \\beta_j^{k+1} = \\beta_j^k + \\Delta \\beta_j \\] \u800c\u6bcf\u4e00\u6b65\u8fed\u4ee3\u53ef\u4ee5\u770b\u505a\u662f\u4f7f\u7528\u6cf0\u52d2\u5c55\u5f00\u7684\u7b2c\u4e00\u9879\u7684\u7ebf\u6027\u62df\u5408\u6b65\u9aa4\uff1a \\[ f(x_i, \\beta) \\approx f(x_i, \\beta^k) + \\sum_j \\frac{\\partial f(x_i,\\beta)}{\\partial\\beta_j}(\\beta_j - \\beta_j^k) \\\\ = f(x_i, \\beta^k) + \\sum_j J_{ij}(\\beta_j - \\beta_j^k) \\] \u800c\u5982\u524d\u9762\u6240\u8bf4\uff0c\u6700\u5c0f\u4e8c\u4e58\u6cd5\u7684\u76ee\u6807\u662f\u6700\u5c0f\u5316\u6b8b\u5dee\u5e73\u65b9\uff0c\u5728\u975e\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u4e2d\uff0c\u6b8b\u5dee\u7684\u8868\u793a\u4e0e\u4e0a\u6587\u4e00\u81f4\uff0c\u4e3a \\(r_i = y_i - f(x_i, \\beta), i = 1,2,...,m\\) \u4ee5\u53ca\u6b8b\u5dee\u5e73\u65b9 \\(S = \\sum_{i=1}^m r^2_i\\) \u5219\uff0c\u4ee4\u6b8b\u5dee\u5e73\u65b9\u7684\u68af\u5ea6\u4e3a0\uff0c\u6211\u4eec\u6709\uff1a \\[ \\frac{\\partial S}{\\partial \\beta_j} = 2 \\sum_i r_i \\frac{\\partial r_i}{\\partial \\beta_j} = 0 \\] \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u96c5\u53ef\u6bd4\u77e9\u9635\u8868\u793a\u6b8b\u5dee\u5bf9\u53c2\u6570\u7684\u504f\u5bfc\uff1a \\[ \\frac{\\partial r_i}{\\partial \\beta_j} = \\frac{\\partial (y_i - f(x_i, \\beta))}{\\partial \\beta_j} = -\\frac{\\partial f(x_i, \\beta)}{\\partial \\beta_j} = -J_{ij} \\] \u800c\uff0c\u5bf9\u4e8e\u6b8b\u5dee\uff0c\u6211\u4eec\u6709\uff1a \\[ r_i = y_i - f(x_i, \\beta) = (y_i - f(x_i, \\beta^k)) + (f(x_i, \\beta^k) - f(x_i, \\beta)) \\\\ \\approx \\Delta y_i - \\sum_{s=1}^n J_{is} \\Delta \\beta_s \\] \u5c06\uff0813\uff09\uff0814\uff09\u4ee3\u5165\uff0812\uff09\u5f97\uff1a \\[ -2\\sum_{i=1}^m J_{ij}(\\Delta y_i - \\sum_{s=1}^n J_{is}\\Delta \\beta_s) \\\\ \\Rightarrow \\sum_{i=1}^m\\sum_{s=1}^n J_{ij}J_{is}\\Delta\\beta_s = \\sum_{i=1}^m J_{ij}\\Delta y_i, j = 1,2,...,n \\] \u4f7f\u7528\u77e9\u9635\u6539\u5199\uff0815\uff09\u4e3a\uff0c\u4e5f\u5c31\u662f\u9ad8\u65af-\u725b\u987f\u8fed\u4ee3\u6cd5\u7684\u5f62\u5f0f\u5316\u63cf\u8ff0\uff1a \\[ (J^TJ)\\Delta\\beta=J^T\\Delta{y} \\] \\[ \\beta^{k+1} = \\beta^k+\\Delta\\beta = \\beta^k+(J^TJ)^{-1}J^T\\Delta{y} \\] \u8fd9\u91cc \\(\\Delta y_i\\) \u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a\u5728\u7b2ck\u6b21\u8fed\u4ee3\u65f6\u7684\u6b8b\u5dee \\(r_i^k = y_i - f(x_i, \\beta^k)\\)","title":"\u975e\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u6cd5"},{"location":"least_squares/#levenbergmarquardt","text":"LM\u6cd5\u5c06\uff0816\uff09\u5f0f\u6539\u4e3a\u4e86\u5e26\u963b\u5c3c\u7cfb\u6570\u7684\u7248\u672c\uff1a \\[ (J^TJ + \\lambda I)\\Delta\\beta = J^T\\Delta y \\] \\(\\lambda\\) \u662f\u4e00\u4e2a\u975e\u8d1f\u7cfb\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u68af\u5ea6\u4e0b\u964d\u7684\u901f\u5ea6\u3002\u5f53\u6b8b\u5dee\u5e73\u65b9\u4e0b\u964d\u7684\u901f\u5ea6\u8db3\u591f\u5feb\u7684\u65f6\u5019\uff0c\u53d6\u503c\u8f83\u5c0f\uff0c\u6b64\u65f6\u65b9\u6cd5\u8d8b\u8fd1\u9ad8\u65af-\u725b\u987f\u6cd5\uff1b\u5f53\u4e0b\u964d\u901f\u5ea6\u8f83\u6162\u7684\u65f6\u5019\uff0c\u53d6\u503c\u8f83\u5927\uff0c\u6b64\u65f6\u8fed\u4ee3\u5728\u68af\u5ea6\u7684\u53cd\u65b9\u5411\u5177\u6709\u66f4\u5927\u7684\u6b65\u957f\u3002 \u5bf9LM\u7684\u4e00\u79cdscale-invariant\u7684\u6539\u8fdb\uff0c\u5373\u5bf9\u6bcf\u4e2a\u68af\u5ea6\u5143\u7d20\u4f7f\u7528\u4e0d\u540c\u7684\u7cfb\u6570 \\(\\lambda\\) \uff0c\u4e8e\u662f\u6211\u4eec\u6709\uff1a \\[ (J^TJ+\\lambda diag(J^TJ))\\Delta\\beta = J^T\\Delta y \\]","title":"Levenberg\u2013Marquardt\u8fed\u4ee3\u6cd5"},{"location":"least_squares/#_8","text":"[1] https://en.wikipedia.org/wiki/Least_squares [2] http://www.gatsby.ucl.ac.uk/teaching/courses/sntn/sntn-2017/resources/Matrix_derivatives_cribsheet.pdf [3] https://atmos.washington.edu/~dennis/MatrixCalculus.pdf [4] https://www.math.uwaterloo.ca/~hwolkowi/matrixcookbook.pdf [5] https://en.wikipedia.org/wiki/Levenberg-Marquardt_algorithm","title":"\u53c2\u8003\uff1a"},{"location":"outlier_processes/","text":"Outlier Processes Line Processes Line processes\u4e00\u822c\u7528\u4e8e\u5904\u7406\u56fe\u50cf\u6062\u590d\u65f6\u7684\u975e\u8fde\u7eed\u6027\u68c0\u6d4b\u95ee\u9898\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u56fe\u50cf\u6062\u590d\u4e0a\u7684\u4f8b\u5b50\uff1a \u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\uff0c\u5927\u90e8\u5206\u91cd\u5efa\u95ee\u9898\u90fd\u88ab\u89c6\u4f5c\u6700\u5c0f\u4e8c\u4e58\u4f30\u8ba1\u95ee\u9898\u3002\u6bd4\u5982\u8f93\u5165\u4e00\u4e2a\u5e26\u566a\u97f3\u7684\u6570\u636ed\uff0c\u9700\u8981\u91cd\u5efa\u51fa\u5e73\u6ed1\u7684\u8868\u9762u\uff0c\u5219\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8fd9\u4e2a\u80fd\u91cf\u9879\uff1a \\[ E(u,d) = E_D(u,d) + E_s(u) = \\sum_{s\\in S}[(u_s-d_s)^2+\\lambda\\sum_{t\\in\\mathcal{G}_s}(u_s-u_t)^2] \\] \u8fd9\u91cc\uff0c\u524d\u4e00\u9879\u7ea6\u675f\u6062\u590d\u56fe\u50cfu\u548c\u8f93\u5165\u56fe\u50cfd\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u540e\u4e00\u9879\u662f\u7ea6\u675f\u6211\u4eec\u8981\u91cd\u5efa\u7684\u8fd9\u4e2a\u5149\u6ed1\u5e73\u9762\u7684\u5148\u9a8c\u4fe1\u606f\u3002\u4f46\u662f\uff0c\u81ea\u7136\u60c5\u51b5\u4e0b\uff0c\u56fe\u50cf\u4e2d\u5f80\u5f80\u5305\u542b\u8bb8\u591a\u4e0d\u8fde\u7eed\u6027\uff0c\u6bd4\u5982\u8fb9\u7f18\u533a\u57df\u7b49\u7b49\u3002 \u4e3a\u6b64\uff0c\u4e3a\u80fd\u91cf\u9879\u4e2d\u6dfb\u52a0spatial line process\uff0c\u5373\uff0c\u5728\u7a7a\u95f4\u57df\u4e0a\u7684\u975e\u8fde\u7eed\u6027\u68c0\u6d4b\u3002\u5f97\u5230\u5206\u6bb5\u7684\u91cd\u5efa\u5e73\u9762\uff1a \\[ E(u,d,l) = \\sum_{s\\in S}((u_s-d_s)^2 \\lambda\\sum_{t\\in \\mathcal{G}_s}[(u_s-u_t)^2l_{s,t}+\\Psi(l_{s,t})]) \\] \u8fd9\u91cc\uff0c \\(0\\leq l_{s,t} \\leq C\\) \uff0c\u4e00\u822cC\u53d6\u503c\u4e3a1\uff0c\u800c \\(\\Psi(z)\\) \u662f\u4e00\u4e2a\u60e9\u7f5a\u9879\u51fd\u6570\uff0c\u5f53z\u53d6\u503c\u4e3a0\u65f6\uff0c\u8be5\u51fd\u6570\u503c\u4e3a1\uff0cz\u53d6\u503c\u4e3a1\u65f6\uff0c\u8be5\u51fd\u6570\u503c\u4e3a0\uff0c\u4f8b\u5982 \\(\\Psi(z) = (\\sqrt{z} - 1)^2\\) \u3002 Robust Optimization of Pose Graph \u5728Choi\u7684 Robust Reconstruction of Indoor Scenes \u8fd9\u7bc7paper\u4e2d\uff0c\u5c31\u4f7f\u7528\u4e86line processes\u5728\u5ba4\u5185\u573a\u666f\u91cd\u5efa\u4efb\u52a1\u4e2d\u5bf9Pose Graph\u8fdb\u884c\u4f18\u5316\u3002\u4e00\u4e2aPose Graph\u7531\u9876\u70b9 \\(\\{P_i\\}\\) \uff08\u8fd9\u91ccP\u662f\u4e09\u7ef4\u7247\u6bb5\uff0c\u6bd4\u5982RGBD\u6570\u636e\u6216\u8005\u70b9\u4e91\u6570\u636e\uff09 \u548c\u8fb9\uff08edge\uff09 ${R_i}\\cup {T_{ij}} $\uff08Ri\u662f\u5c06Ti\u5411Ti+1\u5bf9\u9f50\u7684\u4e00\u4e2a\u521a\u6027\u53d8\u6362\uff0c\u800cT\u5219\u662f\u4e24\u4e24\u9876\u70b9\u4e4b\u95f4\u7684associate trasform\uff09\u7ec4\u6210\uff0c\u4f18\u5316\u76ee\u6807\u662f\u5f97\u5230\u4e00\u7cfb\u5217Poses \\(\\mathbb{T} = \\{T_i\\}\\) \u5728\u4e16\u754c\u5750\u6807\u4e2d\u5b9a\u4f4d\u4e09\u7ef4\u91cd\u5efa\u4e2d\u83b7\u5f97\u7684\u7247\u6bb5\uff08fragments\uff09\u3002 \u5176\u57fa\u672c\u65b9\u6cd5\u662f\u901a\u8fc7\u4f18\u5316\u4e0b\u9762\u8fd9\u4e2a\u80fd\u91cf\u9879\uff1a \\[ E(\\mathbb{T})=\\sum_i{f(T_i.T_{i+1},R_i) + \\sum_{i,j}{f(T_i,T_j,T_{ij})}} \\] \u5176\u4e2d\uff0cf\u51fd\u6570\u4e3a\uff1a \\[ f(T_i,T_j,X) = \\sum_{(p,q)\\in\\mathcal{K}_{i,j}}||T_ip-T_jq||^2 \\\\ \\approx \\sum_{(p,q)\\in\\mathcal{K}_{i,j}}||T_ip-T_jXp||^2 \\\\ = \\sum_{(p,q)\\in\\mathcal{K}_{i,j}}||X^{-1}T_j^{-1}T_ip-p||^2 \\] \u4e0a\u5f0f\u4e2d\uff0c \\(\\mathcal{K}_{ij}\\) \u662f\u7247\u6bb5i\u548cj\u4e2d\u7684\u5339\u914d\u70b9\u5bf9\u3002 \u8fd9\u91cc\u7684\u4e3b\u8981\u95ee\u9898\u662f\uff0c\u5728\u6ce8\u518c\u7247\u6bb5\uff08fragment registration\uff09\u4ee5\u53ca\u76f8\u673a\u8f68\u8ff9\uff08trajectory\uff09\u4f30\u8ba1\u7684\u65f6\u5019\uff0c\u5927\u90e8\u5206\u7684 \\(T_{ij}\\) \u5176\u5b9e\u662f\u4e0d\u51c6\u786e\u7684\uff0c\u6700\u7ec8\u4f1a\u4e25\u91cd\u5f71\u54cd\u4f18\u5316\u7ed3\u679c\u3002 \u56e0\u6b64\uff0cpaper\u4e2d\u4f7f\u7528\u4e86line processes\uff0c\u5373\u5f15\u5165\u4e00\u4e2a\u53c2\u6570 \\(l_{ij}\\) \u548c\u5bf9\u5e94\u7684\u60e9\u7f5a\u51fd\u6570 \\(\\Psi(l_{ij})\\) \uff0c\u8fd9\u91cc\u4f5c\u4e3apose graph\u4e2dedge\u7684validity\u3002\u4e5f\u5c31\u662f\u5728\u56fe\u4e2d\u68c0\u6d4b\u4e09\u7ef4\u7247\u6bb5\u4e4b\u95f4\u7684\u975e\u8fde\u7eed\u6027\uff0c\u4fee\u6539\u540e\u7684\u80fd\u91cf\u9879\u5982\u4e0b\uff1a \\[ E(\\mathbb{T},\\mathbb{L}) = \\sum_i f(T_i,T_{i+1},R_i) + \\sum_{i,j}l_{ij}f(T_i,T_j,T_{ij}) + \\mu\\sum_{i,j}\\Psi(l_{ij}) \\] \u5176\u4e2d\uff0c \\(f(T_i,T_j,X)\\) \u662falignment\u9879\uff0c\u8861\u91cf\u4e24\u4e2aPose\u548crelative Pose\u4e4b\u95f4\u7684\u975e\u8fde\u7eed\u6027\uff1b \\(\\Psi(l_{ij})\\) \u662f\u5148\u9a8c\u9879\uff0c\u8868\u793apose graph\u4e2d\u67d0\u6761\u8fb9\u7684\u53ef\u4fe1\u5ea6\u3002 \\(l_{ij}\\) \u7684\u503c\u4f1a\u968f\u7740\u8fed\u4ee3\u7684\u8fc7\u7a0b\u4e0d\u65ad\u8c03\u6574\uff0c\u4f5c\u4e3a\u521d\u59cb\u503c\uff0c\u4e00\u822c\u4f1a\u53d6\u503c\u4e3a1\uff0c\u610f\u5473\u7740\u6700\u5927\u5316pose graph\u4e2d\u53ef\u4fe1\u7684\u8fb9\u6570\u3002\u4f46\u662f\u5f53\u67d0\u9879\u7684\u7ea6\u675f\u5bfc\u81f4\u4e09\u7ef4\u91cd\u5efa\u4e2d\u51fa\u73b0\u8bef\u5dee\uff0c\u5e76\u5bfc\u81f4alignment\u9879\u589e\u52a0\uff0c \\(l_{ij}\\) \u4f1a\u9010\u6e10\uff08\u5e73\u6ed1\u5730\uff09\u51cf\u5c11\uff0c\u5e76\u4e14\u5f53\u503c\u5c0f\u4e8e\u4e00\u5b9a\u7684\u9608\u503c\u65f6\uff0c\u5c06\u4f1a\u5bf9\u5bf9\u5e94\u7684\u8fb9\u8fdb\u884c\u526a\u679d\u3002 Robust Statistics Robust Statistics\u7684\u76ee\u7684\u662f1\uff09\u63cf\u8ff0\u4e00\u4e2a\u6700\u80fd\u7b26\u5408\u4e00\u7ec4\u6570\u636e\u7684\u7ed3\u6784\uff1b2\uff09\u80fd\u5224\u522b\u51fa\u79bb\u7fa4\u503c\uff08outlier\uff09\u6216\u8005\u79bb\u7fa4\u7684\u5b50\u7ed3\u6784\uff08substructures\uff09\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5c31\u662f\u5bfb\u627e\u4e00\u7ec4\u53c2\u6570 \\(a = [a_0,...,a_n]\\) \u4f7f\u5f97\u4e00\u4e2a\u6a21\u578b \\(u(s; a)\\) \u6700\u80fd\u7b26\u5408\u4e00\u7ec4\u6570\u636e\u7684\u89c2\u6d4b\u503c \\(d = \\{d_0, ..., d_S\\}\\) \uff0c\u4e5f\u5c31\u662f\u6700\u5c0f\u5316\u5176\u6b8b\u5dee\u548c\uff1a \\[ \\min_{a}\\sum_{s\\in S}\\rho(d_s - u(s;a),\\sigma_s) \\] \u8fd9\u91cc\uff0c \\(\\sigma_s\\) \u662f\u4e00\u4e2a\u5f52\u4e00\u5316\u53c2\u6570\uff08scaler parameter\uff09\uff0c \\(\\rho\\) \u662f\u8bef\u5dee\u8303\u5f0f\uff08error norm\uff09\uff0c\u8be5\u51fd\u6570\u8981\u4f7f\u5f97\u8bef\u5dee\u5728\u6570\u636e\u5ea6\u91cf\u5185\u5747\u5300\u5206\u5e03\u3002\u6700\u4f18\u7684 \\(\\rho\\) \u51fd\u6570\u662f\u5e73\u65b9\u51fd\u6570\uff0c\u5373\uff1a \\[ \\rho(d_s-u(s;a),\\sigma_s)=\\frac{(d_s-u(s,a))^2}{2\\sigma_s^2} \\] \u800c\u8fd9\u5c31\u662f\u6807\u51c6\u7684\u6700\u5c0f\u4e8c\u4e58\u4f30\u8ba1\u95ee\u9898\uff0c\u5176\u5f62\u5f0f\u4e0a\u4e0e\u6700\u5927\u4f3c\u7136\uff08maximum-likelihood\uff09\u4f30\u8ba1\u76f8\u540c\u3002\u4e0d\u540c\u7684 \\(\\rho\\) \u51fd\u6570\u5bf9\u5e94\u4e0d\u540c\u7684robust estimator\u4ee5\u53ca\u5176\u5bf9\u79bb\u7fa4\u503c\u7684\u654f\u6377\u6027\u5bf9\u5e94\u5176robustness\u3002\u4f17\u6240\u5468\u77e5\uff0c\u5e73\u65b9\u8bef\u5dee\u51fd\u6570\u5bf9\u79bb\u7fa4\u503c\u53ca\u5176\u654f\u611f\uff0c\u5176 \\(\\Psi\\) \u51fd\u6570\uff08\u7528\u4e8e\u8861\u91cf\u67d0\u4e2a\u7279\u5b9a\u7684\u89c2\u6d4b\u503c\u5bf9\u5176\u7ed3\u679c\u7684\u5f71\u54cd\uff0c\u6b63\u6bd4\u4e8e\u5176\u5bfc\u6570\uff09\u7ebf\u6027\u589e\u957f\u5e76\u4e14\u65e0\u754c\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u63d0\u5347\u9c81\u68d2\u6027\uff0c\u4e5f\u5c31\u662f\u964d\u4f4e\u5176\u5bf9\u79bb\u7fa4\u503c\u7684\u654f\u611f\u5ea6\uff08\u63d0\u5347\u5176\u5bf9\u79bb\u7fa4\u503c\u7684\u5305\u5bb9\u5ea6\uff09\u3002\u56e0\u6b64\uff0c\u884d\u751f\u51fa\u8bb8\u591a\u4e3a\u6b64\u76ee\u7684\u800c\u8bbe\u8ba1\u7684estimator\uff0c\u6bd4\u5982minimax estimator\uff1a \\[ \\rho_{\\epsilon}(x)=\\begin{cases} \\frac{x^2}{2\\epsilon}+\\frac{\\epsilon}{2}&|x|\\leq\\epsilon,\\\\ |x|&|x|>\\epsilon, \\end{cases} \\\\ \\Psi_{\\epsilon}(x)=\\begin{cases} \\frac{x}{\\epsilon}&|x|\\leq\\epsilon,\\\\ sign(x)&|x|>\\epsilon, \\end{cases} \\\\ \\] \u6b64\u5916\uff0c\u8fd8\u6709Lorentzian\u548cSkipped mean estimator\u7b49\uff0c\u90fd\u662f\u4e3a\u89e3\u51b3\u9c81\u68d2\u6027\u800c\u8bbe\u8ba1\u7684\u8bef\u5dee\u89e3\u7b97\u5b50\u3002 Robust Regularization \u5bf9\u4e8e\u56fe\u50cfsurface recovery\u4efb\u52a1\uff0c\u6211\u4eec\u6709\uff1a \\[ E(u,d) = \\sum_{s\\in S}[(u_s-d_s)^2 + \\lambda\\sum_{t\\in\\mathcal{G}_s}(u_s-t_s)^2] \\] \u5176\u4e2d\uff0c\u7b2c\u4e00\u9879\u6211\u4eec\u79f0\u4e3a\u6570\u636e\u9879\uff08data term\uff09\u800c\u7b2c\u4e8c\u9879\u5219\u662f\u7a7a\u95f4\u9879\uff08spatial term\uff09\uff0c\u800c\u5c06\u6211\u4eec\u4e4b\u524d\u7684 \\(\\rho\\) \u51fd\u6570\u5e94\u7528\u5728\u4e0a\u5f0f\uff0c\u6211\u4eec\u6709\uff1a \\[ E(u,d) = \\sum_{s\\in S}[\\rho_D(u_s-d_s, \\sigma_D) + \\lambda\\sum_{t\\in\\mathcal{G}_s}\\rho_S(u_s-t_s, \\sigma_S)] \\] \u8be5\u65b9\u6cd5\u4e5f\u88ab\u5e94\u7528\u4e8eoptical flow estimation\u4e0a\u3002 \u76f8\u5173\u8bba\u6587\uff1a [1] Michael J. Black, Anand Rangarajan. On the unification of line processes, outlier rejection, and robust statistics with applications in early vision. Int. J. Comput. Vis. 19(1): 57-91 (1996) [2] Sungjoon Choi, Qian-Yi Zhou, Vladlen Koltun. Robust reconstruction of indoor scenes. CVPR 2015: 5556-5565 [3] Donald Geman, George Reynolds. Constrained Restoration and the Recovery of Discontinuities. IEEE Trans. Pattern Anal. Mach. Intell. 14(3): 367-383 (1992)","title":"Outlier Processes"},{"location":"outlier_processes/#outlier-processes","text":"","title":"Outlier Processes"},{"location":"outlier_processes/#line-processes","text":"Line processes\u4e00\u822c\u7528\u4e8e\u5904\u7406\u56fe\u50cf\u6062\u590d\u65f6\u7684\u975e\u8fde\u7eed\u6027\u68c0\u6d4b\u95ee\u9898\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u56fe\u50cf\u6062\u590d\u4e0a\u7684\u4f8b\u5b50\uff1a \u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\uff0c\u5927\u90e8\u5206\u91cd\u5efa\u95ee\u9898\u90fd\u88ab\u89c6\u4f5c\u6700\u5c0f\u4e8c\u4e58\u4f30\u8ba1\u95ee\u9898\u3002\u6bd4\u5982\u8f93\u5165\u4e00\u4e2a\u5e26\u566a\u97f3\u7684\u6570\u636ed\uff0c\u9700\u8981\u91cd\u5efa\u51fa\u5e73\u6ed1\u7684\u8868\u9762u\uff0c\u5219\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8fd9\u4e2a\u80fd\u91cf\u9879\uff1a \\[ E(u,d) = E_D(u,d) + E_s(u) = \\sum_{s\\in S}[(u_s-d_s)^2+\\lambda\\sum_{t\\in\\mathcal{G}_s}(u_s-u_t)^2] \\] \u8fd9\u91cc\uff0c\u524d\u4e00\u9879\u7ea6\u675f\u6062\u590d\u56fe\u50cfu\u548c\u8f93\u5165\u56fe\u50cfd\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u540e\u4e00\u9879\u662f\u7ea6\u675f\u6211\u4eec\u8981\u91cd\u5efa\u7684\u8fd9\u4e2a\u5149\u6ed1\u5e73\u9762\u7684\u5148\u9a8c\u4fe1\u606f\u3002\u4f46\u662f\uff0c\u81ea\u7136\u60c5\u51b5\u4e0b\uff0c\u56fe\u50cf\u4e2d\u5f80\u5f80\u5305\u542b\u8bb8\u591a\u4e0d\u8fde\u7eed\u6027\uff0c\u6bd4\u5982\u8fb9\u7f18\u533a\u57df\u7b49\u7b49\u3002 \u4e3a\u6b64\uff0c\u4e3a\u80fd\u91cf\u9879\u4e2d\u6dfb\u52a0spatial line process\uff0c\u5373\uff0c\u5728\u7a7a\u95f4\u57df\u4e0a\u7684\u975e\u8fde\u7eed\u6027\u68c0\u6d4b\u3002\u5f97\u5230\u5206\u6bb5\u7684\u91cd\u5efa\u5e73\u9762\uff1a \\[ E(u,d,l) = \\sum_{s\\in S}((u_s-d_s)^2 \\lambda\\sum_{t\\in \\mathcal{G}_s}[(u_s-u_t)^2l_{s,t}+\\Psi(l_{s,t})]) \\] \u8fd9\u91cc\uff0c \\(0\\leq l_{s,t} \\leq C\\) \uff0c\u4e00\u822cC\u53d6\u503c\u4e3a1\uff0c\u800c \\(\\Psi(z)\\) \u662f\u4e00\u4e2a\u60e9\u7f5a\u9879\u51fd\u6570\uff0c\u5f53z\u53d6\u503c\u4e3a0\u65f6\uff0c\u8be5\u51fd\u6570\u503c\u4e3a1\uff0cz\u53d6\u503c\u4e3a1\u65f6\uff0c\u8be5\u51fd\u6570\u503c\u4e3a0\uff0c\u4f8b\u5982 \\(\\Psi(z) = (\\sqrt{z} - 1)^2\\) \u3002","title":"Line Processes"},{"location":"outlier_processes/#robust-optimization-of-pose-graph","text":"\u5728Choi\u7684 Robust Reconstruction of Indoor Scenes \u8fd9\u7bc7paper\u4e2d\uff0c\u5c31\u4f7f\u7528\u4e86line processes\u5728\u5ba4\u5185\u573a\u666f\u91cd\u5efa\u4efb\u52a1\u4e2d\u5bf9Pose Graph\u8fdb\u884c\u4f18\u5316\u3002\u4e00\u4e2aPose Graph\u7531\u9876\u70b9 \\(\\{P_i\\}\\) \uff08\u8fd9\u91ccP\u662f\u4e09\u7ef4\u7247\u6bb5\uff0c\u6bd4\u5982RGBD\u6570\u636e\u6216\u8005\u70b9\u4e91\u6570\u636e\uff09 \u548c\u8fb9\uff08edge\uff09 ${R_i}\\cup {T_{ij}} $\uff08Ri\u662f\u5c06Ti\u5411Ti+1\u5bf9\u9f50\u7684\u4e00\u4e2a\u521a\u6027\u53d8\u6362\uff0c\u800cT\u5219\u662f\u4e24\u4e24\u9876\u70b9\u4e4b\u95f4\u7684associate trasform\uff09\u7ec4\u6210\uff0c\u4f18\u5316\u76ee\u6807\u662f\u5f97\u5230\u4e00\u7cfb\u5217Poses \\(\\mathbb{T} = \\{T_i\\}\\) \u5728\u4e16\u754c\u5750\u6807\u4e2d\u5b9a\u4f4d\u4e09\u7ef4\u91cd\u5efa\u4e2d\u83b7\u5f97\u7684\u7247\u6bb5\uff08fragments\uff09\u3002 \u5176\u57fa\u672c\u65b9\u6cd5\u662f\u901a\u8fc7\u4f18\u5316\u4e0b\u9762\u8fd9\u4e2a\u80fd\u91cf\u9879\uff1a \\[ E(\\mathbb{T})=\\sum_i{f(T_i.T_{i+1},R_i) + \\sum_{i,j}{f(T_i,T_j,T_{ij})}} \\] \u5176\u4e2d\uff0cf\u51fd\u6570\u4e3a\uff1a \\[ f(T_i,T_j,X) = \\sum_{(p,q)\\in\\mathcal{K}_{i,j}}||T_ip-T_jq||^2 \\\\ \\approx \\sum_{(p,q)\\in\\mathcal{K}_{i,j}}||T_ip-T_jXp||^2 \\\\ = \\sum_{(p,q)\\in\\mathcal{K}_{i,j}}||X^{-1}T_j^{-1}T_ip-p||^2 \\] \u4e0a\u5f0f\u4e2d\uff0c \\(\\mathcal{K}_{ij}\\) \u662f\u7247\u6bb5i\u548cj\u4e2d\u7684\u5339\u914d\u70b9\u5bf9\u3002 \u8fd9\u91cc\u7684\u4e3b\u8981\u95ee\u9898\u662f\uff0c\u5728\u6ce8\u518c\u7247\u6bb5\uff08fragment registration\uff09\u4ee5\u53ca\u76f8\u673a\u8f68\u8ff9\uff08trajectory\uff09\u4f30\u8ba1\u7684\u65f6\u5019\uff0c\u5927\u90e8\u5206\u7684 \\(T_{ij}\\) \u5176\u5b9e\u662f\u4e0d\u51c6\u786e\u7684\uff0c\u6700\u7ec8\u4f1a\u4e25\u91cd\u5f71\u54cd\u4f18\u5316\u7ed3\u679c\u3002 \u56e0\u6b64\uff0cpaper\u4e2d\u4f7f\u7528\u4e86line processes\uff0c\u5373\u5f15\u5165\u4e00\u4e2a\u53c2\u6570 \\(l_{ij}\\) \u548c\u5bf9\u5e94\u7684\u60e9\u7f5a\u51fd\u6570 \\(\\Psi(l_{ij})\\) \uff0c\u8fd9\u91cc\u4f5c\u4e3apose graph\u4e2dedge\u7684validity\u3002\u4e5f\u5c31\u662f\u5728\u56fe\u4e2d\u68c0\u6d4b\u4e09\u7ef4\u7247\u6bb5\u4e4b\u95f4\u7684\u975e\u8fde\u7eed\u6027\uff0c\u4fee\u6539\u540e\u7684\u80fd\u91cf\u9879\u5982\u4e0b\uff1a \\[ E(\\mathbb{T},\\mathbb{L}) = \\sum_i f(T_i,T_{i+1},R_i) + \\sum_{i,j}l_{ij}f(T_i,T_j,T_{ij}) + \\mu\\sum_{i,j}\\Psi(l_{ij}) \\] \u5176\u4e2d\uff0c \\(f(T_i,T_j,X)\\) \u662falignment\u9879\uff0c\u8861\u91cf\u4e24\u4e2aPose\u548crelative Pose\u4e4b\u95f4\u7684\u975e\u8fde\u7eed\u6027\uff1b \\(\\Psi(l_{ij})\\) \u662f\u5148\u9a8c\u9879\uff0c\u8868\u793apose graph\u4e2d\u67d0\u6761\u8fb9\u7684\u53ef\u4fe1\u5ea6\u3002 \\(l_{ij}\\) \u7684\u503c\u4f1a\u968f\u7740\u8fed\u4ee3\u7684\u8fc7\u7a0b\u4e0d\u65ad\u8c03\u6574\uff0c\u4f5c\u4e3a\u521d\u59cb\u503c\uff0c\u4e00\u822c\u4f1a\u53d6\u503c\u4e3a1\uff0c\u610f\u5473\u7740\u6700\u5927\u5316pose graph\u4e2d\u53ef\u4fe1\u7684\u8fb9\u6570\u3002\u4f46\u662f\u5f53\u67d0\u9879\u7684\u7ea6\u675f\u5bfc\u81f4\u4e09\u7ef4\u91cd\u5efa\u4e2d\u51fa\u73b0\u8bef\u5dee\uff0c\u5e76\u5bfc\u81f4alignment\u9879\u589e\u52a0\uff0c \\(l_{ij}\\) \u4f1a\u9010\u6e10\uff08\u5e73\u6ed1\u5730\uff09\u51cf\u5c11\uff0c\u5e76\u4e14\u5f53\u503c\u5c0f\u4e8e\u4e00\u5b9a\u7684\u9608\u503c\u65f6\uff0c\u5c06\u4f1a\u5bf9\u5bf9\u5e94\u7684\u8fb9\u8fdb\u884c\u526a\u679d\u3002","title":"Robust Optimization of Pose Graph"},{"location":"outlier_processes/#robust-statistics","text":"Robust Statistics\u7684\u76ee\u7684\u662f1\uff09\u63cf\u8ff0\u4e00\u4e2a\u6700\u80fd\u7b26\u5408\u4e00\u7ec4\u6570\u636e\u7684\u7ed3\u6784\uff1b2\uff09\u80fd\u5224\u522b\u51fa\u79bb\u7fa4\u503c\uff08outlier\uff09\u6216\u8005\u79bb\u7fa4\u7684\u5b50\u7ed3\u6784\uff08substructures\uff09\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5c31\u662f\u5bfb\u627e\u4e00\u7ec4\u53c2\u6570 \\(a = [a_0,...,a_n]\\) \u4f7f\u5f97\u4e00\u4e2a\u6a21\u578b \\(u(s; a)\\) \u6700\u80fd\u7b26\u5408\u4e00\u7ec4\u6570\u636e\u7684\u89c2\u6d4b\u503c \\(d = \\{d_0, ..., d_S\\}\\) \uff0c\u4e5f\u5c31\u662f\u6700\u5c0f\u5316\u5176\u6b8b\u5dee\u548c\uff1a \\[ \\min_{a}\\sum_{s\\in S}\\rho(d_s - u(s;a),\\sigma_s) \\] \u8fd9\u91cc\uff0c \\(\\sigma_s\\) \u662f\u4e00\u4e2a\u5f52\u4e00\u5316\u53c2\u6570\uff08scaler parameter\uff09\uff0c \\(\\rho\\) \u662f\u8bef\u5dee\u8303\u5f0f\uff08error norm\uff09\uff0c\u8be5\u51fd\u6570\u8981\u4f7f\u5f97\u8bef\u5dee\u5728\u6570\u636e\u5ea6\u91cf\u5185\u5747\u5300\u5206\u5e03\u3002\u6700\u4f18\u7684 \\(\\rho\\) \u51fd\u6570\u662f\u5e73\u65b9\u51fd\u6570\uff0c\u5373\uff1a \\[ \\rho(d_s-u(s;a),\\sigma_s)=\\frac{(d_s-u(s,a))^2}{2\\sigma_s^2} \\] \u800c\u8fd9\u5c31\u662f\u6807\u51c6\u7684\u6700\u5c0f\u4e8c\u4e58\u4f30\u8ba1\u95ee\u9898\uff0c\u5176\u5f62\u5f0f\u4e0a\u4e0e\u6700\u5927\u4f3c\u7136\uff08maximum-likelihood\uff09\u4f30\u8ba1\u76f8\u540c\u3002\u4e0d\u540c\u7684 \\(\\rho\\) \u51fd\u6570\u5bf9\u5e94\u4e0d\u540c\u7684robust estimator\u4ee5\u53ca\u5176\u5bf9\u79bb\u7fa4\u503c\u7684\u654f\u6377\u6027\u5bf9\u5e94\u5176robustness\u3002\u4f17\u6240\u5468\u77e5\uff0c\u5e73\u65b9\u8bef\u5dee\u51fd\u6570\u5bf9\u79bb\u7fa4\u503c\u53ca\u5176\u654f\u611f\uff0c\u5176 \\(\\Psi\\) \u51fd\u6570\uff08\u7528\u4e8e\u8861\u91cf\u67d0\u4e2a\u7279\u5b9a\u7684\u89c2\u6d4b\u503c\u5bf9\u5176\u7ed3\u679c\u7684\u5f71\u54cd\uff0c\u6b63\u6bd4\u4e8e\u5176\u5bfc\u6570\uff09\u7ebf\u6027\u589e\u957f\u5e76\u4e14\u65e0\u754c\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u63d0\u5347\u9c81\u68d2\u6027\uff0c\u4e5f\u5c31\u662f\u964d\u4f4e\u5176\u5bf9\u79bb\u7fa4\u503c\u7684\u654f\u611f\u5ea6\uff08\u63d0\u5347\u5176\u5bf9\u79bb\u7fa4\u503c\u7684\u5305\u5bb9\u5ea6\uff09\u3002\u56e0\u6b64\uff0c\u884d\u751f\u51fa\u8bb8\u591a\u4e3a\u6b64\u76ee\u7684\u800c\u8bbe\u8ba1\u7684estimator\uff0c\u6bd4\u5982minimax estimator\uff1a \\[ \\rho_{\\epsilon}(x)=\\begin{cases} \\frac{x^2}{2\\epsilon}+\\frac{\\epsilon}{2}&|x|\\leq\\epsilon,\\\\ |x|&|x|>\\epsilon, \\end{cases} \\\\ \\Psi_{\\epsilon}(x)=\\begin{cases} \\frac{x}{\\epsilon}&|x|\\leq\\epsilon,\\\\ sign(x)&|x|>\\epsilon, \\end{cases} \\\\ \\] \u6b64\u5916\uff0c\u8fd8\u6709Lorentzian\u548cSkipped mean estimator\u7b49\uff0c\u90fd\u662f\u4e3a\u89e3\u51b3\u9c81\u68d2\u6027\u800c\u8bbe\u8ba1\u7684\u8bef\u5dee\u89e3\u7b97\u5b50\u3002","title":"Robust Statistics"},{"location":"outlier_processes/#robust-regularization","text":"\u5bf9\u4e8e\u56fe\u50cfsurface recovery\u4efb\u52a1\uff0c\u6211\u4eec\u6709\uff1a \\[ E(u,d) = \\sum_{s\\in S}[(u_s-d_s)^2 + \\lambda\\sum_{t\\in\\mathcal{G}_s}(u_s-t_s)^2] \\] \u5176\u4e2d\uff0c\u7b2c\u4e00\u9879\u6211\u4eec\u79f0\u4e3a\u6570\u636e\u9879\uff08data term\uff09\u800c\u7b2c\u4e8c\u9879\u5219\u662f\u7a7a\u95f4\u9879\uff08spatial term\uff09\uff0c\u800c\u5c06\u6211\u4eec\u4e4b\u524d\u7684 \\(\\rho\\) \u51fd\u6570\u5e94\u7528\u5728\u4e0a\u5f0f\uff0c\u6211\u4eec\u6709\uff1a \\[ E(u,d) = \\sum_{s\\in S}[\\rho_D(u_s-d_s, \\sigma_D) + \\lambda\\sum_{t\\in\\mathcal{G}_s}\\rho_S(u_s-t_s, \\sigma_S)] \\] \u8be5\u65b9\u6cd5\u4e5f\u88ab\u5e94\u7528\u4e8eoptical flow estimation\u4e0a\u3002","title":"Robust Regularization"},{"location":"outlier_processes/#_1","text":"[1] Michael J. Black, Anand Rangarajan. On the unification of line processes, outlier rejection, and robust statistics with applications in early vision. Int. J. Comput. Vis. 19(1): 57-91 (1996) [2] Sungjoon Choi, Qian-Yi Zhou, Vladlen Koltun. Robust reconstruction of indoor scenes. CVPR 2015: 5556-5565 [3] Donald Geman, George Reynolds. Constrained Restoration and the Recovery of Discontinuities. IEEE Trans. Pattern Anal. Mach. Intell. 14(3): 367-383 (1992)","title":"\u76f8\u5173\u8bba\u6587\uff1a"},{"location":"quaternion_rotation/","text":"Rotation with Vectors and Quaternions Basic Rules First, we have to go through some of the basic setup here. Quaternions are defined as the following format (similar to imaginary numbers): $$ x\\mathbf{i}+y\\mathbf{j}+z\\mathbf{k}+w $$ or written in axis angle format: \\[ sin(\\frac{\\alpha}{2})u_x\\mathbf{i}+sin(\\frac{\\alpha}{2})u_y\\mathbf{j}+sin(\\frac{\\alpha}{2})u_z\\mathbf{k}+cos(\\frac{\\alpha}{2}) \\] where \\(\\alpha\\) is the rotation angle around a certain axis (right hand rule, that is, pointing your thumb to the axis's direction, so the rest of your fingers pointing to the rotation direction), and \\(u_x\\) , \\(u_y\\) and \\(u_z\\) are the normalized coordinates of the axis. To discuss the rotation by quaternion, we don't have to go through all the mathematical attributes of quaternion, nor the complex regulations in calculation. But I still have to list the following attributes for the convenience of our later discussion: For a normalized quaternion, which is given by \\(x^2 + y^2 + z^2 + w^2 = 1\\) we have: \\[ sin(\\frac{\\alpha}{2})^2u_x^2+sin(\\frac{\\alpha}{2})^2u_y^2+sin(\\frac{\\alpha}{2})^2u_z^2+cos(\\frac{\\alpha}{2})^2 = 1 \\] \\[ \\Rightarrow sin(\\frac{\\alpha}{2})^2(u_x^2+u_y^2+u_z^2)+cos(\\frac{\\alpha}{2})^2=1 \\] \\[ \\Rightarrow sin(\\frac{\\alpha}{2})^2(u_x^2+u_y^2+u_z^2)=1-cos(\\frac{\\alpha}{2})^2 \\] \\[ \\Rightarrow sin(\\frac{\\alpha}{2})^2(u_x^2+u_y^2+u_z^2)=sin(\\frac{\\alpha}{2})^2 \\] Therefore, if a quaternion is normalized, we can get either an identity quaternion ( \\(0\\mathbf{i}+0\\mathbf{j}+0\\mathbf{k}+1\\) ), or its rotation axis is also normalized ( \\(u_x^2+u_y^2+u_z^2 = 1\\) ). Axis Rotation for Vector Let's consider a general case for a vector \\(\\overrightarrow{OA}\\) rotate around an axis \\(\\overrightarrow{OB}\\) , here, for convenience the origin of the vector and axis are aligned together. First, we want to get the projection of \\(\\overrightarrow{OA}\\) to the plane \\(P\\) defined by \\(\\overrightarrow{OB}\\) , that is, \\(\\overrightarrow{OB}\\) being a normal vector of \\(P\\) . Suppose \\(A'\\) is the projection of \\(A\\) to \\(P\\) , and \\(B'\\) is the projection of \\(A\\) to \\(\\overrightarrow{OB}\\) , \\(\\alpha\\) being the angle between \\(\\overrightarrow{OA}\\) and \\(\\overrightarrow{OB}\\) . We have: \\[ \\overrightarrow{OB'} = \\overrightarrow{OB}\\cdot||\\overrightarrow{OA}||\\cdot cos(\\alpha) \\\\ \\Rightarrow \\overrightarrow{OB'} = \\overrightarrow{OB}\\cdot||\\overrightarrow{OA}|| \\frac{\\overrightarrow{OA} \\cdot \\overrightarrow{OB}}{||\\overrightarrow{OA}|| ||\\overrightarrow{OB}||} \\\\ \\Rightarrow \\overrightarrow{OB'} = \\overrightarrow{OB}\\frac{\\overrightarrow{OA} \\cdot \\overrightarrow{OB}}{||\\overrightarrow{OB}||} \\] To simplify the equation, let's denote the normalized axis \\(\\overrightarrow{OB}\\) by \\(\\vec{n}\\) , we have: \\[ \\overrightarrow{OB'} = (\\overrightarrow{OA}\\cdot\\vec{n})\\cdot\\vec{n} \\] So, we can easily get the projection of \\(\\overrightarrow{OA}\\) to the plane \\(P\\) By: \\[ \\overrightarrow{OA'} = \\overrightarrow{OA}-\\overrightarrow{OB'} = \\overrightarrow{OA}-(\\overrightarrow{OA}\\cdot\\vec{n})\\cdot\\vec{n} \\] Next, we rotate the vector \\(\\overrightarrow{OA'}\\) by \\(\\beta\\) on the plane \\(P\\) To get vector \\(\\overrightarrow{OC'}\\) by adopting the right hand rule: To calculate \\(\\overrightarrow{OC'}\\) , we obtain a orthogonal coordinates system using \\(\\overrightarrow{OA'}\\) , \\(\\vec{n}\\) and \\(\\overrightarrow{OD}\\) which is obtained by cross product of \\(\\vec{n}\\) and \\(\\vec{a}\\) (For convenience, here we denote normalized vector \\(\\overrightarrow{OA'}\\) by \\(\\vec{a}\\) ). Therefore \\(\\vec{n} \\times \\vec{a} = \\vec{d} = \\frac{\\overrightarrow{OD}}{||\\overrightarrow{OD}||}\\) \\[ \\overrightarrow{OC'} = (\\vec{a}\\cdot cos(\\beta)+\\vec{n}\\times\\vec{a}\\cdot sin(\\beta)) \\cdot ||\\overrightarrow{OA'}|| = \\overrightarrow{OA'}\\cdot cos(\\beta) + \\vec{n}\\times\\overrightarrow{OA'}\\cdot sin(\\beta) \\] Finally, to get the rotation result, we have: \\[ \\overrightarrow{OC} = \\overrightarrow{OC'} + \\overrightarrow{A'A} = \\overrightarrow{OC'} + \\overrightarrow{OA} - \\overrightarrow{OA'} \\\\ \\Rightarrow \\overrightarrow{OC} = \\overrightarrow{OA'}\\cdot cos(\\beta) + \\vec{n}\\times\\overrightarrow{OA'}\\cdot sin(\\beta) + \\overrightarrow{OA} - \\overrightarrow{OA'} \\\\ \\Rightarrow \\overrightarrow{OC} = \\overrightarrow{OA} + \\overrightarrow{OA'}\\cdot(cos(\\beta)-1)+\\vec{n}\\times\\overrightarrow{OA'}\\cdot sin(\\beta) \\\\ \\Rightarrow \\overrightarrow{OC} = \\overrightarrow{OA} + (\\overrightarrow{OA}-(\\overrightarrow{OA}\\cdot\\vec{n})\\cdot\\vec{n})\\cdot(cos(\\beta)-1)+\\vec{n}\\times(\\overrightarrow{OA}-(\\overrightarrow{OA}\\cdot\\vec{n})\\cdot\\vec{n})\\cdot sin(\\beta) \\\\ \\Rightarrow \\overrightarrow{OC} = \\overrightarrow{OA}\\cdot cos(\\beta) + (\\overrightarrow{OA} \\cdot \\vec{n})\\cdot \\vec{n} \\cdot (1 - cos(\\beta)) + \\vec{n}\\times \\overrightarrow{OA}\\cdot sin(\\beta) \\] Special Case Here we a special case where the rotation angle \\(\\beta\\) is 180 degree, which indicates a mirror reflection of vector \\(\\vec{a}\\) with reference to a surface normal \\(\\vec{n}\\) \uff1a As the graph above, vector \\(\\vec{a'}\\) can be regarded as vector \\(\\vec{a}\\) rotate 180 degrees around \\(\\vec{n}\\) and inversed. Therefore we have \\(\\vec{a'} = -(\\vec{a}\\cdot cos(\\pi) + (\\vec{a}\\cdot\\vec{n})\\cdot\\vec{n}\\cdot(1-cos(\\pi))+\\vec{n}\\times\\vec{a}\\cdot sin(\\pi)) = \\vec{a}-2(\\vec{a}\\cdot\\vec{n})\\cdot\\vec{n}\\) Describe Axis Rotation by Quaternion From the basic rule part, we have the quaternion described by the form \\(sin(\\frac{\\alpha}{2})u_x\\mathbf{i}+sin(\\frac{\\alpha}{2})u_y\\mathbf{j}+sin(\\frac{\\alpha}{2})u_z\\mathbf{k}+cos(\\frac{\\alpha}{2})\\) , and for convenience, we split the quaternion into one vector \\(\\vec{u}\\) and a number \\(w\\) : \\[ \\vec{u} = \\begin{bmatrix} u_x \\\\ u_y \\\\ u_z \\end{bmatrix} \\cdot sin(\\frac{\\alpha}{2}) = \\vec{n} \\cdot sin(\\frac{\\alpha}{2}) , w = cos(\\frac{\\alpha}{2}) \\] Notice that \\(\\vec{u}\\) can be regard as a scaled version of \\(\\vec{n}\\) from the previous chapter. And suppose the vector to rotate by quaternion is \\(\\vec{a} = \\begin{bmatrix} a_x \\\\ a_y \\\\ a_z \\end{bmatrix}\\) We get the following supposing the quaternion is not an identity quaternion: \\[ w^2 - \\vec{u} \\cdot \\vec{u} = cos^2(\\frac{\\alpha}{2}) - sin^2(\\frac{\\alpha}{2}) (u_x^2 + u_z^2 + u_z^2) = cos^2(\\frac{\\alpha}{2}) - sin^2(\\frac{\\alpha}{2}) = cos(\\alpha) \\] And also: \\[ (\\vec{a} \\cdot \\vec{u})\\cdot \\vec{u} = (a_xu_x + a_yu_y + a_zu_z)sin(\\frac{\\alpha}{2}) \\cdot \\vec{n} \\cdot sin(\\frac{\\alpha}{2}) \\\\ = (a_xu_x + a_yu_y + a_zu_z)\\cdot \\vec{n} \\cdot sin^2(\\frac{\\alpha}{2}) = (\\vec{a} \\cdot \\vec{n})\\cdot\\vec{n}\\cdot \\frac{1 - cos(\\alpha)}{2} \\] And finally: \\[ \\vec{u} \\times \\vec{a} \\cdot w = \\vec{n}\\times \\vec{a} \\cdot sin(\\frac{\\alpha}{2})cos(\\frac{a}{2}) = \\vec{n}\\times \\vec{a} \\cdot \\frac{sin(\\alpha)}{2} \\] Then, as we combine the (10), (11) and (12), we get: \\[ \\vec{a}\\cdot(w^2-\\vec{u}\\cdot\\vec{u})+(\\vec{a}\\cdot\\vec{u})\\cdot\\vec{u}\\cdot2+\\vec{u}\\times\\vec{a}\\cdot{w}\\cdot2 \\\\ = \\vec{a}\\cdot cos(\\alpha) + (\\vec{a} \\cdot \\vec{n})\\cdot \\vec{n} \\cdot (1 - cos(\\alpha)) + \\vec{n}\\times \\vec{a}\\cdot sin(\\alpha) \\] Which is exactly in the same form as (8), so, we have the method to rotate a vector by quaternion. But don't forget that we assume that this quaternion is identity, so we also have to check for an identity quaternion, whether this equation stands. An identity quaternion indicates that \\(sin(\\frac{\\alpha}{2})=0\\) , so this rotation is either degree 0 or 180 (meaning after the rotation, the vector is either parallel or opposite to the origin vector). For degree 0 or 360, we have: \\[ \\vec{a'} = \\vec{a}\\cdot(w^2-\\vec{u}\\cdot\\vec{u})+(\\vec{a}\\cdot\\vec{u})\\cdot\\vec{u}\\cdot2+\\vec{u}\\times\\vec{a}\\cdot{w}\\cdot2 \\\\ = \\vec{a}\\cdot(1^2-\\vec{0}\\cdot\\vec{0})+(\\vec{a}\\cdot\\vec{0})\\cdot\\vec{0}\\cdot2+\\vec{0}\\times\\vec{a}\\cdot{1}\\cdot2 = \\vec{a} \\] Which indicates no rotation is applied to the vector. Spherical Linear Interpolation of Quaternion The ideal interpolation between two quaternions \\(q_0\\) and \\(q_1\\) can be visualized as follow, where \\(q\\) is the ideal interpolation, \\(\\theta\\) being the angle between two quaternions and \\(v\\) being the rotation axis of the relative rotation from \\(q_0\\) to \\(q_1\\) . Relative rotation of two quaternions can be described as: \\[ q_0\\Delta q = q_1 \\\\ \\Rightarrow \\Delta q = q_0^{-1}q_1 \\] To interpolate quaternions, a most efficient and strait way is to do linear interpolation, simply put: \\[ q' = (1 - \\alpha)\\cdot q_0 + \\alpha\\cdot q_1 = \\begin{bmatrix} (1-\\alpha)x_0 + \\alpha x_1 \\\\ (1-\\alpha)y_0 + \\alpha y_1 \\\\ (1-\\alpha)z_0 + \\alpha z_1 \\\\ (1-\\alpha)w_0 + \\alpha w_1 \\end{bmatrix} \\] But this interpolation method creates a rotation that does not land on the very plane determined by the rotation axis of the relative rotation of \\(q_0\\) and \\(q_1\\) : A better way of doing interpolation is to adopt the relative rotation between input quaternions. To get the optimum quaternion, we simply formulate: \\[ q = q_0 \\cdot \\Delta q^t = q_0 \\cdot (q_0^{-1}q_1)^t \\] where \\(q^t\\) is defined as: \\[ q = \\begin{bmatrix} x \\\\ y \\\\ z \\\\ w \\\\ \\end{bmatrix} = \\begin{bmatrix} u_x \\cdot sin(\\frac{\\theta}{2}) \\\\ u_y \\cdot sin(\\frac{\\theta}{2}) \\\\ u_z \\cdot sin(\\frac{\\theta}{2}) \\\\ cos(\\frac{\\theta}{2}) \\\\ \\end{bmatrix} \\\\ q^t = \\begin{bmatrix} u_x \\cdot sin(t\\cdot\\frac{\\theta}{2}) \\\\ u_y \\cdot sin(t\\cdot\\frac{\\theta}{2}) \\\\ u_z \\cdot sin(t\\cdot\\frac{\\theta}{2}) \\\\ cos(t\\cdot\\frac{\\theta}{2}) \\\\ \\end{bmatrix} \\] Therefore, here we already obtained a feasible method of acquiring interpolation between two quaternions, and the implementation in c++ is given as below: // Code sample from project : Lu Renderer Quaternion slerp ( const Quaternion & from , const Quaternion & to , float alpha ) { alpha = clamp ( alpha , 0.0 , 1.0 ); float cos_angle = from . dot ( to ); // handle parallel quaternions // handle cos_angle < 0 // ... Quaternion delta_q = from . inverse () * to ; float angle = acosf ( cos_angle ); Quaternion quat ( q . x * asinf ( alpha * angle ) / asinf ( angle ), q . y * asinf ( alpha * angle ) / asinf ( angle ), q . z * asinf ( alpha * angle ) / asinf ( angle ), acosf ( alpha * angle ) / cos_angle ); return from * quat ; } But the above implementation involves at least two quaternion multiplication which is quite time consuming. Therefore, a much light-burden methods will be shown below: First, we rewrite the spherical linear interpolation equation as follow: \\[ q = Slerp(q_0, q_1, t) = c_0(t)q_0 + c_1(t)q_1 \\] Where \\(c_0(t)\\) and \\(c_1(t)\\) are real-valued functions, and \\(c_0(0) = 1, c_0(1) = 0\\) , \\(c_1(0) = 0, c_1(1) = 1\\) and \\(0 \\leq t \\leq 1\\) . And to get an ideal interpolation, suppose here the angle between two quaternions is \\(\\theta\\) we have: \\[ q \\cdot q_0 = (c_0(t)q_0 + c_1(t)q_1) \\cdot q_0 = c_0(t) q_0 \\cdot q_0 + c_1(t)q_1 \\cdot q_0 = c_0(t) + c_1(t) cos(\\theta) = cos(t\\theta) \\] \\[ q \\cdot q_1 = (c_0(t)q_0 + c_1(t)q_1) \\cdot q_1 = c_0(t) q_0 \\cdot q_1 + c_1(t)q_1 \\cdot q_1 = c_0(t) cos(\\theta) + c_1(t) = cos((1 - t)\\theta) \\] With two equations (20) and (21) and two unknown variables \\(c_0(t)\\) and \\(c_1(t)\\) , we can solve the above equations: \\[ c_0(t) = \\frac{cos(t\\theta) - cos((1-t)\\theta)cos(\\theta)}{1 - cos^2(\\theta)} \\\\ c_1(t) = \\frac{cos((1-t)\\theta) - cos(t\\theta)cos(\\theta)}{a - cos^2(\\theta)} \\] \\[ c_0(t) = \\frac{cos(\\theta)cos((1-t)\\theta) + sin(\\theta)sin((1-t)\\theta) - cos((1-t)\\theta)cos(\\theta)}{1 - cos^2(\\theta)} = \\frac{sin(\\theta)sin((1-t)\\theta)}{sin^2(\\theta)} = \\frac{sin((1-t)\\theta)}{sin(\\theta)} \\] \\[ c_1(t) = \\frac{cos(\\theta)cos(t\\theta) + sin(\\theta)sin(t\\theta) - cos(t\\theta)cos(\\theta)}{1 - cos^2(\\theta)} = \\frac{sin(\\theta)sin(t\\theta)}{sin^2(\\theta)} = \\frac{sin(t\\theta)}{sin(\\theta)} \\] Finally, we have reached a new method of calculating quaternion interpolation: \\[ Slerp(q_0, q_1, t) = \\frac{q_0 sin((1-t)\\theta) + q_1 cos(t\\theta)}{sin(\\theta)} \\] And an implementation in c++ is given below, which takes only half the time of the previous algorithm. // Code sample from project : Lu Renderer Quaternion slerp ( const Quaternion & from , const Quaternion & to , float alpha ) { alpha = clamp ( alpha , 0.0 , 1.0 ); float cos_angle = from . dot ( to ); // handle parallel quaternions // handle cos_angle < 0 // ... float angle = acosf ( cos_angle ); float sin_angle = sinf ( angle ); float angle_from = ( 1 - alpha ) * angle ; float angle_to = alpha * angle ; float factor_from = sinf ( angle_from ) / sin_angle ; float factor_to = sinf ( angle_to ) / sin_angle ; Quaternion quat ( from . x * factor_from + to . x * factor_to , from . y * factor_from + to . y * factor_to , from . z * factor_from + to . z * factor_to , from . w * factor_from + to . w * factor_to ); return quat ; } References: [1] https://www.geometrictools.com/Documentation/Quaternions.pdf [2] https://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/index.htm [3] https://github.com/zauonlok/renderer/blob/master/renderer/core/maths.c [4] https://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/index.htm","title":"Rotation with Vectors and Quaternions"},{"location":"quaternion_rotation/#rotation-with-vectors-and-quaternions","text":"","title":"Rotation with Vectors and Quaternions"},{"location":"quaternion_rotation/#basic-rules","text":"First, we have to go through some of the basic setup here. Quaternions are defined as the following format (similar to imaginary numbers): $$ x\\mathbf{i}+y\\mathbf{j}+z\\mathbf{k}+w $$ or written in axis angle format: \\[ sin(\\frac{\\alpha}{2})u_x\\mathbf{i}+sin(\\frac{\\alpha}{2})u_y\\mathbf{j}+sin(\\frac{\\alpha}{2})u_z\\mathbf{k}+cos(\\frac{\\alpha}{2}) \\] where \\(\\alpha\\) is the rotation angle around a certain axis (right hand rule, that is, pointing your thumb to the axis's direction, so the rest of your fingers pointing to the rotation direction), and \\(u_x\\) , \\(u_y\\) and \\(u_z\\) are the normalized coordinates of the axis. To discuss the rotation by quaternion, we don't have to go through all the mathematical attributes of quaternion, nor the complex regulations in calculation. But I still have to list the following attributes for the convenience of our later discussion: For a normalized quaternion, which is given by \\(x^2 + y^2 + z^2 + w^2 = 1\\) we have: \\[ sin(\\frac{\\alpha}{2})^2u_x^2+sin(\\frac{\\alpha}{2})^2u_y^2+sin(\\frac{\\alpha}{2})^2u_z^2+cos(\\frac{\\alpha}{2})^2 = 1 \\] \\[ \\Rightarrow sin(\\frac{\\alpha}{2})^2(u_x^2+u_y^2+u_z^2)+cos(\\frac{\\alpha}{2})^2=1 \\] \\[ \\Rightarrow sin(\\frac{\\alpha}{2})^2(u_x^2+u_y^2+u_z^2)=1-cos(\\frac{\\alpha}{2})^2 \\] \\[ \\Rightarrow sin(\\frac{\\alpha}{2})^2(u_x^2+u_y^2+u_z^2)=sin(\\frac{\\alpha}{2})^2 \\] Therefore, if a quaternion is normalized, we can get either an identity quaternion ( \\(0\\mathbf{i}+0\\mathbf{j}+0\\mathbf{k}+1\\) ), or its rotation axis is also normalized ( \\(u_x^2+u_y^2+u_z^2 = 1\\) ).","title":"Basic Rules"},{"location":"quaternion_rotation/#axis-rotation-for-vector","text":"Let's consider a general case for a vector \\(\\overrightarrow{OA}\\) rotate around an axis \\(\\overrightarrow{OB}\\) , here, for convenience the origin of the vector and axis are aligned together. First, we want to get the projection of \\(\\overrightarrow{OA}\\) to the plane \\(P\\) defined by \\(\\overrightarrow{OB}\\) , that is, \\(\\overrightarrow{OB}\\) being a normal vector of \\(P\\) . Suppose \\(A'\\) is the projection of \\(A\\) to \\(P\\) , and \\(B'\\) is the projection of \\(A\\) to \\(\\overrightarrow{OB}\\) , \\(\\alpha\\) being the angle between \\(\\overrightarrow{OA}\\) and \\(\\overrightarrow{OB}\\) . We have: \\[ \\overrightarrow{OB'} = \\overrightarrow{OB}\\cdot||\\overrightarrow{OA}||\\cdot cos(\\alpha) \\\\ \\Rightarrow \\overrightarrow{OB'} = \\overrightarrow{OB}\\cdot||\\overrightarrow{OA}|| \\frac{\\overrightarrow{OA} \\cdot \\overrightarrow{OB}}{||\\overrightarrow{OA}|| ||\\overrightarrow{OB}||} \\\\ \\Rightarrow \\overrightarrow{OB'} = \\overrightarrow{OB}\\frac{\\overrightarrow{OA} \\cdot \\overrightarrow{OB}}{||\\overrightarrow{OB}||} \\] To simplify the equation, let's denote the normalized axis \\(\\overrightarrow{OB}\\) by \\(\\vec{n}\\) , we have: \\[ \\overrightarrow{OB'} = (\\overrightarrow{OA}\\cdot\\vec{n})\\cdot\\vec{n} \\] So, we can easily get the projection of \\(\\overrightarrow{OA}\\) to the plane \\(P\\) By: \\[ \\overrightarrow{OA'} = \\overrightarrow{OA}-\\overrightarrow{OB'} = \\overrightarrow{OA}-(\\overrightarrow{OA}\\cdot\\vec{n})\\cdot\\vec{n} \\] Next, we rotate the vector \\(\\overrightarrow{OA'}\\) by \\(\\beta\\) on the plane \\(P\\) To get vector \\(\\overrightarrow{OC'}\\) by adopting the right hand rule: To calculate \\(\\overrightarrow{OC'}\\) , we obtain a orthogonal coordinates system using \\(\\overrightarrow{OA'}\\) , \\(\\vec{n}\\) and \\(\\overrightarrow{OD}\\) which is obtained by cross product of \\(\\vec{n}\\) and \\(\\vec{a}\\) (For convenience, here we denote normalized vector \\(\\overrightarrow{OA'}\\) by \\(\\vec{a}\\) ). Therefore \\(\\vec{n} \\times \\vec{a} = \\vec{d} = \\frac{\\overrightarrow{OD}}{||\\overrightarrow{OD}||}\\) \\[ \\overrightarrow{OC'} = (\\vec{a}\\cdot cos(\\beta)+\\vec{n}\\times\\vec{a}\\cdot sin(\\beta)) \\cdot ||\\overrightarrow{OA'}|| = \\overrightarrow{OA'}\\cdot cos(\\beta) + \\vec{n}\\times\\overrightarrow{OA'}\\cdot sin(\\beta) \\] Finally, to get the rotation result, we have: \\[ \\overrightarrow{OC} = \\overrightarrow{OC'} + \\overrightarrow{A'A} = \\overrightarrow{OC'} + \\overrightarrow{OA} - \\overrightarrow{OA'} \\\\ \\Rightarrow \\overrightarrow{OC} = \\overrightarrow{OA'}\\cdot cos(\\beta) + \\vec{n}\\times\\overrightarrow{OA'}\\cdot sin(\\beta) + \\overrightarrow{OA} - \\overrightarrow{OA'} \\\\ \\Rightarrow \\overrightarrow{OC} = \\overrightarrow{OA} + \\overrightarrow{OA'}\\cdot(cos(\\beta)-1)+\\vec{n}\\times\\overrightarrow{OA'}\\cdot sin(\\beta) \\\\ \\Rightarrow \\overrightarrow{OC} = \\overrightarrow{OA} + (\\overrightarrow{OA}-(\\overrightarrow{OA}\\cdot\\vec{n})\\cdot\\vec{n})\\cdot(cos(\\beta)-1)+\\vec{n}\\times(\\overrightarrow{OA}-(\\overrightarrow{OA}\\cdot\\vec{n})\\cdot\\vec{n})\\cdot sin(\\beta) \\\\ \\Rightarrow \\overrightarrow{OC} = \\overrightarrow{OA}\\cdot cos(\\beta) + (\\overrightarrow{OA} \\cdot \\vec{n})\\cdot \\vec{n} \\cdot (1 - cos(\\beta)) + \\vec{n}\\times \\overrightarrow{OA}\\cdot sin(\\beta) \\]","title":"Axis Rotation for Vector"},{"location":"quaternion_rotation/#special-case","text":"Here we a special case where the rotation angle \\(\\beta\\) is 180 degree, which indicates a mirror reflection of vector \\(\\vec{a}\\) with reference to a surface normal \\(\\vec{n}\\) \uff1a As the graph above, vector \\(\\vec{a'}\\) can be regarded as vector \\(\\vec{a}\\) rotate 180 degrees around \\(\\vec{n}\\) and inversed. Therefore we have \\(\\vec{a'} = -(\\vec{a}\\cdot cos(\\pi) + (\\vec{a}\\cdot\\vec{n})\\cdot\\vec{n}\\cdot(1-cos(\\pi))+\\vec{n}\\times\\vec{a}\\cdot sin(\\pi)) = \\vec{a}-2(\\vec{a}\\cdot\\vec{n})\\cdot\\vec{n}\\)","title":"Special Case"},{"location":"quaternion_rotation/#describe-axis-rotation-by-quaternion","text":"From the basic rule part, we have the quaternion described by the form \\(sin(\\frac{\\alpha}{2})u_x\\mathbf{i}+sin(\\frac{\\alpha}{2})u_y\\mathbf{j}+sin(\\frac{\\alpha}{2})u_z\\mathbf{k}+cos(\\frac{\\alpha}{2})\\) , and for convenience, we split the quaternion into one vector \\(\\vec{u}\\) and a number \\(w\\) : \\[ \\vec{u} = \\begin{bmatrix} u_x \\\\ u_y \\\\ u_z \\end{bmatrix} \\cdot sin(\\frac{\\alpha}{2}) = \\vec{n} \\cdot sin(\\frac{\\alpha}{2}) , w = cos(\\frac{\\alpha}{2}) \\] Notice that \\(\\vec{u}\\) can be regard as a scaled version of \\(\\vec{n}\\) from the previous chapter. And suppose the vector to rotate by quaternion is \\(\\vec{a} = \\begin{bmatrix} a_x \\\\ a_y \\\\ a_z \\end{bmatrix}\\) We get the following supposing the quaternion is not an identity quaternion: \\[ w^2 - \\vec{u} \\cdot \\vec{u} = cos^2(\\frac{\\alpha}{2}) - sin^2(\\frac{\\alpha}{2}) (u_x^2 + u_z^2 + u_z^2) = cos^2(\\frac{\\alpha}{2}) - sin^2(\\frac{\\alpha}{2}) = cos(\\alpha) \\] And also: \\[ (\\vec{a} \\cdot \\vec{u})\\cdot \\vec{u} = (a_xu_x + a_yu_y + a_zu_z)sin(\\frac{\\alpha}{2}) \\cdot \\vec{n} \\cdot sin(\\frac{\\alpha}{2}) \\\\ = (a_xu_x + a_yu_y + a_zu_z)\\cdot \\vec{n} \\cdot sin^2(\\frac{\\alpha}{2}) = (\\vec{a} \\cdot \\vec{n})\\cdot\\vec{n}\\cdot \\frac{1 - cos(\\alpha)}{2} \\] And finally: \\[ \\vec{u} \\times \\vec{a} \\cdot w = \\vec{n}\\times \\vec{a} \\cdot sin(\\frac{\\alpha}{2})cos(\\frac{a}{2}) = \\vec{n}\\times \\vec{a} \\cdot \\frac{sin(\\alpha)}{2} \\] Then, as we combine the (10), (11) and (12), we get: \\[ \\vec{a}\\cdot(w^2-\\vec{u}\\cdot\\vec{u})+(\\vec{a}\\cdot\\vec{u})\\cdot\\vec{u}\\cdot2+\\vec{u}\\times\\vec{a}\\cdot{w}\\cdot2 \\\\ = \\vec{a}\\cdot cos(\\alpha) + (\\vec{a} \\cdot \\vec{n})\\cdot \\vec{n} \\cdot (1 - cos(\\alpha)) + \\vec{n}\\times \\vec{a}\\cdot sin(\\alpha) \\] Which is exactly in the same form as (8), so, we have the method to rotate a vector by quaternion. But don't forget that we assume that this quaternion is identity, so we also have to check for an identity quaternion, whether this equation stands. An identity quaternion indicates that \\(sin(\\frac{\\alpha}{2})=0\\) , so this rotation is either degree 0 or 180 (meaning after the rotation, the vector is either parallel or opposite to the origin vector). For degree 0 or 360, we have: \\[ \\vec{a'} = \\vec{a}\\cdot(w^2-\\vec{u}\\cdot\\vec{u})+(\\vec{a}\\cdot\\vec{u})\\cdot\\vec{u}\\cdot2+\\vec{u}\\times\\vec{a}\\cdot{w}\\cdot2 \\\\ = \\vec{a}\\cdot(1^2-\\vec{0}\\cdot\\vec{0})+(\\vec{a}\\cdot\\vec{0})\\cdot\\vec{0}\\cdot2+\\vec{0}\\times\\vec{a}\\cdot{1}\\cdot2 = \\vec{a} \\] Which indicates no rotation is applied to the vector.","title":"Describe Axis Rotation by Quaternion"},{"location":"quaternion_rotation/#spherical-linear-interpolation-of-quaternion","text":"The ideal interpolation between two quaternions \\(q_0\\) and \\(q_1\\) can be visualized as follow, where \\(q\\) is the ideal interpolation, \\(\\theta\\) being the angle between two quaternions and \\(v\\) being the rotation axis of the relative rotation from \\(q_0\\) to \\(q_1\\) . Relative rotation of two quaternions can be described as: \\[ q_0\\Delta q = q_1 \\\\ \\Rightarrow \\Delta q = q_0^{-1}q_1 \\] To interpolate quaternions, a most efficient and strait way is to do linear interpolation, simply put: \\[ q' = (1 - \\alpha)\\cdot q_0 + \\alpha\\cdot q_1 = \\begin{bmatrix} (1-\\alpha)x_0 + \\alpha x_1 \\\\ (1-\\alpha)y_0 + \\alpha y_1 \\\\ (1-\\alpha)z_0 + \\alpha z_1 \\\\ (1-\\alpha)w_0 + \\alpha w_1 \\end{bmatrix} \\] But this interpolation method creates a rotation that does not land on the very plane determined by the rotation axis of the relative rotation of \\(q_0\\) and \\(q_1\\) : A better way of doing interpolation is to adopt the relative rotation between input quaternions. To get the optimum quaternion, we simply formulate: \\[ q = q_0 \\cdot \\Delta q^t = q_0 \\cdot (q_0^{-1}q_1)^t \\] where \\(q^t\\) is defined as: \\[ q = \\begin{bmatrix} x \\\\ y \\\\ z \\\\ w \\\\ \\end{bmatrix} = \\begin{bmatrix} u_x \\cdot sin(\\frac{\\theta}{2}) \\\\ u_y \\cdot sin(\\frac{\\theta}{2}) \\\\ u_z \\cdot sin(\\frac{\\theta}{2}) \\\\ cos(\\frac{\\theta}{2}) \\\\ \\end{bmatrix} \\\\ q^t = \\begin{bmatrix} u_x \\cdot sin(t\\cdot\\frac{\\theta}{2}) \\\\ u_y \\cdot sin(t\\cdot\\frac{\\theta}{2}) \\\\ u_z \\cdot sin(t\\cdot\\frac{\\theta}{2}) \\\\ cos(t\\cdot\\frac{\\theta}{2}) \\\\ \\end{bmatrix} \\] Therefore, here we already obtained a feasible method of acquiring interpolation between two quaternions, and the implementation in c++ is given as below: // Code sample from project : Lu Renderer Quaternion slerp ( const Quaternion & from , const Quaternion & to , float alpha ) { alpha = clamp ( alpha , 0.0 , 1.0 ); float cos_angle = from . dot ( to ); // handle parallel quaternions // handle cos_angle < 0 // ... Quaternion delta_q = from . inverse () * to ; float angle = acosf ( cos_angle ); Quaternion quat ( q . x * asinf ( alpha * angle ) / asinf ( angle ), q . y * asinf ( alpha * angle ) / asinf ( angle ), q . z * asinf ( alpha * angle ) / asinf ( angle ), acosf ( alpha * angle ) / cos_angle ); return from * quat ; } But the above implementation involves at least two quaternion multiplication which is quite time consuming. Therefore, a much light-burden methods will be shown below: First, we rewrite the spherical linear interpolation equation as follow: \\[ q = Slerp(q_0, q_1, t) = c_0(t)q_0 + c_1(t)q_1 \\] Where \\(c_0(t)\\) and \\(c_1(t)\\) are real-valued functions, and \\(c_0(0) = 1, c_0(1) = 0\\) , \\(c_1(0) = 0, c_1(1) = 1\\) and \\(0 \\leq t \\leq 1\\) . And to get an ideal interpolation, suppose here the angle between two quaternions is \\(\\theta\\) we have: \\[ q \\cdot q_0 = (c_0(t)q_0 + c_1(t)q_1) \\cdot q_0 = c_0(t) q_0 \\cdot q_0 + c_1(t)q_1 \\cdot q_0 = c_0(t) + c_1(t) cos(\\theta) = cos(t\\theta) \\] \\[ q \\cdot q_1 = (c_0(t)q_0 + c_1(t)q_1) \\cdot q_1 = c_0(t) q_0 \\cdot q_1 + c_1(t)q_1 \\cdot q_1 = c_0(t) cos(\\theta) + c_1(t) = cos((1 - t)\\theta) \\] With two equations (20) and (21) and two unknown variables \\(c_0(t)\\) and \\(c_1(t)\\) , we can solve the above equations: \\[ c_0(t) = \\frac{cos(t\\theta) - cos((1-t)\\theta)cos(\\theta)}{1 - cos^2(\\theta)} \\\\ c_1(t) = \\frac{cos((1-t)\\theta) - cos(t\\theta)cos(\\theta)}{a - cos^2(\\theta)} \\] \\[ c_0(t) = \\frac{cos(\\theta)cos((1-t)\\theta) + sin(\\theta)sin((1-t)\\theta) - cos((1-t)\\theta)cos(\\theta)}{1 - cos^2(\\theta)} = \\frac{sin(\\theta)sin((1-t)\\theta)}{sin^2(\\theta)} = \\frac{sin((1-t)\\theta)}{sin(\\theta)} \\] \\[ c_1(t) = \\frac{cos(\\theta)cos(t\\theta) + sin(\\theta)sin(t\\theta) - cos(t\\theta)cos(\\theta)}{1 - cos^2(\\theta)} = \\frac{sin(\\theta)sin(t\\theta)}{sin^2(\\theta)} = \\frac{sin(t\\theta)}{sin(\\theta)} \\] Finally, we have reached a new method of calculating quaternion interpolation: \\[ Slerp(q_0, q_1, t) = \\frac{q_0 sin((1-t)\\theta) + q_1 cos(t\\theta)}{sin(\\theta)} \\] And an implementation in c++ is given below, which takes only half the time of the previous algorithm. // Code sample from project : Lu Renderer Quaternion slerp ( const Quaternion & from , const Quaternion & to , float alpha ) { alpha = clamp ( alpha , 0.0 , 1.0 ); float cos_angle = from . dot ( to ); // handle parallel quaternions // handle cos_angle < 0 // ... float angle = acosf ( cos_angle ); float sin_angle = sinf ( angle ); float angle_from = ( 1 - alpha ) * angle ; float angle_to = alpha * angle ; float factor_from = sinf ( angle_from ) / sin_angle ; float factor_to = sinf ( angle_to ) / sin_angle ; Quaternion quat ( from . x * factor_from + to . x * factor_to , from . y * factor_from + to . y * factor_to , from . z * factor_from + to . z * factor_to , from . w * factor_from + to . w * factor_to ); return quat ; }","title":"Spherical Linear Interpolation of Quaternion"},{"location":"quaternion_rotation/#references","text":"[1] https://www.geometrictools.com/Documentation/Quaternions.pdf [2] https://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/index.htm [3] https://github.com/zauonlok/renderer/blob/master/renderer/core/maths.c [4] https://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/index.htm","title":"References:"},{"location":"spherical_harmonics/","text":"Spherical harmonics In rendering a realistic scene in computer graphics, skylight is implemented with a skybox which essentially a image mapped to a sphere whose radius is set to infinite. The common way of spped up this global illumination is to precompute a environment map that represent incident illumination at a point. But overall, it is still costly to compute even a 64 * 64 enviroment map. We thus adopt spherical harmonics to represent enviroment map and focuses on the Lambertian component of the BRDF. for a point in a surface, the irradiance E is a function of the surface normal only and given by a integral over the upper hemisphere \\(\\Omega(n)\\) : \\[ E(\\mathbf{n}) = \\int_{\\Omega(\\mathbf{n})}L(\\omega)(\\mathbf{n}\\cdot\\omega)d\\omega \\] Here, \\(\\omega\\) and \\(\\mathbf{n}\\) are unit direction vectors, therefore, we can describe E and L as a BRDF, i.e. a parameterization by a direction \\((\\theta,\\phi)\\) To approximate E, we derive a method adopting spherical harmonics. Harmonics are solutions to laplace's equation, and we take the spherical harmonic coefficients \\(Y_{lm}\\) \uff0cwhich are analogue on the sphere to the Fourier basis on line or circle. We utilize the first three layers of SH that is: \\[ Y_{lm} = \\begin{cases} \\sqrt{2}K_{lm}cos(m\\varphi)P_{lm}(cos(\\theta)) & m>0 \\\\ \\sqrt{2}K_{lm}cos(m\\varphi)P_{l|m|}(cos(\\theta)) & m<0 \\\\ K_{l0}P_{l0}cos(\\theta) & m=0 \\end{cases} \\] where: \\[ K_{lm}=\\sqrt{\\frac{(2l+1)(l-|m|)!}{4\\pi(l+m)!}} \\] and P is calculated iteratively: \\[ P_{00}=1 \\\\ P_{mm} = (1-2m)P_{m-1,m-1} \\\\ p_{m+1,m} = (2m+1)zP_{mm} \\\\ p_{lm} = \\frac{(2l-1)zP_{l-1,m}-(l+m-1)P_{l-2,m}}{l-m} \\] In computer graphics, these coefficients are precomputed as fixed float values and we only take the first 9 coefficients, therefore, we have: \\[ \\begin{align*} (x,y,z) &= (sin\\theta cos\\phi,sin\\theta sin\\phi, cos\\theta) \\\\ Y_{00}(\\theta,\\phi)&=0.282095 \\\\ (Y_{11};Y_{10};Y_{1,-1})(\\theta,\\phi) &= 0.488603(x;y;z) \\\\ (Y_{21};Y_{2,-1};Y_{2,-1})(\\theta,\\phi) &= 1.092548(xz;yz;xy) \\\\ Y_{20}(\\theta,\\phi) &= 0.315392(3z^2-1) \\\\ Y_{22}(\\theta,\\phi) &= 0.546274(x^2-y^2) \\end{align*} \\] So, we can now write L and E in: \\[ L(\\theta,\\phi) = \\sum_{l,m}L_{lm}Y_{lm}(\\theta,\\phi) \\\\ E(\\theta,\\phi) = \\sum_{l,m}E_{lm}Y_{lm}(\\theta,\\phi) \\] To simplify the calculation, we define \\(A = (\\mathbf{n}\\cdot\\omega)\\) , note that A is not dependent on \\(\\phi\\) , therefore, m = 0, and we only use l index: $$ A(\\theta) = max[cos(\\theta),0]=\\sum_l A_lY_{l0}(\\theta,0) $$ We have: $$ E_{lm} = \\sqrt{\\frac{4\\pi}{2l+1}}A_lL_{lm} \\ \\hat{A_l}=\\sqrt{\\frac{4\\pi}{2l+1}}A_l $$ Therefore: $$ E(\\theta,\\phi)=\\sum_{l,m}\\hat{A_l}L_{lm}Y_{lm}(\\theta,\\phi) $$ Where \\(\\hat{A_l}\\) Can be calculated numerically: $$ \\hat{A_0}=3.141593 \\quad \\hat{A_1}=2.094395 \\quad \\hat{A_2}=0.785398 \\ \\hat{A_3}=0 \\quad \\hat{A_4}=-0.130900 \\quad \\hat{A_5}=0 \\quad \\hat{A_6}=0.049087 $$ Because \\(\\hat{A_l}\\) decay quickly, for rendering, we only need to consider low-frequency lighting coefficients. More precisely: \\(l\\leq2\\) To calculate lunimance L, we do the following prefiltering stage to acquire all needed parameters \\(L_{lm}\\) : $$ L_{lm} = \\int_{\\theta=0}^\\pi\\int_{\\phi=0}^{2\\pi}L(\\theta,\\phi)Y_{lm}(\\theta,\\phi)sin(\\theta)d\\theta d\\phi $$ which is in the form of integration over a unit sphere's surface area. In computer graphics, we implement this integral simply by sum of the input environment map L and weighted by function Y. Which takes \\(O(9S)\\) where S is the size of environment map. Reference [1] Ravi Ramamoorthi, Pat Hanrahan. An efficient representation for irradiance environment maps. SIGGRAPH 2001: 497-500 [2] Peter-Pike Sloan. Stupid Spherical Harmonics (SH) Tricks. GDC 2008 Lecture paper","title":"Spherical harmonics"},{"location":"spherical_harmonics/#spherical-harmonics","text":"In rendering a realistic scene in computer graphics, skylight is implemented with a skybox which essentially a image mapped to a sphere whose radius is set to infinite. The common way of spped up this global illumination is to precompute a environment map that represent incident illumination at a point. But overall, it is still costly to compute even a 64 * 64 enviroment map. We thus adopt spherical harmonics to represent enviroment map and focuses on the Lambertian component of the BRDF. for a point in a surface, the irradiance E is a function of the surface normal only and given by a integral over the upper hemisphere \\(\\Omega(n)\\) : \\[ E(\\mathbf{n}) = \\int_{\\Omega(\\mathbf{n})}L(\\omega)(\\mathbf{n}\\cdot\\omega)d\\omega \\] Here, \\(\\omega\\) and \\(\\mathbf{n}\\) are unit direction vectors, therefore, we can describe E and L as a BRDF, i.e. a parameterization by a direction \\((\\theta,\\phi)\\) To approximate E, we derive a method adopting spherical harmonics. Harmonics are solutions to laplace's equation, and we take the spherical harmonic coefficients \\(Y_{lm}\\) \uff0cwhich are analogue on the sphere to the Fourier basis on line or circle. We utilize the first three layers of SH that is: \\[ Y_{lm} = \\begin{cases} \\sqrt{2}K_{lm}cos(m\\varphi)P_{lm}(cos(\\theta)) & m>0 \\\\ \\sqrt{2}K_{lm}cos(m\\varphi)P_{l|m|}(cos(\\theta)) & m<0 \\\\ K_{l0}P_{l0}cos(\\theta) & m=0 \\end{cases} \\] where: \\[ K_{lm}=\\sqrt{\\frac{(2l+1)(l-|m|)!}{4\\pi(l+m)!}} \\] and P is calculated iteratively: \\[ P_{00}=1 \\\\ P_{mm} = (1-2m)P_{m-1,m-1} \\\\ p_{m+1,m} = (2m+1)zP_{mm} \\\\ p_{lm} = \\frac{(2l-1)zP_{l-1,m}-(l+m-1)P_{l-2,m}}{l-m} \\] In computer graphics, these coefficients are precomputed as fixed float values and we only take the first 9 coefficients, therefore, we have: \\[ \\begin{align*} (x,y,z) &= (sin\\theta cos\\phi,sin\\theta sin\\phi, cos\\theta) \\\\ Y_{00}(\\theta,\\phi)&=0.282095 \\\\ (Y_{11};Y_{10};Y_{1,-1})(\\theta,\\phi) &= 0.488603(x;y;z) \\\\ (Y_{21};Y_{2,-1};Y_{2,-1})(\\theta,\\phi) &= 1.092548(xz;yz;xy) \\\\ Y_{20}(\\theta,\\phi) &= 0.315392(3z^2-1) \\\\ Y_{22}(\\theta,\\phi) &= 0.546274(x^2-y^2) \\end{align*} \\] So, we can now write L and E in: \\[ L(\\theta,\\phi) = \\sum_{l,m}L_{lm}Y_{lm}(\\theta,\\phi) \\\\ E(\\theta,\\phi) = \\sum_{l,m}E_{lm}Y_{lm}(\\theta,\\phi) \\] To simplify the calculation, we define \\(A = (\\mathbf{n}\\cdot\\omega)\\) , note that A is not dependent on \\(\\phi\\) , therefore, m = 0, and we only use l index: $$ A(\\theta) = max[cos(\\theta),0]=\\sum_l A_lY_{l0}(\\theta,0) $$ We have: $$ E_{lm} = \\sqrt{\\frac{4\\pi}{2l+1}}A_lL_{lm} \\ \\hat{A_l}=\\sqrt{\\frac{4\\pi}{2l+1}}A_l $$ Therefore: $$ E(\\theta,\\phi)=\\sum_{l,m}\\hat{A_l}L_{lm}Y_{lm}(\\theta,\\phi) $$ Where \\(\\hat{A_l}\\) Can be calculated numerically: $$ \\hat{A_0}=3.141593 \\quad \\hat{A_1}=2.094395 \\quad \\hat{A_2}=0.785398 \\ \\hat{A_3}=0 \\quad \\hat{A_4}=-0.130900 \\quad \\hat{A_5}=0 \\quad \\hat{A_6}=0.049087 $$ Because \\(\\hat{A_l}\\) decay quickly, for rendering, we only need to consider low-frequency lighting coefficients. More precisely: \\(l\\leq2\\) To calculate lunimance L, we do the following prefiltering stage to acquire all needed parameters \\(L_{lm}\\) : $$ L_{lm} = \\int_{\\theta=0}^\\pi\\int_{\\phi=0}^{2\\pi}L(\\theta,\\phi)Y_{lm}(\\theta,\\phi)sin(\\theta)d\\theta d\\phi $$ which is in the form of integration over a unit sphere's surface area. In computer graphics, we implement this integral simply by sum of the input environment map L and weighted by function Y. Which takes \\(O(9S)\\) where S is the size of environment map.","title":"Spherical harmonics"},{"location":"spherical_harmonics/#reference","text":"[1] Ravi Ramamoorthi, Pat Hanrahan. An efficient representation for irradiance environment maps. SIGGRAPH 2001: 497-500 [2] Peter-Pike Sloan. Stupid Spherical Harmonics (SH) Tricks. GDC 2008 Lecture paper","title":"Reference"},{"location":"Estar_Games/Chapter_1/","text":"\u7b2c\u4e00\u8bfe \u6e38\u620f\u5f15\u64ce\u7efc\u8ff0 \u7f51\u6613E\u661f\u8ba1\u5212 \u6e38\u620f\u5f15\u64ce\u8bfe\u7a0b 3\u670817\u65e5 \u6e38\u620f\u5f15\u64ce\u53ca\u5176\u7b80\u53f2 \u6e38\u620f\u5f15\u64ce = \u5f15\u64ce\u6838\u5fc3\u7ec4\u4ef6\uff08Core\uff09 + \u5de5\u5177\uff08Tool Chain\uff09 Renderer \uff5e= \u5f15\u64ce\u6838\u5fc3\u7ec4\u4ef6 \u6216\u8005 \u5f15\u64ceRuntime \u6e38\u620f = \u5f15\u64ce\u6838\u5fc3\u7ec4\u4ef6 + \u5185\u5bb9\uff08\u8d44\u6e90 + \u73a9\u6cd5\uff09 1993 DOOM 1998 UE 1.0 2005 UNITY 1.0 Core - \u52a8\u753b - \u6e32\u67d3 - \u7269\u7406 - \u811a\u672c - \u7f51\u7edc - AI - \u58f0\u97f3 Tools \u6e32\u67d3 \u865a\u62df\u51e0\u4f55\u4f53\uff08Nanite\uff09 GPU Driven Mesh Cluster Rendering (Mesh Shader) Cluster with LOD UE5 nanite \u52a8\u753b \u7a0b\u5e8f\u5316\u89d2\u8272\u52a8\u753b - \u878d\u5408 Blending - \u53cd\u5411\u52a8\u529b\u5b66 Inverse Kinmatic - \u5e03\u5a03\u5a03 Ragdoll \u7269\u7406 \u521a\u4f53\u6a21\u62df - \u521a\u4f53\u78b0\u649e\u68c0\u6d4b\u4e0e\u54cd\u5e94 \u67d4\u4f53\u6a21\u62df - Beam NG \u5f39\u7c27\u8d28\u70b9\u6a21\u578b - NVIDIA FleX \u57fa\u4e8e\u4f4d\u7f6e\u7684\u52a8\u529b\u5b66 - AMD FEMFX \u6709\u9650\u5143\u65b9\u6cd5 - CD-MPM \u6750\u6599\u8d28\u70b9\u65b9\u6cd5 \u9ad8\u7cbe\u5ea6\u7f51\u683c - \u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\uff08\u4e0d\u6210\u719f\uff09 \u7269\u7406\u5f15\u64ce - PhysX - Havok - Bullet - Box2D \u81ea\u7814 - Jolt Physics - Beam.NG - UE5 Chaos AI \u7f51\u7edc \u811a\u672c \u97f3\u4e50 \u7b54\u7591\u5185\u5bb9 \u3010\u9996\u6b21\u8bfe\u7a0b\u5f39\u5e55\u7b54\u7591\u96c6\u7ed3\u3011 1\uff0c\u6bcf\u5468\u4ee3\u7801\u91cf\u5927\u6982\u591a\u5c11\uff1f \u5e94\u8be5\u4e0d\u5230300\u884c\uff0c\u4f46\u662f\u5f88\u9700\u8981\u667a\u6167\u7684300\u884c\u54df~ 2\uff0c\u5bf9\u8bbe\u5907\u6709\u4ec0\u4e48\u8981\u6c42\uff1f windows\u8bbe\u5907\uff0ci5\u4ee5\u4e0a\uff0c4G\u5185\u5b58\u4ee5\u4e0a\u5373\u53ef 3\uff0c\u53ea\u4f1ac++\u4f1a\u4e0d\u4f1a\u8ddf\u4e0d\u4e0a\uff1f \u4f5c\u4e1a\u4e3b\u8981\u4ee5C++\u548cGLSL\u4e3a\u4e3b\uff0c\u5185\u5bb9\u8f83\u4e3a\u57fa\u7840\uff0c\u4e14\u6709\u8303\u4f8b\u53ef\u4ee5\u53c2\u8003\u3002\u5269\u4f59\u7684\u5c31\u8981\u9760\u540c\u5b66\u4eec\u81ea\u5df1\u7684\u52aa\u529b\u4e86 4\uff0c\u5c0f\u767d\u5355\u5468\u8017\u65f6\u5927\u6982\u591a\u5c11 -- 3-4\u5c0f\u65f6 5\uff0c\u6c42\u6280\u672f\u89c6\u9891\u7684\u6cb9\u7ba1\u94fe\u63a5\uff08by\u5170\u6d0b\u8001\u5e08\uff09 \u6e32\u67d3\uff1a https://www.youtube.com/watch?v=NEzJH-JrAdw \u5149\u6805\uff1a https://www.youtube.com/watch?v=t7Ztio8cwqM https://www.youtube.com/watch?v=Qx_AmlZxzVk \u5149\u7167\u7740\u8272\uff1ahttps://www.youtube.com/watch?v=bsSveswnQik GTA\u5355\u5e27\uff1ahttps://www.youtube.com/watch?v=ygndZ5eIFO4 mesh: Vege: https://www.youtube.com/watch?v=wavnKZNSYqU Hair: https://www.youtube.com/watch?v=ool2E8SQPGU https://www.youtube.com/watch?v=Gk_mTHvBx1w http://advances.realtimerendering.com/s2019/hair_presentation_final.pdf mtl: https://www.youtube.com/watch?v=j-A0mwsJRmk&t=663s https://www.gdcvault.com/play/1018270/Next-Generation-Character \u539f\u795e\uff1ahttps://www.youtube.com/watch?v=-JFyAdI_rO8 \u5149\u8ffd\u4e0e\u6df7\u5408\u6e32\u67d3\uff1a https://www.youtube.com/watch?v=CsBHQGN0Q-0 https://www.youtube.com/watch?v=Qx_AmlZxzVk https://www.youtube.com/watch?v=Bk5HOtRwgd8","title":"\u7b2c\u4e00\u8bfe \u6e38\u620f\u5f15\u64ce\u7efc\u8ff0"},{"location":"Estar_Games/Chapter_1/#_1","text":"\u7f51\u6613E\u661f\u8ba1\u5212 \u6e38\u620f\u5f15\u64ce\u8bfe\u7a0b 3\u670817\u65e5","title":"\u7b2c\u4e00\u8bfe \u6e38\u620f\u5f15\u64ce\u7efc\u8ff0"},{"location":"Estar_Games/Chapter_1/#_2","text":"\u6e38\u620f\u5f15\u64ce = \u5f15\u64ce\u6838\u5fc3\u7ec4\u4ef6\uff08Core\uff09 + \u5de5\u5177\uff08Tool Chain\uff09 Renderer \uff5e= \u5f15\u64ce\u6838\u5fc3\u7ec4\u4ef6 \u6216\u8005 \u5f15\u64ceRuntime \u6e38\u620f = \u5f15\u64ce\u6838\u5fc3\u7ec4\u4ef6 + \u5185\u5bb9\uff08\u8d44\u6e90 + \u73a9\u6cd5\uff09 1993 DOOM 1998 UE 1.0 2005 UNITY 1.0 Core - \u52a8\u753b - \u6e32\u67d3 - \u7269\u7406 - \u811a\u672c - \u7f51\u7edc - AI - \u58f0\u97f3 Tools","title":"\u6e38\u620f\u5f15\u64ce\u53ca\u5176\u7b80\u53f2"},{"location":"Estar_Games/Chapter_1/#_3","text":"","title":"\u6e32\u67d3"},{"location":"Estar_Games/Chapter_1/#nanite","text":"GPU Driven Mesh Cluster Rendering (Mesh Shader) Cluster with LOD UE5 nanite","title":"\u865a\u62df\u51e0\u4f55\u4f53\uff08Nanite\uff09"},{"location":"Estar_Games/Chapter_1/#_4","text":"\u7a0b\u5e8f\u5316\u89d2\u8272\u52a8\u753b - \u878d\u5408 Blending - \u53cd\u5411\u52a8\u529b\u5b66 Inverse Kinmatic - \u5e03\u5a03\u5a03 Ragdoll","title":"\u52a8\u753b"},{"location":"Estar_Games/Chapter_1/#_5","text":"\u521a\u4f53\u6a21\u62df - \u521a\u4f53\u78b0\u649e\u68c0\u6d4b\u4e0e\u54cd\u5e94 \u67d4\u4f53\u6a21\u62df - Beam NG \u5f39\u7c27\u8d28\u70b9\u6a21\u578b - NVIDIA FleX \u57fa\u4e8e\u4f4d\u7f6e\u7684\u52a8\u529b\u5b66 - AMD FEMFX \u6709\u9650\u5143\u65b9\u6cd5 - CD-MPM \u6750\u6599\u8d28\u70b9\u65b9\u6cd5 \u9ad8\u7cbe\u5ea6\u7f51\u683c - \u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\uff08\u4e0d\u6210\u719f\uff09 \u7269\u7406\u5f15\u64ce - PhysX - Havok - Bullet - Box2D \u81ea\u7814 - Jolt Physics - Beam.NG - UE5 Chaos","title":"\u7269\u7406"},{"location":"Estar_Games/Chapter_1/#ai","text":"","title":"AI \u7f51\u7edc \u811a\u672c \u97f3\u4e50"},{"location":"Estar_Games/Chapter_1/#_6","text":"\u3010\u9996\u6b21\u8bfe\u7a0b\u5f39\u5e55\u7b54\u7591\u96c6\u7ed3\u3011 1\uff0c\u6bcf\u5468\u4ee3\u7801\u91cf\u5927\u6982\u591a\u5c11\uff1f \u5e94\u8be5\u4e0d\u5230300\u884c\uff0c\u4f46\u662f\u5f88\u9700\u8981\u667a\u6167\u7684300\u884c\u54df~ 2\uff0c\u5bf9\u8bbe\u5907\u6709\u4ec0\u4e48\u8981\u6c42\uff1f windows\u8bbe\u5907\uff0ci5\u4ee5\u4e0a\uff0c4G\u5185\u5b58\u4ee5\u4e0a\u5373\u53ef 3\uff0c\u53ea\u4f1ac++\u4f1a\u4e0d\u4f1a\u8ddf\u4e0d\u4e0a\uff1f \u4f5c\u4e1a\u4e3b\u8981\u4ee5C++\u548cGLSL\u4e3a\u4e3b\uff0c\u5185\u5bb9\u8f83\u4e3a\u57fa\u7840\uff0c\u4e14\u6709\u8303\u4f8b\u53ef\u4ee5\u53c2\u8003\u3002\u5269\u4f59\u7684\u5c31\u8981\u9760\u540c\u5b66\u4eec\u81ea\u5df1\u7684\u52aa\u529b\u4e86 4\uff0c\u5c0f\u767d\u5355\u5468\u8017\u65f6\u5927\u6982\u591a\u5c11 -- 3-4\u5c0f\u65f6 5\uff0c\u6c42\u6280\u672f\u89c6\u9891\u7684\u6cb9\u7ba1\u94fe\u63a5\uff08by\u5170\u6d0b\u8001\u5e08\uff09 \u6e32\u67d3\uff1a https://www.youtube.com/watch?v=NEzJH-JrAdw \u5149\u6805\uff1a https://www.youtube.com/watch?v=t7Ztio8cwqM https://www.youtube.com/watch?v=Qx_AmlZxzVk \u5149\u7167\u7740\u8272\uff1ahttps://www.youtube.com/watch?v=bsSveswnQik GTA\u5355\u5e27\uff1ahttps://www.youtube.com/watch?v=ygndZ5eIFO4 mesh: Vege: https://www.youtube.com/watch?v=wavnKZNSYqU Hair: https://www.youtube.com/watch?v=ool2E8SQPGU https://www.youtube.com/watch?v=Gk_mTHvBx1w http://advances.realtimerendering.com/s2019/hair_presentation_final.pdf mtl: https://www.youtube.com/watch?v=j-A0mwsJRmk&t=663s https://www.gdcvault.com/play/1018270/Next-Generation-Character \u539f\u795e\uff1ahttps://www.youtube.com/watch?v=-JFyAdI_rO8 \u5149\u8ffd\u4e0e\u6df7\u5408\u6e32\u67d3\uff1a https://www.youtube.com/watch?v=CsBHQGN0Q-0 https://www.youtube.com/watch?v=Qx_AmlZxzVk https://www.youtube.com/watch?v=Bk5HOtRwgd8","title":"\u7b54\u7591\u5185\u5bb9"},{"location":"Estar_Games/Chapter_2/","text":"\u7b2c\u4e8c\u8bfe \u6e32\u67d3\u7ba1\u7ebf \u7f51\u6613E\u661f\u8ba1\u5212 \u6e38\u620f\u5f15\u64ce\u8bfe\u7a0b 3\u670824\u65e5 GPU \u57fa\u672c\u529f\u80fd 1. \u56fe\u5f62\u7ed8\u5236 2. \u7269\u7406\u6a21\u62df PhysX 3. \u6d77\u91cf\u8ba1\u7b97 CUDA 4. AI\u8fd0\u7b97 AI Core/Tensor Core GPU\u67b6\u6784 \u4ee5NVIDIA Fermi\u4e3a\u4f8b \u670916\u4e2a SM \uff08Stream Multiprocessor\uff09 \u6bcf\u4e2aSM 2\u4e2a Warp Scheduler 2\u4e2aDispatch Unit\uff08\u5206\u53d1\u5355\u5143\uff09 2\u4e2aWarp\uff08\u7ebf\u7a0b\u675f\uff09 16\u7ec4LD/ST\uff08\u52a0\u8f7d\u5b58\u50a8\u5355\u5143\uff09 4\u4e2aSFU\uff08\u7279\u6b8a\u51fd\u6570\u5355\u5143\uff09 128KB\u5bc4\u5b58\u5668 64KB Shared Memory / L1 \u7f13\u5b58 Uniform Cache \u5168\u5c40\u7f13\u5b58 \u6bcf\u4e2aWarp 32\u4e2aCore \u6bcf\u4e2aCore 1\u4e2aFPU\uff08\u6d6e\u70b9\u6570\u5355\u5143\uff09 1\u4e2aALU\uff08\u7b97\u6570\u903b\u8f91\u5355\u5143\uff09 \u5b58\u50a8\u67b6\u6784 - \u5206\u79bb\u5f0f\uff1aCPU\u548cGPU\u901a\u8fc7PCI-E\u603b\u7ebf\u901a\u8baf - \u8026\u5408\u5f0f\uff1a\u7531MMU\u8fdb\u884c\u50a8\u5b58\u7ba1\u7406\uff0c\u6bd4\u5982APU\u3001\u6e38\u620f\u4e3b\u673a\u548c\u79fb\u52a8\u8bbe\u5907 \u6bcf\u4e2aSM\u7531\u5bc4\u5b58\u5668\uff0c\u5171\u4eab\u5185\u5b58\uff0cL1\u7f13\u5b58 \u5b58\u53d6\u901f\u5ea6\u4ece\u5bc4\u5b58\u5668\u5230\u663e\u5b58\u4f9d\u6b21\u53d8\u6162\uff0c\u5373\u79bbCore\u8d8a\u8fd1\u8d8a\u9891\u7e41 - \u5bc4\u5b58\u5668 1 \u751f\u547d\u5468\u671f\uff1a\u5355\u4e2a\u7ebf\u7a0b - \u5171\u4eab\u5185\u5b58 1\uff5e32 \u751f\u547d\u5468\u671f\uff1a\u7ebf\u7a0b\u7ec4 - L1\u7f13\u5b58 1\uff5e32 \u751f\u547d\u5468\u671f\uff1a\u5355\u4e2a\u7ebf\u7a0b - L2\u7f13\u5b58 32\uff5e64 \u751f\u547d\u5468\u671f\uff1a\u5355\u4e2a\u7ebf\u7a0b - \u7eb9\u7406\u3001\u5e38\u91cf\u7f13\u5b58 400\uff5e600 \u751f\u547d\u5468\u671f\uff1a\u7528\u6237 - \u5168\u5c40\u5185\u5b58 400\uff5e600 \u751f\u547d\u5468\u671f\uff1a\u7528\u6237 \u6e32\u67d3\u7ba1\u7ebf \u7565 \u7740\u8272\u5668 \u4ea4\u53c9\u7f16\u8bd1\uff1a\u5199\u4e00\u4efd\u8bed\u8a00\uff0c\u6bd4\u5982HLSL\uff0c\u7f16\u8bd1\u4e3a\u5176\u4ed6\u8bed\u8a00 Unity Shaderlab\u662f\u5c01\u88c5\u8bed\u8a00 \u7ed8\u5236\u4e00\u4e2a\u4e09\u89d2\u5f62 CPU Graphics API PushBuffer GPU Host Interface Front End Primitive Distributor ... 1 \u9996\u5148\u51c6\u5907Vertex Data\uff08Vertex Array / Index Array\uff09 2 \u7a0b\u5e8f\u901a\u8fc7Graphics API\u53d1\u51faDrawCall\u6307\u4ee4\uff0c\u6307\u4ee4\u9001\u5230\u9a71\u52a8\u7a0b\u5e8f\uff0c\u68c0\u6d4b\u5408\u6cd5\u6027\u540e\uff0c\u653e\u5230GPU\u7684PushBuffer\u4e2d 3 \u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u6216\u8c03\u7528flush\u6307\u4ee4\u540e\uff0c\u9a71\u52a8\u7a0b\u5e8f\u5427PushBuffer\u53d1\u9001\u7ed9GPU\uff0cGPU\u901a\u8fc7\u4e3b\u673a\u63a5\u53e3\uff08Host Interface\uff09\u63a5\u53d7\u4e0d\u4e86\u547d\u4ee4\uff0c\u901a\u8fc7\u524d\u7aef\uff08Front End\uff09\u5904\u7406\u6307\u4ee4 4 \u56fe\u5143\u5206\u914d\u5668\uff08Primitive Distributor\uff09\u901a\u8fc7index buffer\u751f\u6210\u4e09\u89d2\u5f62\uff0c\u5c06\u4e09\u89d2\u5f62\u5206\u6279\u6b21\uff08Batches\uff09\u53d1\u7ed9SM 5 \u6bcf\u4e2aSM\u7684Poly Morph Engine\u4f7f\u7528triangle indices\u53d6\u51fa\u4e09\u89d2\u5f62\u6570\u636e\uff0c\u83b7\u53d6\u6570\u636e\u540eSM\u4e2d\u4ee532\u4e2a\u7ebf\u7a0b\u4e3a\u4e00\u7ec4\uff08Warp\uff09\u5904\u7406\u9876\u70b9\u6570\u636e 6 \u4e00\u65e6warp\u5b8c\u6210\u4e86\u6240\u6709vertex shader\u548cgeometry shader\u6307\u4ee4\uff0c\u8fd0\u7b97\u7ed3\u679c\u88ab\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\uff08View Transform\uff09\uff0c\u4e09\u89d2\u5f62\u88ab\u88c1\u526a\u7136\u540e\u51c6\u5907\u5149\u6805\u5316 Work Distribution Crossbar Raster Engine Attribute Setup PS\uff08Pixel Shader\uff09 / FS\uff08Fragment Shader\uff09 7 \u901a\u8fc7\u5206\u6790\u4e09\u89d2\u5f62\u5360\u7528\u5c4f\u5e55\u9762\u79ef\uff0c\u7531work distribution crossbar\u5206\u53d1\u5230\u4e00\u4e2a\u5230\u591a\u4e2aRaster Engine\u505a\u5149\u6805\u5316 8 \u5c5e\u6027\u8bbe\u7f6e\uff08Attribute Setup\uff09\uff1a\u8ba1\u7b97\u63d2\u503c\uff0c\u5e76\u4fdd\u8bc1\u6570\u636e\u662fpixel shader\u9700\u8981\u7684\u683c\u5f0f 9 \u50cf\u7d20\u7740\u8272\uff08Pixel Shader\uff09\uff0c\u4e00\u822c\u662f2x2\u50cf\u7d20\u5757\u8fdb\u884c\u5904\u7406 Crossbar \u6e32\u67d3\u8f93\u51fa\u5355\u5143\uff08ROP\uff09 Alpha\u6df7\u5408\uff0c\u6a21\u677f\u6d4b\u8bd5\u7b49\u7b49 \u62d3\u5c55\u5185\u5bb9 TBDR Immediate Model Rendering\uff08IMR\uff09\u4f20\u7edf\u6e32\u67d3\u6d41\u7a0b\uff1a\u76f4\u63a5\u5904\u7406\u5230\u50cf\u7d20shader\u7136\u540e\u5199\u5165\u663e\u5b58\u3002\u4f46\u662f\u7531\u4e8ePixel Shader\u4f1a\u9891\u7e41\u8bfb\u53d6DRAM\uff0c\u800cDRAM\u529f\u8017\u8f83\u9ad8 Tile Based Rendering\uff08TBR\uff09\u56e0\u6b64\u5728\u505aDepth Buffer Frame Buffer\u65f6\u5c06\u5c4f\u5e55\u5206\u6210\u591a\u4e2a\u5c0f\u5757\uff0c\u76f4\u63a5\u5c06\u7ed3\u679c\u5199\u5728L1/L2 cache\u4e0a\uff0c\u907f\u514d\u76f4\u63a5\u8bfb\u5199\u53d6DRAM\u3002\u76f8\u6bd4IMR\uff0c\u591a\u4e00\u4e2aTilling\u9636\u6bb5\uff0c\u5219Visibility Test\u548cAlpha Blend\u53ef\u4ee5\u505a\u5728On-Chip\u4e0a Tile Based Deffered Rendering\uff08TBDR\uff09 \u5148\u8ba1\u7b97Depth Test\uff0c\u7136\u540e\u4f7f\u7528Tag Buffer\uff0c\u53ea\u4e0a\u8272\u4e0d\u88ab\u5254\u9664\u7684\u56fe\u5143 GPU Driven \u628aCPU\u4e0a\u7684\u4e00\u4e9b\u5185\u5bb9\u8f6c\u79fb\u5230GPU\u4e0a\u505a\uff0c\u6bd4\u5982\uff1a 1. Comute Shader - UE4 Nanite 2. NV Mesh Shader - \u5ef6\u8fdf\u9876\u70b9\u5904\u7406 - MeshLets \u5149\u8ffd DirectX Ray Tracing\uff08DXR\uff09 NV Turing\uff0cRT Core Battlefield 5 UE4 Real-Time Hybrid Ray Tracing \u5149\u8ffd\u7528\u4e8e\u5904\u7406\u590d\u6742\u7684\u53cd\u5c04\uff0c\u6298\u5c04 \u5176\u4ed6\u666e\u901a\u5185\u5bb9\u4f7f\u7528\u5149\u6805\u5316\u6bd4\u8f83\u597d","title":"\u7b2c\u4e8c\u8bfe \u6e32\u67d3\u7ba1\u7ebf"},{"location":"Estar_Games/Chapter_2/#_1","text":"\u7f51\u6613E\u661f\u8ba1\u5212 \u6e38\u620f\u5f15\u64ce\u8bfe\u7a0b 3\u670824\u65e5","title":"\u7b2c\u4e8c\u8bfe \u6e32\u67d3\u7ba1\u7ebf"},{"location":"Estar_Games/Chapter_2/#gpu","text":"\u57fa\u672c\u529f\u80fd 1. \u56fe\u5f62\u7ed8\u5236 2. \u7269\u7406\u6a21\u62df PhysX 3. \u6d77\u91cf\u8ba1\u7b97 CUDA 4. AI\u8fd0\u7b97 AI Core/Tensor Core","title":"GPU"},{"location":"Estar_Games/Chapter_2/#gpu_1","text":"\u4ee5NVIDIA Fermi\u4e3a\u4f8b \u670916\u4e2a SM \uff08Stream Multiprocessor\uff09 \u6bcf\u4e2aSM 2\u4e2a Warp Scheduler 2\u4e2aDispatch Unit\uff08\u5206\u53d1\u5355\u5143\uff09 2\u4e2aWarp\uff08\u7ebf\u7a0b\u675f\uff09 16\u7ec4LD/ST\uff08\u52a0\u8f7d\u5b58\u50a8\u5355\u5143\uff09 4\u4e2aSFU\uff08\u7279\u6b8a\u51fd\u6570\u5355\u5143\uff09 128KB\u5bc4\u5b58\u5668 64KB Shared Memory / L1 \u7f13\u5b58 Uniform Cache \u5168\u5c40\u7f13\u5b58 \u6bcf\u4e2aWarp 32\u4e2aCore \u6bcf\u4e2aCore 1\u4e2aFPU\uff08\u6d6e\u70b9\u6570\u5355\u5143\uff09 1\u4e2aALU\uff08\u7b97\u6570\u903b\u8f91\u5355\u5143\uff09 \u5b58\u50a8\u67b6\u6784 - \u5206\u79bb\u5f0f\uff1aCPU\u548cGPU\u901a\u8fc7PCI-E\u603b\u7ebf\u901a\u8baf - \u8026\u5408\u5f0f\uff1a\u7531MMU\u8fdb\u884c\u50a8\u5b58\u7ba1\u7406\uff0c\u6bd4\u5982APU\u3001\u6e38\u620f\u4e3b\u673a\u548c\u79fb\u52a8\u8bbe\u5907 \u6bcf\u4e2aSM\u7531\u5bc4\u5b58\u5668\uff0c\u5171\u4eab\u5185\u5b58\uff0cL1\u7f13\u5b58 \u5b58\u53d6\u901f\u5ea6\u4ece\u5bc4\u5b58\u5668\u5230\u663e\u5b58\u4f9d\u6b21\u53d8\u6162\uff0c\u5373\u79bbCore\u8d8a\u8fd1\u8d8a\u9891\u7e41 - \u5bc4\u5b58\u5668 1 \u751f\u547d\u5468\u671f\uff1a\u5355\u4e2a\u7ebf\u7a0b - \u5171\u4eab\u5185\u5b58 1\uff5e32 \u751f\u547d\u5468\u671f\uff1a\u7ebf\u7a0b\u7ec4 - L1\u7f13\u5b58 1\uff5e32 \u751f\u547d\u5468\u671f\uff1a\u5355\u4e2a\u7ebf\u7a0b - L2\u7f13\u5b58 32\uff5e64 \u751f\u547d\u5468\u671f\uff1a\u5355\u4e2a\u7ebf\u7a0b - \u7eb9\u7406\u3001\u5e38\u91cf\u7f13\u5b58 400\uff5e600 \u751f\u547d\u5468\u671f\uff1a\u7528\u6237 - \u5168\u5c40\u5185\u5b58 400\uff5e600 \u751f\u547d\u5468\u671f\uff1a\u7528\u6237","title":"GPU\u67b6\u6784"},{"location":"Estar_Games/Chapter_2/#_2","text":"\u7565","title":"\u6e32\u67d3\u7ba1\u7ebf"},{"location":"Estar_Games/Chapter_2/#_3","text":"\u4ea4\u53c9\u7f16\u8bd1\uff1a\u5199\u4e00\u4efd\u8bed\u8a00\uff0c\u6bd4\u5982HLSL\uff0c\u7f16\u8bd1\u4e3a\u5176\u4ed6\u8bed\u8a00 Unity Shaderlab\u662f\u5c01\u88c5\u8bed\u8a00","title":"\u7740\u8272\u5668"},{"location":"Estar_Games/Chapter_2/#_4","text":"CPU Graphics API PushBuffer GPU Host Interface Front End Primitive Distributor ... 1 \u9996\u5148\u51c6\u5907Vertex Data\uff08Vertex Array / Index Array\uff09 2 \u7a0b\u5e8f\u901a\u8fc7Graphics API\u53d1\u51faDrawCall\u6307\u4ee4\uff0c\u6307\u4ee4\u9001\u5230\u9a71\u52a8\u7a0b\u5e8f\uff0c\u68c0\u6d4b\u5408\u6cd5\u6027\u540e\uff0c\u653e\u5230GPU\u7684PushBuffer\u4e2d 3 \u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u6216\u8c03\u7528flush\u6307\u4ee4\u540e\uff0c\u9a71\u52a8\u7a0b\u5e8f\u5427PushBuffer\u53d1\u9001\u7ed9GPU\uff0cGPU\u901a\u8fc7\u4e3b\u673a\u63a5\u53e3\uff08Host Interface\uff09\u63a5\u53d7\u4e0d\u4e86\u547d\u4ee4\uff0c\u901a\u8fc7\u524d\u7aef\uff08Front End\uff09\u5904\u7406\u6307\u4ee4 4 \u56fe\u5143\u5206\u914d\u5668\uff08Primitive Distributor\uff09\u901a\u8fc7index buffer\u751f\u6210\u4e09\u89d2\u5f62\uff0c\u5c06\u4e09\u89d2\u5f62\u5206\u6279\u6b21\uff08Batches\uff09\u53d1\u7ed9SM 5 \u6bcf\u4e2aSM\u7684Poly Morph Engine\u4f7f\u7528triangle indices\u53d6\u51fa\u4e09\u89d2\u5f62\u6570\u636e\uff0c\u83b7\u53d6\u6570\u636e\u540eSM\u4e2d\u4ee532\u4e2a\u7ebf\u7a0b\u4e3a\u4e00\u7ec4\uff08Warp\uff09\u5904\u7406\u9876\u70b9\u6570\u636e 6 \u4e00\u65e6warp\u5b8c\u6210\u4e86\u6240\u6709vertex shader\u548cgeometry shader\u6307\u4ee4\uff0c\u8fd0\u7b97\u7ed3\u679c\u88ab\u8fdb\u884c\u89c6\u56fe\u8f6c\u6362\uff08View Transform\uff09\uff0c\u4e09\u89d2\u5f62\u88ab\u88c1\u526a\u7136\u540e\u51c6\u5907\u5149\u6805\u5316 Work Distribution Crossbar Raster Engine Attribute Setup PS\uff08Pixel Shader\uff09 / FS\uff08Fragment Shader\uff09 7 \u901a\u8fc7\u5206\u6790\u4e09\u89d2\u5f62\u5360\u7528\u5c4f\u5e55\u9762\u79ef\uff0c\u7531work distribution crossbar\u5206\u53d1\u5230\u4e00\u4e2a\u5230\u591a\u4e2aRaster Engine\u505a\u5149\u6805\u5316 8 \u5c5e\u6027\u8bbe\u7f6e\uff08Attribute Setup\uff09\uff1a\u8ba1\u7b97\u63d2\u503c\uff0c\u5e76\u4fdd\u8bc1\u6570\u636e\u662fpixel shader\u9700\u8981\u7684\u683c\u5f0f 9 \u50cf\u7d20\u7740\u8272\uff08Pixel Shader\uff09\uff0c\u4e00\u822c\u662f2x2\u50cf\u7d20\u5757\u8fdb\u884c\u5904\u7406 Crossbar \u6e32\u67d3\u8f93\u51fa\u5355\u5143\uff08ROP\uff09 Alpha\u6df7\u5408\uff0c\u6a21\u677f\u6d4b\u8bd5\u7b49\u7b49","title":"\u7ed8\u5236\u4e00\u4e2a\u4e09\u89d2\u5f62"},{"location":"Estar_Games/Chapter_2/#_5","text":"","title":"\u62d3\u5c55\u5185\u5bb9"},{"location":"Estar_Games/Chapter_2/#tbdr","text":"Immediate Model Rendering\uff08IMR\uff09\u4f20\u7edf\u6e32\u67d3\u6d41\u7a0b\uff1a\u76f4\u63a5\u5904\u7406\u5230\u50cf\u7d20shader\u7136\u540e\u5199\u5165\u663e\u5b58\u3002\u4f46\u662f\u7531\u4e8ePixel Shader\u4f1a\u9891\u7e41\u8bfb\u53d6DRAM\uff0c\u800cDRAM\u529f\u8017\u8f83\u9ad8 Tile Based Rendering\uff08TBR\uff09\u56e0\u6b64\u5728\u505aDepth Buffer Frame Buffer\u65f6\u5c06\u5c4f\u5e55\u5206\u6210\u591a\u4e2a\u5c0f\u5757\uff0c\u76f4\u63a5\u5c06\u7ed3\u679c\u5199\u5728L1/L2 cache\u4e0a\uff0c\u907f\u514d\u76f4\u63a5\u8bfb\u5199\u53d6DRAM\u3002\u76f8\u6bd4IMR\uff0c\u591a\u4e00\u4e2aTilling\u9636\u6bb5\uff0c\u5219Visibility Test\u548cAlpha Blend\u53ef\u4ee5\u505a\u5728On-Chip\u4e0a","title":"TBDR"},{"location":"Estar_Games/Chapter_2/#tile-based-deffered-renderingtbdr","text":"\u5148\u8ba1\u7b97Depth Test\uff0c\u7136\u540e\u4f7f\u7528Tag Buffer\uff0c\u53ea\u4e0a\u8272\u4e0d\u88ab\u5254\u9664\u7684\u56fe\u5143","title":"Tile Based Deffered Rendering\uff08TBDR\uff09"},{"location":"Estar_Games/Chapter_2/#gpu-driven","text":"\u628aCPU\u4e0a\u7684\u4e00\u4e9b\u5185\u5bb9\u8f6c\u79fb\u5230GPU\u4e0a\u505a\uff0c\u6bd4\u5982\uff1a 1. Comute Shader - UE4 Nanite 2. NV Mesh Shader - \u5ef6\u8fdf\u9876\u70b9\u5904\u7406 - MeshLets","title":"GPU Driven"},{"location":"Estar_Games/Chapter_2/#_6","text":"DirectX Ray Tracing\uff08DXR\uff09 NV Turing\uff0cRT Core Battlefield 5 UE4 Real-Time Hybrid Ray Tracing \u5149\u8ffd\u7528\u4e8e\u5904\u7406\u590d\u6742\u7684\u53cd\u5c04\uff0c\u6298\u5c04 \u5176\u4ed6\u666e\u901a\u5185\u5bb9\u4f7f\u7528\u5149\u6805\u5316\u6bd4\u8f83\u597d","title":"\u5149\u8ffd"},{"location":"Estar_Games/Chapter_3/","text":"\u7b2c\u4e09\u8bfe \u57fa\u7840\u6570\u5b66 \u7f51\u6613E\u661f\u8ba1\u5212 \u6e38\u620f\u5f15\u64ce\u8bfe\u7a0b \u53d8\u6362 \u6295\u5f71\u53d8\u6362\uff084x4\u77e9\u9635\uff09 \u4eff\u5c04\u53d8\u6362\uff083x4\u77e9\u9635\uff09 \u76f8\u4f3c\u53d8\u6362 \u7b49\u6bd4\u7f29\u653e \u6052\u7b49 \u65cb\u8f6c \u5e73\u79fb \u521a\u4f53\u53d8\u6362 \u4e0d\u5305\u542b\u7b49\u6bd4\u7f29\u653e\u7684\u76f8\u4f3c\u53d8\u6362 \u7ebf\u6027\u53d8\u6362\uff08\u4e0d\u5305\u542b\u5e73\u79fb\uff09 \u955c\u50cf \u4fa7\u5207 \u7f29\u653e \u7b49\u6bd4 \u6052\u7b49 \u65cb\u8f6c","title":"\u7b2c\u4e09\u8bfe \u57fa\u7840\u6570\u5b66"},{"location":"Estar_Games/Chapter_3/#_1","text":"\u7f51\u6613E\u661f\u8ba1\u5212 \u6e38\u620f\u5f15\u64ce\u8bfe\u7a0b","title":"\u7b2c\u4e09\u8bfe \u57fa\u7840\u6570\u5b66"},{"location":"Estar_Games/Chapter_3/#_2","text":"\u6295\u5f71\u53d8\u6362\uff084x4\u77e9\u9635\uff09 \u4eff\u5c04\u53d8\u6362\uff083x4\u77e9\u9635\uff09 \u76f8\u4f3c\u53d8\u6362 \u7b49\u6bd4\u7f29\u653e \u6052\u7b49 \u65cb\u8f6c \u5e73\u79fb \u521a\u4f53\u53d8\u6362 \u4e0d\u5305\u542b\u7b49\u6bd4\u7f29\u653e\u7684\u76f8\u4f3c\u53d8\u6362 \u7ebf\u6027\u53d8\u6362\uff08\u4e0d\u5305\u542b\u5e73\u79fb\uff09 \u955c\u50cf \u4fa7\u5207 \u7f29\u653e \u7b49\u6bd4 \u6052\u7b49 \u65cb\u8f6c","title":"\u53d8\u6362"},{"location":"Estar_Games/Chapter_4/","text":"\u7b2c\u4e09\u8bfe \u7eb9\u7406\u7efc\u8ff0 \u7f51\u6613E\u661f\u8ba1\u5212 \u6e38\u620f\u5f15\u64ce\u8bfe\u7a0b \u7eb9\u7406 Texture \u8868\u8c61\u4e0a\u662f\u4f7f\u5f97\u6a21\u578b\u5177\u6709\u66f4\u52a0\u4e30\u5bcc\u7684\u989c\u8272\u548c\u8d28\u611f\uff0c\u672c\u8d28\u4e0a\u662f\u6570\u636e \u603b\u5c3a\u5bf8 = \u5355\u4f4d\u5c3a\u5bf8 * \u6570\u91cf \u7eb9\u7d20\uff08Texel\uff09 = \u7eb9\u7406\uff08Texture\uff09\u7684\u50cf\u7d20\uff08pixel\uff09 \u7eb9\u7406\u7f16\u7801\u6210\u4e3a\u56fe\u50cf\uff0c\u56fe\u50cf\u89e3\u7801\u4e3a\u7eb9\u7406\uff0c\u5373\u5728\u6e32\u67d3\u7ba1\u7ebf\u4e2d\u6210\u4e3a\u7eb9\u7406\u6570\u636e \u7eb9\u7406\u6620\u5c04 Texture Mapping \u5373\u5c06\u7eb9\u7406\u6620\u5c04\u5230\u4e09\u7ef4\u6a21\u578b\u4e0a\uff0c\u5728\u4e09\u89d2\u9762\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528UV\u5750\u6807\u8fdb\u884c\u7eb9\u7406\u6620\u5c04\uff0c\u7136\u540e\u901a\u8fc7\u91cd\u5fc3\u5750\u6807\u8fdb\u884c\u63d2\u503c \u7eb9\u7406\u52a0\u8f7d Texture loading \u4ee5\u4e0b\u662f\u4e24\u4e2a\u5728DX\u4e2d\u4f7f\u7528\u7684Device\u62bd\u8c61 Device\uff1a\u8d44\u6e90\u5904\u7406 Device Context\uff1a\u6e32\u67d3\u64cd\u4f5c \u521b\u5efa\u7eb9\u7406\u63cf\u8ff0 \u521d\u59cb\u5316\u7279\u5f81\u4fe1\u606f \u8bfb\u53d6\u56fe\u7247\u6570\u636e\uff0c\u52a0\u8f7d\u5982\u5185\u5b58 \u521b\u5efa\u548c\u521d\u59cb\u5316\u5bf9\u8c61 ShaderResourceView\u751f\u6210\u5bf9\u5bf9\u8c61\u7684\u63cf\u8ff0 \u7ed1\u5b9a\u6e32\u67d3\u7ba1\u7ebf \u4e0eShader\u5173\u8054 \u7eb9\u7406\u91c7\u6837 Texture Sampling \u5904\u7406\u7eb9\u7406\u5750\u6807\u8d85\u8fc7\u533a\u95f4\u65f6\uff0c\u9700\u8981\u660e\u786eAddress\u7684\u65b9\u6cd5 Address Wrap \u5e73\u94fa\u6a21\u5f0f Address Mirror \u955c\u50cf\u6a21\u5f0f Address Clamp \u88c1\u526a\u6a21\u5f0f Address Border \u8fb9\u7f18\u6a21\u5f0f \u9884\u5148\u8bbe\u7f6e\u8fb9\u7f18\u989c\u8272 \u91c7\u6837\u8fc7\u6ee4 Texture Sampling Filtering Nearest Bilinear minfilter \u5f53\u7eb9\u7406\u9700\u8981\u7f29\u5c0f\u65f6\u7684\u91c7\u6837 magfilter \u5f53\u7eb9\u7406\u9700\u8981\u653e\u5927\u65f6\u7684\u91c7\u6837 \u900f\u89c6\u91c7\u6837 Perspective Sampling Filtering Mip Map \u5904\u7406\u900f\u89c6\u89c6\u89d2\u4e0b\u4e0d\u540c\u8ddd\u79bb\u7684\u7eb9\u7406\u7684\u6e05\u6670\u7a0b\u5ea6\uff0c\u4f7f\u7528\u4e0d\u540c\u5c42\u7ea7\u7684mipmap\u5904\u7406\u4e0d\u540c\u8fdc\u8fd1\u7a0b\u5ea6 \u6cd5\u7ebf\u7eb9\u7406\u7684\u5207\u7ebf\u7a7a\u95f4 Tangent Space of Normal Texture \u4e0b\u9762\u5148\u7ed9\u51fa\u4f2a\u4ee3\u7801\u65b9\u6848\uff1a float3 tangentNormal = tNormalap . Sample ( sNormalSampler , texCoord ). xyz ; tangentNormal = ( 2.0 * tangentNormal ) - 1.0 ; float3 worldNormal . xyz = tangentNormal . x * worldTangent . xyz + tangentNormal . y * worldBinormal . xyz + tangentNormal . z * worldNormal . xyz ; worldNormal . xyz = normalize ( worldNormal ); \u9700\u8981\u8fdb\u884c\u8fd9\u4e00\u6b65\u5904\u7406\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u6cd5\u7ebf\u8d34\u56fe\uff0c\u4f1a\u5ffd\u7565\u6389fragment\u672c\u8eab\u7684\u6cd5\u7ebf\u65b9\u5411\uff0c\u800c\u5bfc\u81f4\u6cd5\u7ebf\u65b9\u5411\u4e0e\u5b9e\u9645\u7684\u6cd5\u7ebf\u65b9\u5411\u4e0d\u540c\u7684\u95ee\u9898\u3002\u6240\u4ee5\uff0c\u6cd5\u7ebf\u8d34\u56fe\u4f7f\u7528\u7684\u5176\u5b9e\u662fTBN\u7a7a\u95f4\uff0c\u5373\u5207\u7ebf\u7a7a\u95f4\u3002\u5373\uff0c\u6cd5\u7ebf\u8d34\u56fe\u7684\u6cd5\u7ebf\u65b9\u5411\u5b9e\u9645\u4e0a\u662f\u5728\u7247\u6bb5\u7684\u6cd5\u7ebf\u65b9\u5411\u7684\u57fa\u7840\u4e0a\u786e\u5b9a\u7684\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0cTBN\u7a7a\u95f4\u5206\u522b\u4e3aTangent\uff0cBitangent\u548cNormal\u4e09\u4e2a\u57fa\u5e95\u7ec4\u6210\u3002 \u90a3\u4e48\uff0c\u7ed9\u5b9a\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u9876\u70b9\u4f4d\u7f6e\u548c\u4e09\u4e2a\u9876\u70b9\u7684\u7eb9\u7406\u5750\u6807\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5207\u7ebf\u7a7a\u95f4\u7684T\u548cB\u57fa\u5e95\u548c\u5b83\u4eec\u5173\u8054\u8d77\u6765,\u5176\u4e2d \\(E_{ix}\\) \u8868\u793a\u7b2ci\u4e2a\u8fb9\uff08Edge\uff09\u7684x\u5206\u91cf\uff1a \\[ E_0 = V_1 - V_0, E_1 = V_2 - V_1, E_2 = V_0 - V_1 \\] \u6211\u4eec\u540c\u6837\u5b9a\u4e49 \\(\\Delta{U}_i\\) \u548c \\(\\Delta{V}_i\\) \u4e3a\u5982\u4e0b\uff1a \\[ \\Delta{U}_0 = U_1 - U_0, \\Delta{V}_0 = V_1 - V_0 , ... \\] \u56e0\u6b64\uff0c\u6211\u4eec\u6709\uff1a \\[ E_0 = \\Delta{U}_0 T + \\Delta{V}_0 B \\\\ E_1 = \\Delta{U}_1 T + \\Delta{V}_1 B \\\\ \\] \u6539\u5199\u4e3a\u77e9\u9635\u5f62\u5f0f\uff1a \\[ \\begin{bmatrix} E_{0x} & E_{0y} & E_{0z} \\\\ E_{1x} & E_{1y} & E_{1z} \\\\ \\end{bmatrix} = \\begin{bmatrix} \\Delta{U}_0 & \\Delta{V}_0 \\\\ \\Delta{U}_1 & \\Delta{V}_1 \\\\ \\end{bmatrix} \\begin{bmatrix} T_x & T_y & T_z \\\\ B_x & B_y & B_z \\\\ \\end{bmatrix} \\] \u77e9\u9635\u53d8\u6362\u540e\u5f97\uff1a $$ \\begin{bmatrix} T_x & T_y & T_z \\ B_x & B_y & B_z \\ \\end{bmatrix} = \\frac{1}{ \\Delta{U} 0 \\Delta{V}_1 - \\Delta{U}_1 \\Delta{U}_0 } \\begin{bmatrix} \\Delta{V}_1 & -\\Delta{V}_0 \\ -\\Delta{U}_1 & \\Delta{U}_0 \\ \\end{bmatrix} \\begin{bmatrix} E {0x} & E_{0y} & E_{0z} \\ E_{1x} & E_{1y} & E_{1z} \\ \\end{bmatrix} $$ \u5176\u4ed6 MRT Multiple Render Targets \u5ef6\u8fdf\u5149\u7167\u6e32\u67d3GBuffer\uff0c\u6536\u96c6\u4e00\u4e9b\u7684\u6e32\u67d3\u4e2d\u95f4\u7ed3\u679c\u518d\u8fdb\u884c\u6e32\u67d3\uff0c\u6bd4\u5982GTA5\u4f7f\u7528\u4e864\u5f20GBuffer\uff08Diffuse\uff0cNormal\uff0cSpecular\uff0cIrradiance\uff09 RWTexture \u53ef\u8bfb\u5199\u7eb9\u7406\uff0c\u518dCompute Shader\u4e2d\u4f7f\u7528 \u5404\u5411\u5f02\u6027\u8fc7\u6ee4 Anisotropic Filtering \u8003\u8651\u76f8\u673a\u4f4d\u7f6e\u3001\u5e73\u9762\u65b9\u5411\u3001\u6cd5\u5411\u7684\u8fc7\u6ee4 \u989c\u8272\u7a7a\u95f4\u548c\u4f3d\u9a6c\u77eb\u6b63 sRGB\u56fe\u7247->\u91c7\u6837\u7ed3\u679c->\u79fb\u9664\u4f3d\u9a6c->\u8ba1\u7b97->\u4f3d\u9a6c\u77eb\u6b63->\u663e\u793a \u7ebf\u6027\u7a7a\u95f4\u56fe\u7247->\u8ba1\u7b97->\u4f3d\u9a6c\u77eb\u6b63->\u663e\u793a","title":"\u7b2c\u4e09\u8bfe \u7eb9\u7406\u7efc\u8ff0"},{"location":"Estar_Games/Chapter_4/#_1","text":"\u7f51\u6613E\u661f\u8ba1\u5212 \u6e38\u620f\u5f15\u64ce\u8bfe\u7a0b","title":"\u7b2c\u4e09\u8bfe \u7eb9\u7406\u7efc\u8ff0"},{"location":"Estar_Games/Chapter_4/#texture","text":"\u8868\u8c61\u4e0a\u662f\u4f7f\u5f97\u6a21\u578b\u5177\u6709\u66f4\u52a0\u4e30\u5bcc\u7684\u989c\u8272\u548c\u8d28\u611f\uff0c\u672c\u8d28\u4e0a\u662f\u6570\u636e \u603b\u5c3a\u5bf8 = \u5355\u4f4d\u5c3a\u5bf8 * \u6570\u91cf \u7eb9\u7d20\uff08Texel\uff09 = \u7eb9\u7406\uff08Texture\uff09\u7684\u50cf\u7d20\uff08pixel\uff09 \u7eb9\u7406\u7f16\u7801\u6210\u4e3a\u56fe\u50cf\uff0c\u56fe\u50cf\u89e3\u7801\u4e3a\u7eb9\u7406\uff0c\u5373\u5728\u6e32\u67d3\u7ba1\u7ebf\u4e2d\u6210\u4e3a\u7eb9\u7406\u6570\u636e","title":"\u7eb9\u7406 Texture"},{"location":"Estar_Games/Chapter_4/#texture-mapping","text":"\u5373\u5c06\u7eb9\u7406\u6620\u5c04\u5230\u4e09\u7ef4\u6a21\u578b\u4e0a\uff0c\u5728\u4e09\u89d2\u9762\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528UV\u5750\u6807\u8fdb\u884c\u7eb9\u7406\u6620\u5c04\uff0c\u7136\u540e\u901a\u8fc7\u91cd\u5fc3\u5750\u6807\u8fdb\u884c\u63d2\u503c","title":"\u7eb9\u7406\u6620\u5c04 Texture Mapping"},{"location":"Estar_Games/Chapter_4/#texture-loading","text":"\u4ee5\u4e0b\u662f\u4e24\u4e2a\u5728DX\u4e2d\u4f7f\u7528\u7684Device\u62bd\u8c61 Device\uff1a\u8d44\u6e90\u5904\u7406 Device Context\uff1a\u6e32\u67d3\u64cd\u4f5c \u521b\u5efa\u7eb9\u7406\u63cf\u8ff0 \u521d\u59cb\u5316\u7279\u5f81\u4fe1\u606f \u8bfb\u53d6\u56fe\u7247\u6570\u636e\uff0c\u52a0\u8f7d\u5982\u5185\u5b58 \u521b\u5efa\u548c\u521d\u59cb\u5316\u5bf9\u8c61 ShaderResourceView\u751f\u6210\u5bf9\u5bf9\u8c61\u7684\u63cf\u8ff0 \u7ed1\u5b9a\u6e32\u67d3\u7ba1\u7ebf \u4e0eShader\u5173\u8054","title":"\u7eb9\u7406\u52a0\u8f7d Texture loading"},{"location":"Estar_Games/Chapter_4/#texture-sampling","text":"\u5904\u7406\u7eb9\u7406\u5750\u6807\u8d85\u8fc7\u533a\u95f4\u65f6\uff0c\u9700\u8981\u660e\u786eAddress\u7684\u65b9\u6cd5 Address Wrap \u5e73\u94fa\u6a21\u5f0f Address Mirror \u955c\u50cf\u6a21\u5f0f Address Clamp \u88c1\u526a\u6a21\u5f0f Address Border \u8fb9\u7f18\u6a21\u5f0f \u9884\u5148\u8bbe\u7f6e\u8fb9\u7f18\u989c\u8272","title":"\u7eb9\u7406\u91c7\u6837 Texture Sampling"},{"location":"Estar_Games/Chapter_4/#texture-sampling-filtering","text":"Nearest Bilinear minfilter \u5f53\u7eb9\u7406\u9700\u8981\u7f29\u5c0f\u65f6\u7684\u91c7\u6837 magfilter \u5f53\u7eb9\u7406\u9700\u8981\u653e\u5927\u65f6\u7684\u91c7\u6837","title":"\u91c7\u6837\u8fc7\u6ee4 Texture Sampling Filtering"},{"location":"Estar_Games/Chapter_4/#perspective-sampling-filtering","text":"","title":"\u900f\u89c6\u91c7\u6837 Perspective Sampling Filtering"},{"location":"Estar_Games/Chapter_4/#mip-map","text":"\u5904\u7406\u900f\u89c6\u89c6\u89d2\u4e0b\u4e0d\u540c\u8ddd\u79bb\u7684\u7eb9\u7406\u7684\u6e05\u6670\u7a0b\u5ea6\uff0c\u4f7f\u7528\u4e0d\u540c\u5c42\u7ea7\u7684mipmap\u5904\u7406\u4e0d\u540c\u8fdc\u8fd1\u7a0b\u5ea6","title":"Mip Map"},{"location":"Estar_Games/Chapter_4/#tangent-space-of-normal-texture","text":"\u4e0b\u9762\u5148\u7ed9\u51fa\u4f2a\u4ee3\u7801\u65b9\u6848\uff1a float3 tangentNormal = tNormalap . Sample ( sNormalSampler , texCoord ). xyz ; tangentNormal = ( 2.0 * tangentNormal ) - 1.0 ; float3 worldNormal . xyz = tangentNormal . x * worldTangent . xyz + tangentNormal . y * worldBinormal . xyz + tangentNormal . z * worldNormal . xyz ; worldNormal . xyz = normalize ( worldNormal ); \u9700\u8981\u8fdb\u884c\u8fd9\u4e00\u6b65\u5904\u7406\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u6cd5\u7ebf\u8d34\u56fe\uff0c\u4f1a\u5ffd\u7565\u6389fragment\u672c\u8eab\u7684\u6cd5\u7ebf\u65b9\u5411\uff0c\u800c\u5bfc\u81f4\u6cd5\u7ebf\u65b9\u5411\u4e0e\u5b9e\u9645\u7684\u6cd5\u7ebf\u65b9\u5411\u4e0d\u540c\u7684\u95ee\u9898\u3002\u6240\u4ee5\uff0c\u6cd5\u7ebf\u8d34\u56fe\u4f7f\u7528\u7684\u5176\u5b9e\u662fTBN\u7a7a\u95f4\uff0c\u5373\u5207\u7ebf\u7a7a\u95f4\u3002\u5373\uff0c\u6cd5\u7ebf\u8d34\u56fe\u7684\u6cd5\u7ebf\u65b9\u5411\u5b9e\u9645\u4e0a\u662f\u5728\u7247\u6bb5\u7684\u6cd5\u7ebf\u65b9\u5411\u7684\u57fa\u7840\u4e0a\u786e\u5b9a\u7684\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0cTBN\u7a7a\u95f4\u5206\u522b\u4e3aTangent\uff0cBitangent\u548cNormal\u4e09\u4e2a\u57fa\u5e95\u7ec4\u6210\u3002 \u90a3\u4e48\uff0c\u7ed9\u5b9a\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u9876\u70b9\u4f4d\u7f6e\u548c\u4e09\u4e2a\u9876\u70b9\u7684\u7eb9\u7406\u5750\u6807\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5207\u7ebf\u7a7a\u95f4\u7684T\u548cB\u57fa\u5e95\u548c\u5b83\u4eec\u5173\u8054\u8d77\u6765,\u5176\u4e2d \\(E_{ix}\\) \u8868\u793a\u7b2ci\u4e2a\u8fb9\uff08Edge\uff09\u7684x\u5206\u91cf\uff1a \\[ E_0 = V_1 - V_0, E_1 = V_2 - V_1, E_2 = V_0 - V_1 \\] \u6211\u4eec\u540c\u6837\u5b9a\u4e49 \\(\\Delta{U}_i\\) \u548c \\(\\Delta{V}_i\\) \u4e3a\u5982\u4e0b\uff1a \\[ \\Delta{U}_0 = U_1 - U_0, \\Delta{V}_0 = V_1 - V_0 , ... \\] \u56e0\u6b64\uff0c\u6211\u4eec\u6709\uff1a \\[ E_0 = \\Delta{U}_0 T + \\Delta{V}_0 B \\\\ E_1 = \\Delta{U}_1 T + \\Delta{V}_1 B \\\\ \\] \u6539\u5199\u4e3a\u77e9\u9635\u5f62\u5f0f\uff1a \\[ \\begin{bmatrix} E_{0x} & E_{0y} & E_{0z} \\\\ E_{1x} & E_{1y} & E_{1z} \\\\ \\end{bmatrix} = \\begin{bmatrix} \\Delta{U}_0 & \\Delta{V}_0 \\\\ \\Delta{U}_1 & \\Delta{V}_1 \\\\ \\end{bmatrix} \\begin{bmatrix} T_x & T_y & T_z \\\\ B_x & B_y & B_z \\\\ \\end{bmatrix} \\] \u77e9\u9635\u53d8\u6362\u540e\u5f97\uff1a $$ \\begin{bmatrix} T_x & T_y & T_z \\ B_x & B_y & B_z \\ \\end{bmatrix} = \\frac{1}{ \\Delta{U} 0 \\Delta{V}_1 - \\Delta{U}_1 \\Delta{U}_0 } \\begin{bmatrix} \\Delta{V}_1 & -\\Delta{V}_0 \\ -\\Delta{U}_1 & \\Delta{U}_0 \\ \\end{bmatrix} \\begin{bmatrix} E {0x} & E_{0y} & E_{0z} \\ E_{1x} & E_{1y} & E_{1z} \\ \\end{bmatrix} $$","title":"\u6cd5\u7ebf\u7eb9\u7406\u7684\u5207\u7ebf\u7a7a\u95f4 Tangent Space of Normal Texture"},{"location":"Estar_Games/Chapter_4/#_2","text":"","title":"\u5176\u4ed6"},{"location":"Estar_Games/Chapter_4/#mrt-multiple-render-targets","text":"\u5ef6\u8fdf\u5149\u7167\u6e32\u67d3GBuffer\uff0c\u6536\u96c6\u4e00\u4e9b\u7684\u6e32\u67d3\u4e2d\u95f4\u7ed3\u679c\u518d\u8fdb\u884c\u6e32\u67d3\uff0c\u6bd4\u5982GTA5\u4f7f\u7528\u4e864\u5f20GBuffer\uff08Diffuse\uff0cNormal\uff0cSpecular\uff0cIrradiance\uff09","title":"MRT Multiple Render Targets"},{"location":"Estar_Games/Chapter_4/#rwtexture","text":"\u53ef\u8bfb\u5199\u7eb9\u7406\uff0c\u518dCompute Shader\u4e2d\u4f7f\u7528","title":"RWTexture"},{"location":"Estar_Games/Chapter_4/#anisotropic-filtering","text":"\u8003\u8651\u76f8\u673a\u4f4d\u7f6e\u3001\u5e73\u9762\u65b9\u5411\u3001\u6cd5\u5411\u7684\u8fc7\u6ee4","title":"\u5404\u5411\u5f02\u6027\u8fc7\u6ee4 Anisotropic Filtering"},{"location":"Estar_Games/Chapter_4/#_3","text":"sRGB\u56fe\u7247->\u91c7\u6837\u7ed3\u679c->\u79fb\u9664\u4f3d\u9a6c->\u8ba1\u7b97->\u4f3d\u9a6c\u77eb\u6b63->\u663e\u793a \u7ebf\u6027\u7a7a\u95f4\u56fe\u7247->\u8ba1\u7b97->\u4f3d\u9a6c\u77eb\u6b63->\u663e\u793a","title":"\u989c\u8272\u7a7a\u95f4\u548c\u4f3d\u9a6c\u77eb\u6b63"},{"location":"Games_104/Chapter_1/","text":"Games 104 Chapter 1 Modern Game Engine - From Getting Started To Practice https://www.bilibili.com/video/BV1oU4y1R7Km Lecturer: Xi Wang History Early Age From early age of Games, there's no such concepts as Game Engine. Developers were mainly dealing with limited memory and performance. A Golden Age of Game Dev. Father of Game Engine -> John Carmack Wolfenstein 3D (1992) Doom Licensed his engine to Raven -> ShadowCaster Concept: Separating execution of core functionality by the game engine from the creative assets. Quake -> OpenGL on Graphics Card -> full real-time 3D rendering / Network sync !! Driving Force for Game Engine Dev -> Hardware Developement Current Age Zoo of Game Engine: Commercial Engine: Unreal, Unity, CryEngine In-house Engine: Frostbite, Source, Rage, Infinity Ward Free Engine: Stride, Godot, O3DE (Light Weight) Middlewares: Physics & Animation: Havoc, PhysX Sound: Wise Rendering: True Sky, Enlighten Other: Speedtree (lord of ring), Simplygon What's Game Engine Techonology Foundation of Matrix Define the differences between real and unreal, true world and virtual world Productivity Tools of Creation Art of Complexity imperfect, compromises Complex, but basic simulation by 0/1 (Turing machine) Computer Graphisc takes only 10% of the Game Engine Real-time God with Limited Power in Realtime Frame Rate Hardware power Toolchain Massive Toolchain for creators from difference background and ability (Artist, Designer, Other Programmers) Developer Platform for Programmer -> Expandable API for Studio -> Collaborate hundreds of developers smoothly On Fly update the engine on the fly ~ just like replace the whole plane on the flight Understand the Flow How to Study Focus on the Framework !! Source Syllabus Basic Elements (Structure and Layer, Data Organization and Management :: MVVM) Rendering (Model, Material, Shader, Texture, Light, Shadow, Render Pipeline, Sky, Terrain) Culling -> Rendering -> Post-processing Deffered Rendering, Forward Rendering Animation (Basic Concepts, Animation Structure, Pipeline) Physics (Gameplay Applications, Performance Optimization) Gameplay \uff08Event System, Script System, Graph Driven) Misc System (VFX, Navigation, Camera) Tool Set C++ Reflection -> expose variables and function to be used in editor Data Schema (Upgradable, Extendable) Online Gaming (Lockstep Sync, State Sync, Consistency) Advanced Tech Motion Matching (matching and searching) Procedural Content Generation (PCG) Data-Oriented Programming (DOP) (Multi-core structure) Job System (Multi-core structure) Lumen (Unreal5's new fully dynamic global illumination & reflection system ) Nanite (UE5's new virtualized geometry system )","title":"Games 104 Chapter 1"},{"location":"Games_104/Chapter_1/#games-104-chapter-1","text":"Modern Game Engine - From Getting Started To Practice https://www.bilibili.com/video/BV1oU4y1R7Km Lecturer: Xi Wang","title":"Games 104 Chapter 1"},{"location":"Games_104/Chapter_1/#history","text":"","title":"History"},{"location":"Games_104/Chapter_1/#early-age","text":"From early age of Games, there's no such concepts as Game Engine. Developers were mainly dealing with limited memory and performance. A Golden Age of Game Dev. Father of Game Engine -> John Carmack Wolfenstein 3D (1992) Doom Licensed his engine to Raven -> ShadowCaster Concept: Separating execution of core functionality by the game engine from the creative assets. Quake -> OpenGL on Graphics Card -> full real-time 3D rendering / Network sync !! Driving Force for Game Engine Dev -> Hardware Developement","title":"Early Age"},{"location":"Games_104/Chapter_1/#current-age","text":"Zoo of Game Engine: Commercial Engine: Unreal, Unity, CryEngine In-house Engine: Frostbite, Source, Rage, Infinity Ward Free Engine: Stride, Godot, O3DE (Light Weight) Middlewares: Physics & Animation: Havoc, PhysX Sound: Wise Rendering: True Sky, Enlighten Other: Speedtree (lord of ring), Simplygon","title":"Current Age"},{"location":"Games_104/Chapter_1/#whats-game-engine","text":"Techonology Foundation of Matrix Define the differences between real and unreal, true world and virtual world Productivity Tools of Creation Art of Complexity imperfect, compromises Complex, but basic simulation by 0/1 (Turing machine) Computer Graphisc takes only 10% of the Game Engine","title":"What's Game Engine"},{"location":"Games_104/Chapter_1/#real-time","text":"God with Limited Power in Realtime Frame Rate Hardware power","title":"Real-time"},{"location":"Games_104/Chapter_1/#toolchain","text":"Massive Toolchain for creators from difference background and ability (Artist, Designer, Other Programmers) Developer Platform for Programmer -> Expandable API for Studio -> Collaborate hundreds of developers smoothly","title":"Toolchain"},{"location":"Games_104/Chapter_1/#on-fly","text":"update the engine on the fly ~ just like replace the whole plane on the flight Understand the Flow","title":"On Fly"},{"location":"Games_104/Chapter_1/#how-to-study","text":"Focus on the Framework !! Source Syllabus Basic Elements (Structure and Layer, Data Organization and Management :: MVVM) Rendering (Model, Material, Shader, Texture, Light, Shadow, Render Pipeline, Sky, Terrain) Culling -> Rendering -> Post-processing Deffered Rendering, Forward Rendering Animation (Basic Concepts, Animation Structure, Pipeline) Physics (Gameplay Applications, Performance Optimization) Gameplay \uff08Event System, Script System, Graph Driven) Misc System (VFX, Navigation, Camera) Tool Set C++ Reflection -> expose variables and function to be used in editor Data Schema (Upgradable, Extendable) Online Gaming (Lockstep Sync, State Sync, Consistency) Advanced Tech Motion Matching (matching and searching) Procedural Content Generation (PCG) Data-Oriented Programming (DOP) (Multi-core structure) Job System (Multi-core structure) Lumen (Unreal5's new fully dynamic global illumination & reflection system ) Nanite (UE5's new virtualized geometry system )","title":"How to Study"},{"location":"Games_104/Chapter_2/","text":"Games 104 Chapter 2 Modern Game Engine - From Getting Started To Practice https://www.bilibili.com/video/BV1oU4y1R7Km Lecturer: Xi Wang Layered Architecture of Game Engine Tool Layer Function Layer Rendering, Animation, Gameplay ... Resource Layer Core Layer Thread Pool, Memory Allocation, Math, Container Platform Layer Why Layaered Decoupling and Reducing Complexity Independent Response for Evolving Demands Upper -> evolve fast Lower -> Stable with Middleware and 3rd Party Libraries Animated Character as Example Resource Layer Assets - Unify file format, Engine friendly file format - A composite file to refer to all resource - GUID, a unique identifier Manage - Handle system - Life Cycle - Garbage Collection, Deferred Loading Function Layer boundry is blurred between Engine and Specific Game One Tick a cycle TickLogic Camera Motor Controller Animation Physics ... TickRender RenderCamera culling rendering postprocessing present Multi-Threading Fixed Thread Mainstream -> Thread Fork/Join JOB System -> Atomic Jobs distributtion (More Adcanced, but hard to achieve) Core Layer Math Lib (mainly linear algebra) Math Efficiency (Carmack's) SIMD Data Structure and Containers Array Link List Queue Heap Tree Graph Stack Hashing Memory Management put all data together data are in order access data together Platform Layer Render Hardware Interface (RHI) layer connect to -> OpenGL, DirectX, Vulcan ... Hardware Architecture Tool Layer Editors DCC - Digital Content Creation Asset Conditioning Pipeline (FBX, USD) Other Software -> Our Engine","title":"Games 104 Chapter 2"},{"location":"Games_104/Chapter_2/#games-104-chapter-2","text":"Modern Game Engine - From Getting Started To Practice https://www.bilibili.com/video/BV1oU4y1R7Km Lecturer: Xi Wang","title":"Games 104 Chapter 2"},{"location":"Games_104/Chapter_2/#layered-architecture-of-game-engine","text":"Tool Layer Function Layer Rendering, Animation, Gameplay ... Resource Layer Core Layer Thread Pool, Memory Allocation, Math, Container Platform Layer","title":"Layered Architecture of Game Engine"},{"location":"Games_104/Chapter_2/#why-layaered","text":"Decoupling and Reducing Complexity Independent Response for Evolving Demands Upper -> evolve fast Lower -> Stable with Middleware and 3rd Party Libraries","title":"Why Layaered"},{"location":"Games_104/Chapter_2/#animated-character-as-example","text":"","title":"Animated Character as Example"},{"location":"Games_104/Chapter_2/#resource-layer","text":"Assets - Unify file format, Engine friendly file format - A composite file to refer to all resource - GUID, a unique identifier Manage - Handle system - Life Cycle - Garbage Collection, Deferred Loading","title":"Resource Layer"},{"location":"Games_104/Chapter_2/#function-layer","text":"boundry is blurred between Engine and Specific Game One Tick a cycle TickLogic Camera Motor Controller Animation Physics ... TickRender RenderCamera culling rendering postprocessing present Multi-Threading Fixed Thread Mainstream -> Thread Fork/Join JOB System -> Atomic Jobs distributtion (More Adcanced, but hard to achieve)","title":"Function Layer"},{"location":"Games_104/Chapter_2/#core-layer","text":"Math Lib (mainly linear algebra) Math Efficiency (Carmack's) SIMD Data Structure and Containers Array Link List Queue Heap Tree Graph Stack Hashing Memory Management put all data together data are in order access data together","title":"Core Layer"},{"location":"Games_104/Chapter_2/#platform-layer","text":"Render Hardware Interface (RHI) layer connect to -> OpenGL, DirectX, Vulcan ... Hardware Architecture","title":"Platform Layer"},{"location":"Games_104/Chapter_2/#tool-layer","text":"Editors DCC - Digital Content Creation Asset Conditioning Pipeline (FBX, USD) Other Software -> Our Engine","title":"Tool Layer"},{"location":"Polygon_Mesh_Processing/surface_presentation/","text":"Surface Presentation Polygon Mesh Processing","title":"Surface Presentation"},{"location":"Polygon_Mesh_Processing/surface_presentation/#surface-presentation","text":"Polygon Mesh Processing","title":"Surface Presentation"},{"location":"Real-time_Rendering/Chapter_1/","text":"Real Time Rendering Note # 1 \u6e32\u67d3\u7ba1\u7ebf \u5e94\u7528\u9636\u6bb5\uff08Application Stage\uff09 \u4e00\u822c\u8fd9\u4e00\u9636\u6bb5\u5728CPU\u4e0a\u8fdb\u884c\u76f8\u5bf9\u590d\u6742\u7684\u8ba1\u7b97\u3002\u4e3b\u8981\u8d23\u4efb\u662f\u4e3a\u540e\u9762\u7684\u6d41\u7a0b\u8f93\u51fa\u56fe\u5143\uff0c\u4e5f\u5c31\u662f\u70b9\u3001\u7ebf\u548c\u4e09\u89d2\u9762\u7b49\u7b49\u4fe1\u606f\u3002 \u51e0\u4f55\u5904\u7406\uff08Geometry Processing\uff09 \u51e0\u4f55\u5904\u7406\u7531\u56db\u4e2a\u9636\u6bb5\u6784\u6210\uff1a\u9876\u70b9\u7740\u8272\u3001\u6295\u5f71\uff08Projection\uff09\u3001\u88c1\u526a\uff08Clipping\uff09\u548c\u5c4f\u5e55\u6620\u5c04\uff08Screen mapping\uff09\u3002 1 \u9876\u70b9\u7740\u8272\uff08Vertex Shader\uff09 \u5bf9\u4e8eshader\u548cshading\u8fd9\u4e24\u4e2a\u76f8\u4f3c\uff0c\u76f8\u5173\u4f46\u53c8\u6709\u6240\u533a\u522b\u7684\u6982\u5ff5\uff0c\u8fd8\u662f\u9700\u8981\u8fdb\u884c\u4e00\u4e0b\u7504\u522b\uff1ashader\u662f\u4e00\u79cd\u53ef\u7f16\u7a0b\u5355\u5143\uff0c\u5f80\u5f80\u8fd0\u884c\u5728GPU\u4e2d\uff1bshading\u66f4\u591a\u5219\u8ba4\u4e3a\u662f\u5bf9\u56fe\u50cf\u7684\u7ed8\u5236\u4ee5\u53ca\u5448\u73b0\u3002 \u9876\u70b9\u7740\u8272\u5668\u6709\u4e24\u5927\u4efb\u52a1\uff1a \u8ba1\u7b97\u9876\u70b9\u7684\u4f4d\u7f6e\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u5728\u8fd9\u4e00\u6b65\u91cc\u5c06\u9876\u70b9\u4ecemodel\u5750\u6807\u7cfb\u8f6c\u6362\u5230view\u5750\u6807\u7cfb\u3002\u8fd9\u4e00\u6b65\u4e00\u822c\u662f\u901a\u8fc7\u5e94\u7528\u4e24\u4e2atransform\uff0c\u4e5f\u5c31\u662fmodel matrix\u548cview matrix\u3002 \u8ba1\u7b97\u9700\u8981\u5728\u9876\u70b9\u4e2d\u8f93\u51fa\u7684\u4fe1\u606f\u3002\u4e3a\u4e86\u5f97\u5230\u597d\u7684\u6e32\u67d3\u6548\u679c\uff0c\u9876\u70b9\u4e2d\u4f1a\u5305\u542b\u8bb8\u591a\u5c06\u5e94\u7528\u5728\u540e\u7eed\u6d41\u7a0b\u4e0a\u7684\u6570\u636e\uff0c\u6bd4\u5982\u6cd5\u7ebf\u3001\u989c\u8272\u3001\u6750\u8d28\u7b49\u7b49\u3002 \u6b64\u5916\uff0c\u5728\u88c1\u526a\uff08clipping\uff09\u524d\uff0c\u4e00\u822cvertex shader\u4e2d\u8fd8\u4f1a\u8fdb\u884cproject\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u5e94\u7528\u4e00\u4e2a\u6295\u5f71\u77e9\u9635\uff08\u6b63\u4ea4\u6295\u5f71\u6216\u8005\u900f\u89c6\u6295\u5f71\uff09\u3002\u6700\u7ec8\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u56db\u7ef4\u5411\u91cf\uff0c\u4e5f\u5c31\u662f\u9f50\u6b21\u5750\u6807\uff0c\u4fbf\u4e8e\u540e\u7eed\u7684\u5904\u7406\u3002\u5176\u4e2d\uff0cz\u5750\u6807\u50a8\u5b58\u5728z-buffer\u4e2d\uff0cw\u5750\u6807\u5219\u5c06\u88ab\u7528\u4e8e\u900f\u89c6\u9664\u6cd5\u3002\u8fd9\u90e8\u5206\u5c06\u5728\u4e0b\u4e00\u7ae0\u8be6\u7ec6\u4ecb\u7ecd\u3002 2 \u53ef\u9009\u9636\u6bb5 \u6b64\u5916\uff0c\u5728\u9876\u70b9\u7740\u8272\u9636\u6bb5\u4e4b\u540e\uff0cReal Time Rendering\u8fd8\u63cf\u8ff0\u4e86\u4e00\u4e9b\u53ef\u9009\u7684\u9636\u6bb5\uff0c\u5305\u62ec\uff1a\u66f2\u9762\u7ec6\u5206\uff08tessellation\uff09\u3001\u51e0\u4f55\u7740\u8272\u5668\uff08geometry shader\uff09\u548c\u8f93\u51fa\u6d41\uff08stream output\uff09\u3002\u5176\u4e2d\uff0c\u66f2\u9762\u7ec6\u5206\u7c7b\u4f3cLoD\uff0c\u662f\u5728Vertex Shader\u4e4b\u540e\u6839\u636e\u5728View Coordinates\u4e2d\u4e0e\u76f8\u673a\u7684\u8fdc\u8fd1\uff0c\u6765\u5bf9\u66f2\u9762\u56fe\u5143\u8fdb\u884c\u7ec6\u5206\u3002\u66f2\u9762\u7ec6\u5206\u9636\u6bb5\u5206\u4e3ahull shader\uff0ctessellator\u548cand domain shader\u3002\u63a5\u4e0b\u6765\u662f\u51e0\u4f55\u7740\u8272\u5668\uff0c\u8fd9\u4e2a\u9636\u6bb5\u662f\u5bf9\u56fe\u5143\u8fdb\u884c\u5904\u7406\u751f\u6210\u65b0\u7684\u9876\u70b9\u6570\u636e\u3002\u6bd4\u5982\uff0c\u6700\u5e38\u7528\u4e0e\u7c92\u5b50\u7684\u751f\u6210\uff0c\u6bd4\u5982\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u53ea\u5305\u542b\u4e00\u4e2a\u9876\u70b9\u7684\u7c92\u5b50\uff0c\u51e0\u4f55\u7740\u8272\u5668\u5c06\u5176\u5c55\u5f00\uff08\u751f\u6210\uff09\u4e3a\u7531\u4e24\u4e2a\u4e09\u89d2\u9762\u6784\u6210\u7684\uff0c\u7c7b\u4f3c\u5e7f\u544a\u7248\uff08billboard\uff09\u7684\u7ed3\u6784\uff0c\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u7ba1\u7ebf\u3002\u8fd9\u6837\uff0c\u4f7f\u5f97\u7c92\u5b50\u5728\u540e\u7eed\u7684\u6e32\u67d3\u8fc7\u7a0b\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u5904\u7406\u3002\u6700\u540e\u4e00\u4e2a\u53ef\u9009\u9636\u6bb5\u662f\u8f93\u51fa\u6d41\uff0c\u4e5f\u5c31\u662f\u5c06\u4e00\u90e8\u5206GPU\u4e2d\u7684\u6570\u636e\u8f93\u51fa\u5230CPU\u4e2d\u8fdb\u884c\u5904\u7406\uff08\u540c\u6837\uff0c\u5728\u7c92\u5b50\u6a21\u62df\u4e2d\u5e94\u7528\uff09\u3002 3 \u88c1\u526a\uff08Clipping\uff09 \u88c1\u526a\u9636\u6bb5\u5c31\u662f\u5c06\u90e8\u5206\u548c\u5b8c\u5168\u4e0d\u5728view volume\u5185\u7684\u56fe\u5143\u8fdb\u884c\u5904\u7406\u3002\u5b8c\u5168\u4e0d\u5728view volume\u5185\u7684\u56fe\u5143\u8fdb\u884c\u820d\u5f03\uff0c\u800c\u90e8\u5206\u5728view volume\u5185\u7684\u56fe\u5143\u5219\u8fdb\u884c\u5904\u7406\uff0c\u5373\u751f\u6210\u65b0\u7684\u843d\u5728view volume\u8fb9\u7f18\u7684\u8282\u70b9\uff0c\u5e76\u4fdd\u7559\u539f\u59cb\u56fe\u5143\u7684\u5f62\u72b6\u3002 4 \u5c4f\u5e55\u6620\u5c04\uff08Screen Mapping\uff09 \u5728\u5c4f\u5e55\u6620\u5c04\u9636\u6bb5\uff0c\u5c06\u88c1\u526a\u540e\u7684\u56fe\u5143\u5750\u6807\u8fdb\u884c\u91cd\u65b0\u6620\u5c04\u3002xy\u5750\u6807\u88ab\u91cd\u65b0\u6620\u5c04\u4e3a \\(x\\in[x1, x2],y\\in[y_1, y_2]\\) \u4e5f\u5c31\u662f\u5c4f\u5e55\u7684\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u5750\u6807\u3002\u800cz\u5750\u6807\uff0c\u4e5f\u79f0\u4e3a\uff08window coordinates\uff09\u88ab\u6620\u5c04\u4e3a0\u52301\u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\uff0c\u6216\u8005-1\u52301\uff0c\u6839\u636e\u4e0d\u540c\u7684API\u6709\u7740\u4e0d\u540c\u7684\u5177\u4f53\u5b9e\u73b0\uff08OpenGL\u548cDirectX\u5c31\u6709\u7740\u4e0d\u540c\u7684\u5b9e\u73b0\uff09\u3002 \u800c\u5bf9\u4e8e\u6d6e\u70b9\u5750\u6807\u548c\u6574\u6570\u5750\u6807\u7684\u8f6c\u6362\uff0c\u6211\u4eec\u6709\uff1a $$ d = floor(f) \\ f = d + 0.5 $$ \u5220\u683c\u5316\uff08Rasterization\uff09 \u5220\u683c\u5316\u5c06\u7ecf\u8fc7\u8f6c\u6362\u7684\u4e09\u7ef4\u5750\u6807\u548c\u6bcf\u4e2a\u9876\u70b9\u7684\u6e32\u67d3\u6570\u636e\u8f6c\u5316\u4e3a\u5c4f\u5e55\u4e0a\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\uff0c\u5927\u81f4\u5206\u4e3a\u4e24\u4e2a\u8fc7\u7a0b\uff08\u56fe\u5143\u7ec4\u88c5\u548c\u4e09\u89d2\u5f62\u904d\u5386\uff09\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5224\u65ad\u4e00\u4e2a\u50cf\u7d20\u662f\u5426\u4f4d\u4e8e\u4e00\u4e2a\u4e09\u89d2\u5f62\u5185\uff0c\u53ef\u4ee5\u91c7\u7528\u6700\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u5373\uff0c\u91c7\u6837\u50cf\u7d20\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u5224\u65ad\u5176\u662f\u5426\u4f4d\u4e8e\u4e09\u89d2\u5f62\u5185\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f7f\u7528\u8d85\u5206\u8fa8\u7387\u7b97\u6cd5\u6216\u8005\u53cd\u8d70\u6837\uff08Anti-aliasing\uff09\u7b97\u6cd5\uff0c\u5219\u4f1a\u91c7\u6837\u8d85\u8fc7\u4e00\u4e2a\u70b9\u8fdb\u884c\u5224\u65ad\u3002\u6b64\u5916\uff0c\u5224\u65ad\u8be5\u50cf\u7d20\u4f4d\u4e8e\u4e09\u89d2\u5f62\u5185\u90e8\u7684\u6bd4\u4f8b\u4e5f\u662f\u4e00\u79cd\u65b9\u6cd5\u3002 1 \u56fe\u5143\u7ec4\u88c5\uff08primitive assembly\uff09 \u56fe\u5143\u7ec4\u88c5\u4e5f\u53ef\u4ee5\u53eb\u505a\u51c6\u5907\u4e09\u89d2\u5f62\uff08triangle setup\uff09\uff0c\u5728\u8fd9\u4e00\u6b65\u5c06\u8ba1\u7b97\u4e00\u4e9b\u524d\u7f6e\u6570\u636e\uff0c\u6bd4\u5982\u4e00\u4e9b\u5fae\u5206\u7ed3\u679c\u3001\u4e09\u89d2\u5f62\u7684\u8fb9\u65b9\u7a0b\u7b49\u7b49\u3002\u8fd9\u4e9b\u6570\u636e\u4e00\u822c\u662f\u4e3a\u4e0b\u4e00\u6b65\uff0c\u6216\u8005\u4e00\u4e9b\u9876\u70b9\u6570\u636e\u7684\u63d2\u503c\u505a\u51c6\u5907\u3002 2 \u4e09\u89d2\u5f62\u904d\u5386\uff08triangle traversal\uff09 \u5728\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u904d\u5386\u6240\u6709\u5904\u4e8e\u4e09\u89d2\u5f62\u5185\u7684\u50cf\u7d20\u70b9\uff0c\u751f\u6210\u4e00\u4e2a\u7247\u6bb5\uff08fragment\uff09\u3002\u5e76\u5c06\u7528\u4e8e\u751f\u6210\u8be5\u50cf\u7d20\u70b9\u63d2\u503c\u7684\u6570\u636e\u4f20\u9012\u7ed9\u7247\u6bb5\u7740\u8272\u5668\u3002\u7136\u540e\uff0c\u8fd9\u4e00\u9636\u6bb5\u7684\u7ed3\u679c\u5c06\u88ab\u9001\u5f80\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c\u5373\u50cf\u7d20\u5904\u7406\u9636\u6bb5\u3002 \u50cf\u7d20\u5904\u7406\uff08Pixel processing\uff09 \u8fd9\u91cc\uff0cReal-Time Rendering\u8fd9\u672c\u4e66\u5c06\u50cf\u7d20\u5904\u7406\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u662f\u50cf\u7d20\u7740\u8272\uff08Pixel Shading\uff09\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5408\u5e76\uff08Merging\uff09 1 \u50cf\u7d20\u7740\u8272 \u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662fOpenGL\u4e2d\u6240\u8c13\u7684fragment shader\uff0c\u7528\u4e8e\u8f93\u51fa\u67d0\u4e00\u50cf\u7d20\u7684\u989c\u8272\uff08\u5355\u4e2a\u6216\u591a\u4e2a\uff09\u3002\u8fd9\u4e00\u6d41\u7a0b\u4e00\u822c\u5728\u53ef\u7f16\u7a0b\u7684GPU\u6838\u5fc3\u4e0a\u8fd0\u884c\uff0c\u5e76\u4e14\u76ee\u524d\u5728\u8fd9\u4e00\u9636\u6bb5\u4e2d\u5b58\u5728\u591a\u79cd\u7b97\u6cd5\uff0c\u4e5f\u80fd\u6e32\u67d3\u51fa\u8bb8\u591a\u4e0d\u540c\u7684\u6548\u679c\u3002 2 \u5408\u5e76 \u8fd9\u4e00\u9636\u6bb5\u4e5f\u79f0\u4e3a ROP\uff08raster operations pipeline\uff09 \u6216\u8005render output unit\u3002\u8fd9\u65f6\u5019\uff0c\u989c\u8272\u4fe1\u606f\u88ab\u50a8\u5b58\u5728color buffer\u4e2d\uff0c\u800c\u6df1\u5ea6\u4fe1\u606f\uff0c\u50a8\u5b58\u5728depth buffer\u4e2d\uff0c\u4e5f\u5c31\u662fz-buffer\u3002z-buffer\u548ccolor buffer\u6709\u76f8\u540c\u7684\u5927\u5c0f\u3002z-buffer\u7528\u4e8e\u63a7\u5236\u8be5\u50cf\u7d20\u662f\u5426\u9700\u8981\u88ab\u65b0\u7684\u50cf\u7d20\u8986\u76d6\uff0c\u4ee5\u53ca\u7528\u4e8e\u6267\u884c\u4e00\u4e9b\u76f8\u5173\u7684\u7b97\u6cd5\u3002\u4f46\u662fz-buffer\u7684\u5f31\u9879\u662f\u5bf9\u900f\u660e\u6216\u534a\u900f\u660e\u7269\u4f53\u7684\u5904\u7406\uff0c\u8fd9\u5f80\u5f80\u9700\u8981\u6309\u987a\u5e8f\u4ece\u8fdc\u5230\u8fd1\u8fdb\u884c\u7ed8\u5236\uff0c\u6216\u8005\u4f7f\u7528\u5176\u4ed6\u7684\u7b97\u6cd5\u3002 \u6b64\u5916\uff0c\u5728color buffer\u4e2d\u4e5f\u53ef\u80fd\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u901a\u9053\uff0c\u6bd4\u5982alpha\u901a\u9053\u3002\u4f46\u662f\uff0c\u73b0\u5728\u7684\u6e32\u67d3\u7ba1\u7ebf\u4e2d\uff0calpha\u6d4b\u8bd5\u53ef\u4ee5\u5728fragment shader\u4e2d\u8fdb\u884c\uff0c\u800c\u4e0d\u9700\u8981\u989d\u5916\u7684buffer\u50a8\u5b58\u4fe1\u606f\u3002stencil\uff08\u6a21\u677f\uff09buffer\uff0c\u7c7b\u4f3c\u8499\u7248\uff0c\u7528\u4e8e\u50a8\u5b58\u4e00\u4e9b\u56fe\u5143\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u5728render\u7684\u65f6\u5019\u914d\u5408fragment shader\u4f7f\u7528\u3002 Color Buffer \u7528\u4e8e\u663e\u793a Z-Buffer / Depth Buffer \u7528\u4e8e\u6df1\u5ea6\u6d4b\u8bd5\uff08Depth Test\uff09 Alpha Buffer \u7528\u4e8eAlpha\u6d4b\u8bd5\uff08\u6df7\u5408\uff09 Stencil Buffer \u4e00\u822c\u800c\u8a00\uff0c\u5408\u5e76\u9636\u6bb5\u662f\u90e8\u5206\u53ef\u7f16\u7a0b\u7684\uff0c\u5728\u4e00\u4e9bAPI\u4e2d\u751a\u81f3\u662f\u56fa\u5b9a\u7ba1\u7ebf\u3002\u7136\u540e\uff0ccolor buffer\u7684\u5185\u5bb9\u88ab\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\uff0c\u88ab\u4eba\u7684\u773c\u775b\u6240\u89c2\u5bdf\u5230\u3002\u8fd9\u91cc\uff0c\u4e3a\u4e86\u9632\u6b62\u88ab\u7528\u6237\u89c2\u5bdf\u5230\u56fe\u5143\u7684\u7ed8\u5236\u8fc7\u7a0b\uff0c\u4e00\u822c\u4f7f\u7528\u53cc\u7f13\u5b58\u65b9\u6cd5\uff08double buffering\uff09\uff0c\u5373\uff0c\u4f7f\u7528\u4e24\u5f20\u7f13\u5b58\uff0c\u4e00\u5f20\u7528\u4e8e\u5c55\u793a\uff0c\u4e00\u5f20\u5728\u540e\u53f0\u8fdb\u884c\u7ed8\u5236\uff0c\u7ed8\u5236\u5b8c\u6210\u540e\uff0c\u8fdb\u884c\u5207\u6362\uff08swap\uff09\u64cd\u4f5c\u3002","title":"Real Time Rendering Note # 1"},{"location":"Real-time_Rendering/Chapter_1/#real-time-rendering-note-1","text":"","title":"Real Time Rendering Note # 1"},{"location":"Real-time_Rendering/Chapter_1/#_1","text":"","title":"\u6e32\u67d3\u7ba1\u7ebf"},{"location":"Real-time_Rendering/Chapter_1/#application-stage","text":"\u4e00\u822c\u8fd9\u4e00\u9636\u6bb5\u5728CPU\u4e0a\u8fdb\u884c\u76f8\u5bf9\u590d\u6742\u7684\u8ba1\u7b97\u3002\u4e3b\u8981\u8d23\u4efb\u662f\u4e3a\u540e\u9762\u7684\u6d41\u7a0b\u8f93\u51fa\u56fe\u5143\uff0c\u4e5f\u5c31\u662f\u70b9\u3001\u7ebf\u548c\u4e09\u89d2\u9762\u7b49\u7b49\u4fe1\u606f\u3002","title":"\u5e94\u7528\u9636\u6bb5\uff08Application Stage\uff09"},{"location":"Real-time_Rendering/Chapter_1/#geometry-processing","text":"\u51e0\u4f55\u5904\u7406\u7531\u56db\u4e2a\u9636\u6bb5\u6784\u6210\uff1a\u9876\u70b9\u7740\u8272\u3001\u6295\u5f71\uff08Projection\uff09\u3001\u88c1\u526a\uff08Clipping\uff09\u548c\u5c4f\u5e55\u6620\u5c04\uff08Screen mapping\uff09\u3002","title":"\u51e0\u4f55\u5904\u7406\uff08Geometry Processing\uff09"},{"location":"Real-time_Rendering/Chapter_1/#1-vertex-shader","text":"\u5bf9\u4e8eshader\u548cshading\u8fd9\u4e24\u4e2a\u76f8\u4f3c\uff0c\u76f8\u5173\u4f46\u53c8\u6709\u6240\u533a\u522b\u7684\u6982\u5ff5\uff0c\u8fd8\u662f\u9700\u8981\u8fdb\u884c\u4e00\u4e0b\u7504\u522b\uff1ashader\u662f\u4e00\u79cd\u53ef\u7f16\u7a0b\u5355\u5143\uff0c\u5f80\u5f80\u8fd0\u884c\u5728GPU\u4e2d\uff1bshading\u66f4\u591a\u5219\u8ba4\u4e3a\u662f\u5bf9\u56fe\u50cf\u7684\u7ed8\u5236\u4ee5\u53ca\u5448\u73b0\u3002 \u9876\u70b9\u7740\u8272\u5668\u6709\u4e24\u5927\u4efb\u52a1\uff1a \u8ba1\u7b97\u9876\u70b9\u7684\u4f4d\u7f6e\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u5728\u8fd9\u4e00\u6b65\u91cc\u5c06\u9876\u70b9\u4ecemodel\u5750\u6807\u7cfb\u8f6c\u6362\u5230view\u5750\u6807\u7cfb\u3002\u8fd9\u4e00\u6b65\u4e00\u822c\u662f\u901a\u8fc7\u5e94\u7528\u4e24\u4e2atransform\uff0c\u4e5f\u5c31\u662fmodel matrix\u548cview matrix\u3002 \u8ba1\u7b97\u9700\u8981\u5728\u9876\u70b9\u4e2d\u8f93\u51fa\u7684\u4fe1\u606f\u3002\u4e3a\u4e86\u5f97\u5230\u597d\u7684\u6e32\u67d3\u6548\u679c\uff0c\u9876\u70b9\u4e2d\u4f1a\u5305\u542b\u8bb8\u591a\u5c06\u5e94\u7528\u5728\u540e\u7eed\u6d41\u7a0b\u4e0a\u7684\u6570\u636e\uff0c\u6bd4\u5982\u6cd5\u7ebf\u3001\u989c\u8272\u3001\u6750\u8d28\u7b49\u7b49\u3002 \u6b64\u5916\uff0c\u5728\u88c1\u526a\uff08clipping\uff09\u524d\uff0c\u4e00\u822cvertex shader\u4e2d\u8fd8\u4f1a\u8fdb\u884cproject\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u5e94\u7528\u4e00\u4e2a\u6295\u5f71\u77e9\u9635\uff08\u6b63\u4ea4\u6295\u5f71\u6216\u8005\u900f\u89c6\u6295\u5f71\uff09\u3002\u6700\u7ec8\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u56db\u7ef4\u5411\u91cf\uff0c\u4e5f\u5c31\u662f\u9f50\u6b21\u5750\u6807\uff0c\u4fbf\u4e8e\u540e\u7eed\u7684\u5904\u7406\u3002\u5176\u4e2d\uff0cz\u5750\u6807\u50a8\u5b58\u5728z-buffer\u4e2d\uff0cw\u5750\u6807\u5219\u5c06\u88ab\u7528\u4e8e\u900f\u89c6\u9664\u6cd5\u3002\u8fd9\u90e8\u5206\u5c06\u5728\u4e0b\u4e00\u7ae0\u8be6\u7ec6\u4ecb\u7ecd\u3002","title":"1 \u9876\u70b9\u7740\u8272\uff08Vertex Shader\uff09"},{"location":"Real-time_Rendering/Chapter_1/#2","text":"\u6b64\u5916\uff0c\u5728\u9876\u70b9\u7740\u8272\u9636\u6bb5\u4e4b\u540e\uff0cReal Time Rendering\u8fd8\u63cf\u8ff0\u4e86\u4e00\u4e9b\u53ef\u9009\u7684\u9636\u6bb5\uff0c\u5305\u62ec\uff1a\u66f2\u9762\u7ec6\u5206\uff08tessellation\uff09\u3001\u51e0\u4f55\u7740\u8272\u5668\uff08geometry shader\uff09\u548c\u8f93\u51fa\u6d41\uff08stream output\uff09\u3002\u5176\u4e2d\uff0c\u66f2\u9762\u7ec6\u5206\u7c7b\u4f3cLoD\uff0c\u662f\u5728Vertex Shader\u4e4b\u540e\u6839\u636e\u5728View Coordinates\u4e2d\u4e0e\u76f8\u673a\u7684\u8fdc\u8fd1\uff0c\u6765\u5bf9\u66f2\u9762\u56fe\u5143\u8fdb\u884c\u7ec6\u5206\u3002\u66f2\u9762\u7ec6\u5206\u9636\u6bb5\u5206\u4e3ahull shader\uff0ctessellator\u548cand domain shader\u3002\u63a5\u4e0b\u6765\u662f\u51e0\u4f55\u7740\u8272\u5668\uff0c\u8fd9\u4e2a\u9636\u6bb5\u662f\u5bf9\u56fe\u5143\u8fdb\u884c\u5904\u7406\u751f\u6210\u65b0\u7684\u9876\u70b9\u6570\u636e\u3002\u6bd4\u5982\uff0c\u6700\u5e38\u7528\u4e0e\u7c92\u5b50\u7684\u751f\u6210\uff0c\u6bd4\u5982\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u53ea\u5305\u542b\u4e00\u4e2a\u9876\u70b9\u7684\u7c92\u5b50\uff0c\u51e0\u4f55\u7740\u8272\u5668\u5c06\u5176\u5c55\u5f00\uff08\u751f\u6210\uff09\u4e3a\u7531\u4e24\u4e2a\u4e09\u89d2\u9762\u6784\u6210\u7684\uff0c\u7c7b\u4f3c\u5e7f\u544a\u7248\uff08billboard\uff09\u7684\u7ed3\u6784\uff0c\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u7ba1\u7ebf\u3002\u8fd9\u6837\uff0c\u4f7f\u5f97\u7c92\u5b50\u5728\u540e\u7eed\u7684\u6e32\u67d3\u8fc7\u7a0b\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u5904\u7406\u3002\u6700\u540e\u4e00\u4e2a\u53ef\u9009\u9636\u6bb5\u662f\u8f93\u51fa\u6d41\uff0c\u4e5f\u5c31\u662f\u5c06\u4e00\u90e8\u5206GPU\u4e2d\u7684\u6570\u636e\u8f93\u51fa\u5230CPU\u4e2d\u8fdb\u884c\u5904\u7406\uff08\u540c\u6837\uff0c\u5728\u7c92\u5b50\u6a21\u62df\u4e2d\u5e94\u7528\uff09\u3002","title":"2 \u53ef\u9009\u9636\u6bb5"},{"location":"Real-time_Rendering/Chapter_1/#3-clipping","text":"\u88c1\u526a\u9636\u6bb5\u5c31\u662f\u5c06\u90e8\u5206\u548c\u5b8c\u5168\u4e0d\u5728view volume\u5185\u7684\u56fe\u5143\u8fdb\u884c\u5904\u7406\u3002\u5b8c\u5168\u4e0d\u5728view volume\u5185\u7684\u56fe\u5143\u8fdb\u884c\u820d\u5f03\uff0c\u800c\u90e8\u5206\u5728view volume\u5185\u7684\u56fe\u5143\u5219\u8fdb\u884c\u5904\u7406\uff0c\u5373\u751f\u6210\u65b0\u7684\u843d\u5728view volume\u8fb9\u7f18\u7684\u8282\u70b9\uff0c\u5e76\u4fdd\u7559\u539f\u59cb\u56fe\u5143\u7684\u5f62\u72b6\u3002","title":"3 \u88c1\u526a\uff08Clipping\uff09"},{"location":"Real-time_Rendering/Chapter_1/#4-screen-mapping","text":"\u5728\u5c4f\u5e55\u6620\u5c04\u9636\u6bb5\uff0c\u5c06\u88c1\u526a\u540e\u7684\u56fe\u5143\u5750\u6807\u8fdb\u884c\u91cd\u65b0\u6620\u5c04\u3002xy\u5750\u6807\u88ab\u91cd\u65b0\u6620\u5c04\u4e3a \\(x\\in[x1, x2],y\\in[y_1, y_2]\\) \u4e5f\u5c31\u662f\u5c4f\u5e55\u7684\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u5750\u6807\u3002\u800cz\u5750\u6807\uff0c\u4e5f\u79f0\u4e3a\uff08window coordinates\uff09\u88ab\u6620\u5c04\u4e3a0\u52301\u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\uff0c\u6216\u8005-1\u52301\uff0c\u6839\u636e\u4e0d\u540c\u7684API\u6709\u7740\u4e0d\u540c\u7684\u5177\u4f53\u5b9e\u73b0\uff08OpenGL\u548cDirectX\u5c31\u6709\u7740\u4e0d\u540c\u7684\u5b9e\u73b0\uff09\u3002 \u800c\u5bf9\u4e8e\u6d6e\u70b9\u5750\u6807\u548c\u6574\u6570\u5750\u6807\u7684\u8f6c\u6362\uff0c\u6211\u4eec\u6709\uff1a $$ d = floor(f) \\ f = d + 0.5 $$","title":"4 \u5c4f\u5e55\u6620\u5c04\uff08Screen Mapping\uff09"},{"location":"Real-time_Rendering/Chapter_1/#rasterization","text":"\u5220\u683c\u5316\u5c06\u7ecf\u8fc7\u8f6c\u6362\u7684\u4e09\u7ef4\u5750\u6807\u548c\u6bcf\u4e2a\u9876\u70b9\u7684\u6e32\u67d3\u6570\u636e\u8f6c\u5316\u4e3a\u5c4f\u5e55\u4e0a\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\uff0c\u5927\u81f4\u5206\u4e3a\u4e24\u4e2a\u8fc7\u7a0b\uff08\u56fe\u5143\u7ec4\u88c5\u548c\u4e09\u89d2\u5f62\u904d\u5386\uff09\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5224\u65ad\u4e00\u4e2a\u50cf\u7d20\u662f\u5426\u4f4d\u4e8e\u4e00\u4e2a\u4e09\u89d2\u5f62\u5185\uff0c\u53ef\u4ee5\u91c7\u7528\u6700\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u5373\uff0c\u91c7\u6837\u50cf\u7d20\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u5224\u65ad\u5176\u662f\u5426\u4f4d\u4e8e\u4e09\u89d2\u5f62\u5185\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f7f\u7528\u8d85\u5206\u8fa8\u7387\u7b97\u6cd5\u6216\u8005\u53cd\u8d70\u6837\uff08Anti-aliasing\uff09\u7b97\u6cd5\uff0c\u5219\u4f1a\u91c7\u6837\u8d85\u8fc7\u4e00\u4e2a\u70b9\u8fdb\u884c\u5224\u65ad\u3002\u6b64\u5916\uff0c\u5224\u65ad\u8be5\u50cf\u7d20\u4f4d\u4e8e\u4e09\u89d2\u5f62\u5185\u90e8\u7684\u6bd4\u4f8b\u4e5f\u662f\u4e00\u79cd\u65b9\u6cd5\u3002","title":"\u5220\u683c\u5316\uff08Rasterization\uff09"},{"location":"Real-time_Rendering/Chapter_1/#1-primitive-assembly","text":"\u56fe\u5143\u7ec4\u88c5\u4e5f\u53ef\u4ee5\u53eb\u505a\u51c6\u5907\u4e09\u89d2\u5f62\uff08triangle setup\uff09\uff0c\u5728\u8fd9\u4e00\u6b65\u5c06\u8ba1\u7b97\u4e00\u4e9b\u524d\u7f6e\u6570\u636e\uff0c\u6bd4\u5982\u4e00\u4e9b\u5fae\u5206\u7ed3\u679c\u3001\u4e09\u89d2\u5f62\u7684\u8fb9\u65b9\u7a0b\u7b49\u7b49\u3002\u8fd9\u4e9b\u6570\u636e\u4e00\u822c\u662f\u4e3a\u4e0b\u4e00\u6b65\uff0c\u6216\u8005\u4e00\u4e9b\u9876\u70b9\u6570\u636e\u7684\u63d2\u503c\u505a\u51c6\u5907\u3002","title":"1 \u56fe\u5143\u7ec4\u88c5\uff08primitive assembly\uff09"},{"location":"Real-time_Rendering/Chapter_1/#2-triangle-traversal","text":"\u5728\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u904d\u5386\u6240\u6709\u5904\u4e8e\u4e09\u89d2\u5f62\u5185\u7684\u50cf\u7d20\u70b9\uff0c\u751f\u6210\u4e00\u4e2a\u7247\u6bb5\uff08fragment\uff09\u3002\u5e76\u5c06\u7528\u4e8e\u751f\u6210\u8be5\u50cf\u7d20\u70b9\u63d2\u503c\u7684\u6570\u636e\u4f20\u9012\u7ed9\u7247\u6bb5\u7740\u8272\u5668\u3002\u7136\u540e\uff0c\u8fd9\u4e00\u9636\u6bb5\u7684\u7ed3\u679c\u5c06\u88ab\u9001\u5f80\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c\u5373\u50cf\u7d20\u5904\u7406\u9636\u6bb5\u3002","title":"2 \u4e09\u89d2\u5f62\u904d\u5386\uff08triangle traversal\uff09"},{"location":"Real-time_Rendering/Chapter_1/#pixel-processing","text":"\u8fd9\u91cc\uff0cReal-Time Rendering\u8fd9\u672c\u4e66\u5c06\u50cf\u7d20\u5904\u7406\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u662f\u50cf\u7d20\u7740\u8272\uff08Pixel Shading\uff09\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5408\u5e76\uff08Merging\uff09","title":"\u50cf\u7d20\u5904\u7406\uff08Pixel processing\uff09"},{"location":"Real-time_Rendering/Chapter_1/#1","text":"\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662fOpenGL\u4e2d\u6240\u8c13\u7684fragment shader\uff0c\u7528\u4e8e\u8f93\u51fa\u67d0\u4e00\u50cf\u7d20\u7684\u989c\u8272\uff08\u5355\u4e2a\u6216\u591a\u4e2a\uff09\u3002\u8fd9\u4e00\u6d41\u7a0b\u4e00\u822c\u5728\u53ef\u7f16\u7a0b\u7684GPU\u6838\u5fc3\u4e0a\u8fd0\u884c\uff0c\u5e76\u4e14\u76ee\u524d\u5728\u8fd9\u4e00\u9636\u6bb5\u4e2d\u5b58\u5728\u591a\u79cd\u7b97\u6cd5\uff0c\u4e5f\u80fd\u6e32\u67d3\u51fa\u8bb8\u591a\u4e0d\u540c\u7684\u6548\u679c\u3002","title":"1 \u50cf\u7d20\u7740\u8272"},{"location":"Real-time_Rendering/Chapter_1/#2_1","text":"\u8fd9\u4e00\u9636\u6bb5\u4e5f\u79f0\u4e3a ROP\uff08raster operations pipeline\uff09 \u6216\u8005render output unit\u3002\u8fd9\u65f6\u5019\uff0c\u989c\u8272\u4fe1\u606f\u88ab\u50a8\u5b58\u5728color buffer\u4e2d\uff0c\u800c\u6df1\u5ea6\u4fe1\u606f\uff0c\u50a8\u5b58\u5728depth buffer\u4e2d\uff0c\u4e5f\u5c31\u662fz-buffer\u3002z-buffer\u548ccolor buffer\u6709\u76f8\u540c\u7684\u5927\u5c0f\u3002z-buffer\u7528\u4e8e\u63a7\u5236\u8be5\u50cf\u7d20\u662f\u5426\u9700\u8981\u88ab\u65b0\u7684\u50cf\u7d20\u8986\u76d6\uff0c\u4ee5\u53ca\u7528\u4e8e\u6267\u884c\u4e00\u4e9b\u76f8\u5173\u7684\u7b97\u6cd5\u3002\u4f46\u662fz-buffer\u7684\u5f31\u9879\u662f\u5bf9\u900f\u660e\u6216\u534a\u900f\u660e\u7269\u4f53\u7684\u5904\u7406\uff0c\u8fd9\u5f80\u5f80\u9700\u8981\u6309\u987a\u5e8f\u4ece\u8fdc\u5230\u8fd1\u8fdb\u884c\u7ed8\u5236\uff0c\u6216\u8005\u4f7f\u7528\u5176\u4ed6\u7684\u7b97\u6cd5\u3002 \u6b64\u5916\uff0c\u5728color buffer\u4e2d\u4e5f\u53ef\u80fd\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u901a\u9053\uff0c\u6bd4\u5982alpha\u901a\u9053\u3002\u4f46\u662f\uff0c\u73b0\u5728\u7684\u6e32\u67d3\u7ba1\u7ebf\u4e2d\uff0calpha\u6d4b\u8bd5\u53ef\u4ee5\u5728fragment shader\u4e2d\u8fdb\u884c\uff0c\u800c\u4e0d\u9700\u8981\u989d\u5916\u7684buffer\u50a8\u5b58\u4fe1\u606f\u3002stencil\uff08\u6a21\u677f\uff09buffer\uff0c\u7c7b\u4f3c\u8499\u7248\uff0c\u7528\u4e8e\u50a8\u5b58\u4e00\u4e9b\u56fe\u5143\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u5728render\u7684\u65f6\u5019\u914d\u5408fragment shader\u4f7f\u7528\u3002 Color Buffer \u7528\u4e8e\u663e\u793a Z-Buffer / Depth Buffer \u7528\u4e8e\u6df1\u5ea6\u6d4b\u8bd5\uff08Depth Test\uff09 Alpha Buffer \u7528\u4e8eAlpha\u6d4b\u8bd5\uff08\u6df7\u5408\uff09 Stencil Buffer \u4e00\u822c\u800c\u8a00\uff0c\u5408\u5e76\u9636\u6bb5\u662f\u90e8\u5206\u53ef\u7f16\u7a0b\u7684\uff0c\u5728\u4e00\u4e9bAPI\u4e2d\u751a\u81f3\u662f\u56fa\u5b9a\u7ba1\u7ebf\u3002\u7136\u540e\uff0ccolor buffer\u7684\u5185\u5bb9\u88ab\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\uff0c\u88ab\u4eba\u7684\u773c\u775b\u6240\u89c2\u5bdf\u5230\u3002\u8fd9\u91cc\uff0c\u4e3a\u4e86\u9632\u6b62\u88ab\u7528\u6237\u89c2\u5bdf\u5230\u56fe\u5143\u7684\u7ed8\u5236\u8fc7\u7a0b\uff0c\u4e00\u822c\u4f7f\u7528\u53cc\u7f13\u5b58\u65b9\u6cd5\uff08double buffering\uff09\uff0c\u5373\uff0c\u4f7f\u7528\u4e24\u5f20\u7f13\u5b58\uff0c\u4e00\u5f20\u7528\u4e8e\u5c55\u793a\uff0c\u4e00\u5f20\u5728\u540e\u53f0\u8fdb\u884c\u7ed8\u5236\uff0c\u7ed8\u5236\u5b8c\u6210\u540e\uff0c\u8fdb\u884c\u5207\u6362\uff08swap\uff09\u64cd\u4f5c\u3002","title":"2 \u5408\u5e76"},{"location":"Real-time_Rendering/Chapter_2/","text":"Real Time Rendering Note # 2 GPU\u7b80\u8ff0 \u5f53\u6570\u636e\u5728\u5b58\u53d6\u7684\u65f6\u5019\uff0c\u5904\u7406\u5668\u5904\u4e8e\u4e00\u79cd\u7b49\u5f85\u7684\u72b6\u6001\uff08Stall\uff09\uff0c\u8fd9\u5c06\u6781\u5927\u62d6\u6162\u5904\u7406\u7684\u901f\u5ea6\u3002CPU\u53ef\u4ee5\u5904\u7406\u8bb8\u591a\u4e0d\u540c\u79cd\u7c7b\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\uff0c\u9664\u4e86SIMD\u7ed3\u6784\u5916\uff0cCPU\u53ea\u80fd\u7ebf\u6027\u5730\u8fdb\u884c\u8fd0\u7b97\u3002\u800cGPU\u5219\u4f7f\u7528\u5927\u91cf\u7684\u6838\u5fc3\uff08Core\uff09\u8fdb\u884c\u5e76\u884c\u7684\u8fd0\u7b97\uff0c\u4e14\u5177\u6709\u5927\u91cf\u5feb\u901f\u5bc4\u5b58\u5668\uff0c\u5927\u91cf\u6781\u6709\u53ef\u80fd\u7528\u5230\u7684\u6570\u636e\u4e5f\u88ab\u653e\u5165\u7f13\u5b58\u4e2d\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e00\u4e2a\u9876\u70b9\u6216\u8005\u50cf\u7d20\u5206\u914d\u4e00\u4e2a\u5c0f\u7684\u5bc4\u5b58\u5668\uff0c\u5728\u9700\u8981\u8bfb\u53d6\u6750\u8d28\u8fd9\u6837\u53ea\u80fd\u5b58\u5728\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u65f6\uff0c\u6211\u4eec\u4e0d\u65ad\u505aSwift\uff0c\u5373\u5904\u7406\u4e0b\u4e00\u4e2a\u9876\u70b9\uff0c\u76f4\u5230\u4ece\u76f8\u8f83\u4e8e\u5bc4\u5b58\u5668\u66f4\u6162\u7684\u7f13\u5b58\u8bfb\u53d6\u5230\u4e86Texture\u4fe1\u606f\u3002\u8fd9\u79cdSwift\u4e0d\u6539\u53d8\u4e0a\u4e00\u4e2a\u5904\u7406\u9876\u70b9\u7684\u5bc4\u5b58\u5668\u6570\u636e\uff0c\u4e5f\u57fa\u672c\u4e0d\u82b1\u8d39\u65f6\u95f4\u3002 \u5728\u8fd9\u6837\u7684\u5e76\u884c\u7ed3\u6784\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4e0d\u65ad\u505aSWIFT\u64cd\u4f5c\u4f7f\u5f97GPU\u7684\u6838\u5fc3\u4e0d\u505c\u5728\u5904\u7406\u7247\u6bb5\uff08Fragment\uff09\u3002\u6bcf\u4e00\u6b21\u50cf\u7d20\u7740\u8272\u5668\uff08Pixel Shader\uff09\u7684\u8c03\u7528\u6210\u4e3a\u4e00\u4e2a\u7ebf\u7a0b\uff08Thread\uff09\uff0c\u8fd9\u6837\u4e00\u4e2a\u7ebf\u7a0b\u5305\u542b\u4e86\u7528\u4e8e\u50a8\u5b58\u8f93\u5165\u6570\u636e\u7684\u7f13\u5b58\u4ee5\u53ca\u591f\u5176\u8fd0\u884c\u7684\u5bc4\u5b58\u5668\u3002\u4f7f\u7528\u540c\u4e00\u4e2a\u7740\u8272\u5668\u7684\u7ebf\u7a0b\u88ab\u7ec4\u6210\u4e00\u675f\uff08N\u5361\u4e0a\u4e3a32\u4e2a\u7ebf\u7a0b\uff09\uff0c\u79f0\u4e3aWarp\uff08AMD\u79f0\u4e3awavefronts\uff09\u3002\u4e00\u4e2aWarp\u5c06\u88ab\u4e00\u5b9a\u6570\u91cf\uff088\uff5e64\u4e2a\uff09\u7684\u6838\u5fc3\u6765\u6267\u884c\u3002 \u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u5982\u679c\u9700\u8981\u8bfb\u53d6\u5185\u5b58\uff0c\u5219\u4e00\u4e2aWarp\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u90fd\u4f1a\u540c\u65f6stall\uff0c\u8fd9\u65f6\u5019\u5904\u7406\u5668\u76f4\u63a5\u5207\u6362\u4e0b\u4e00\u4e2aWarp\u8fdb\u884c\u5904\u7406\uff0c\u56e0\u4e3a\u6bcf\u4e2aWarp\u90fd\u6709\u81ea\u5df1\u7684\u5bc4\u5b58\u5668\u548c\u7f13\u5b58\uff0c\u56e0\u6b64\u6570\u636e\u4e0d\u4f1a\u6709\u53d8\u5316\uff0c\u800c\u4e14\u6548\u7387\u6781\u9ad8\u3002\u5f71\u54cd\u5904\u7406\u6548\u7387\u7684\u4e3b\u8981\u6709\u4e24\u6761\uff1a1\u3001\u56e0\u4e3a\u6570\u636e\u91cf\u5bfc\u81f4\u7684Occupancy\uff0c2\u3001\u5206\u652f\u9009\u62e9\uff08if\uff09 \u5982\u4e0a\u56fe\uff0c\u4e00\u6bb5\u7a0b\u5e8f\uff08Program\uff09\u88ab\u5206\u53d1\u5230\u4e00\u7ec4\u7ec4Warp\u4e2d\uff0c\u5f53\u9047\u5230txr\u6307\u4ee4\uff0c\u5373\u9700\u8981\u53ca\u6027\u80fd\u5185\u5b58\u8bfb\u53d6\u65f6\uff0cswap\u5230\u53e6\u4e00\u4e2aWarp\u8fdb\u884c\u5904\u7406\u3002\u8fd9\u6837\uff0c\u5904\u7406\u5668\u5c31\u4f1a\u4e00\u76f4\u5728\u5de5\u4f5c\u3002 GPU\u5b9e\u73b0\u6e32\u67d3\u7ba1\u7ebf GPU\u4e2d\u4f7f\u7528\u786c\u4ef6\u5b9e\u73b0\u4e86\u51e0\u4f55\u5904\u7406\uff08Geometry Processing\uff09\uff0c\u5149\u6805\u8bdd\u4ee5\u53ca\u50cf\u7d20\u5904\u7406\uff08Pixel Processing\uff09\u3002\u5728GPU\u4e2d\uff0c\u4e00\u4e9b\u9636\u6bb5\u662f\u53ef\u7f16\u7a0b\u7684\uff0c\u800c\u53e6\u4e00\u4e9b\u9636\u6bb5\u53ea\u80fd\u914d\u7f6e\u3002\u4e0a\u56fe\u4e2d\u7eff\u8272\u7684\u662f\u53ef\u7f16\u7a0b\u7684\uff0c\u9ec4\u8272\u7684\u90e8\u5206\u662f\u53ef\u914d\u7f6e\u7684\uff0c\u800c\u84dd\u8272\u7684\u90e8\u5206\u5219\u662f\u56fa\u5b9a\u7ba1\u7ebf\u3002 \u5728GPU\u7684\u5b9e\u73b0\u4e2d\uff0c\u5373\u4f7f\u5728Graphics API\u4e2d\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\u7a0b\u5e8f\u4e5f\u53ef\u80fd\u5728\u4e0d\u540c\u7684\u786c\u4ef6\u9636\u6bb5\u8fdb\u884c\u5904\u7406\u3002\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u5173\u6ce8GPU\u7a0b\u5e8f\u7684\u6548\u7387\u65f6\uff0c\u4e0d\u80fd\u53ea\u5173\u6ce8\u903b\u8f91\u8bed\u8a00\u4e0a\u7684\u6548\u7387\u3002 \u51e0\u4e2a\u53ef\u914d\u7f6e\u7684\u9636\u6bb5\uff1a - Screen Mapping\u9700\u8981\u914d\u7f6e\u7a97\u53e3\u548c\u89c6\u7a97\u5927\u5c0f - Merger\u867d\u7136\u4f7f\u7528\u56fa\u5b9a\u7ba1\u7ebf\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u5404\u79cdbuffer\u53d6\u5f97\u4e0d\u540c\u7684\u6548\u679c \u53ef\u7f16\u7a0b\u7740\u8272\u5668\u9636\u6bb5 \u76f8\u6bd4\u4e8e\u8fc7\u53bb\u4f7f\u7528\u9876\u70b9\u5904\u7406\u5668\u548c\u7247\u6bb5\u5904\u7406\u5668\u7684\u9636\u6bb5\uff0c\u76ee\u524d\u7684\u7740\u8272\u5668\u66f4\u52a0\u7edf\u4e00\uff0c\u4f7f\u7528\u540c\u6837\u7684\u6307\u4ee4\u96c6\uff0c\u6709\u7740\u76f8\u540c\u7684\u7f16\u7a0b\u6a21\u578b\uff08Common Programming Model\uff09\u3002c\u8bed\u8a00\u98ce\u683c\u7684\u7740\u8272\u5668\u8bed\u8a00\u6709GLSL\uff0cHLSL\u7b49\u7b49\u3002\u4e3a\u4e86\u4e0e\u5e73\u53f0\u65e0\u5173\uff0cHLSL\u88ab\u7f16\u8bd1\u4e3a\u865a\u62df\u673a\u5668\u5b57\u8282\u7801\u8fdb\u884c\u50a8\u5b58\u3002\u800c\u5728\u4e3b\u673a\u4e0a\uff0c\u4e00\u822c\u5219\u4e0d\u9700\u8981\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u4e3b\u673a\u4e00\u822c\u4f7f\u7528\u56fa\u5b9a\u7684\u6307\u4ee4\u96c6\u3002GPU\u4f7f\u752832bit\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u4f5c\u4e3a\u57fa\u672c\u7c7b\u578b\uff0c\u4e00\u822c\u7528\u4e8e\u8868\u793a\u4f4d\u7f6e\uff08xyzw\uff09\u3001\u6cd5\u5411\u91cf\u3001\u77e9\u9635\u884c\u3001\u989c\u8272\uff08rgba\uff09\u3001\u6750\u8d28\u5750\u6807\u7b49\u7b49\uff08uvwq\uff09\u3002\u6574\u6570\u7c7b\u578b\u4e00\u822c\u7528\u4e8e\u8868\u793a\u7d22\u5f15\uff08indices\uff09\uff0c\u8ba1\u6570\u5668\u548cbitmask\u3002 draw call\u89e6\u53d1GPU\u5904\u7406\u4e00\u7ec4 \u56fe\u5143 \uff0c\u800c\u4e00\u822c\u7740\u8272\u5668\u9636\u6bb5\u5f00\u59cb\u7684\u8f93\u5165\u6709\u4e24\u79cd\uff1auniform\uff0c\u5373\u4e00\u6b21draw call\u4e2d\u4e0d\u4f1a\u6539\u53d8\u7684\u6570\u636e\uff08\u6750\u8d28\u662f\u4e00\u79cd\u7279\u6b8a\u7684uniform\uff0c\u56e0\u4e3a\u6570\u636e\u91cf\u5de8\u5927\uff09\uff1b\u800cvarying\u5219\u662f\u4f1a\u6839\u636e\u4e0a\u4e00\u4e2a\u6d41\u7a0b\u4e2d\u7684\u8f93\u51fa\u800c\u51b3\u5b9a\u3002 flow control\uff1a\u5982\u679c\u6761\u4ef6\u8bed\u53e5\u53ea\u548cunifrom\u76f8\u5173\uff0c\u5219\u79f0\u4e3a\u9759\u6001\u6d41\uff0c\u5176\u6548\u7387\u9ad8\u4e8e\u57fa\u4e8e\u53ef\u53d8\u8f93\u5165\u7684\u6761\u4ef6\u8bed\u53e5\u7684\u52a8\u6001\u6d41\u3002 \u7740\u8272\u5668\u8bed\u8a00\u548cAPI\u7684\u8fdb\u5316 1980s shade tree / RenderMan\uff08\u5f71\u89c6\u5236\u4f5c\uff09 1996 3dfx \u6d88\u8d39\u7ea7\u663e\u5361 OpenGL 1.1 Geforce256 Geforce3 \u4f7f\u7528DirectX 8.0\u6216OpenGL\u6269\u5c55\u9a71\u52a8\u7684\u53ef\u7f16\u7a0b\u9876\u70b9\u7740\u8272\u5668 DX 9.0 HLSL OpenGL ES 1.0 WebGL Metal Vulcan \u9876\u70b9\u7740\u8272\u5668 \u5c3d\u7ba1\u9876\u70b9\u7740\u8272\u5668\u662f\u7b2c\u4e00\u4e2a\u7531\u7f16\u7a0b\u63a7\u5236\u7684\u9636\u6bb5\uff0c\u5176\u4e4b\u524d\u5176\u5b9e\u5df2\u7ecf\u8fdb\u884c\u4e86\u4e00\u4e9b\u5904\u7406\u4e86\u3002\u8fd9\u4e9b\u5904\u7406\u4e3b\u8981\u662f\u5bf9\u56fe\u5143\u6570\u636e\u8fdb\u884c\u7ec4\u88c5\uff08Assemble\uff09\uff0c\u5373\u6839\u636eindex\u5c06\u9876\u70b9\u7684pos\uff0cnormal\uff0ctexcoord\u7b49\u6570\u636e\u8fdb\u884c\u7ec4\u5408\uff0c\u4f20\u9012\u7ed9\u9876\u70b9\u7740\u8272\u5668\u3002 \u4e00\u4e2a\u9876\u70b9\uff08Vertex\uff09\u4e00\u822c\u5305\u542b\u4e86\u4f4d\u7f6e\uff08position\uff09\uff0c\u7eb9\u7406\u5750\u6807\uff08texture coordinates\uff09\uff0c\u989c\u8272\uff08color\uff09\u4ee5\u53ca\u9876\u70b9\u6cd5\u7ebf\uff08vertex normal\uff09\u3002\u8fd9\u91cc\uff0c\u4e00\u4e2a\u4e09\u89d2\u9762\u5176\u5b9e\u672c\u8eab\u5c31\u5177\u6709\u4e00\u4e2a\u6cd5\u7ebf\u65b9\u5411\uff0c\u4f46\u662f\u9876\u70b9\u6cd5\u7ebf\u53ef\u7528\u4e8e\u5bf9\u9690\u542b\u66f2\u9762\u7684\u63cf\u8ff0\u3002","title":"Real Time Rendering Note # 2"},{"location":"Real-time_Rendering/Chapter_2/#real-time-rendering-note-2","text":"","title":"Real Time Rendering Note # 2"},{"location":"Real-time_Rendering/Chapter_2/#gpu","text":"\u5f53\u6570\u636e\u5728\u5b58\u53d6\u7684\u65f6\u5019\uff0c\u5904\u7406\u5668\u5904\u4e8e\u4e00\u79cd\u7b49\u5f85\u7684\u72b6\u6001\uff08Stall\uff09\uff0c\u8fd9\u5c06\u6781\u5927\u62d6\u6162\u5904\u7406\u7684\u901f\u5ea6\u3002CPU\u53ef\u4ee5\u5904\u7406\u8bb8\u591a\u4e0d\u540c\u79cd\u7c7b\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\uff0c\u9664\u4e86SIMD\u7ed3\u6784\u5916\uff0cCPU\u53ea\u80fd\u7ebf\u6027\u5730\u8fdb\u884c\u8fd0\u7b97\u3002\u800cGPU\u5219\u4f7f\u7528\u5927\u91cf\u7684\u6838\u5fc3\uff08Core\uff09\u8fdb\u884c\u5e76\u884c\u7684\u8fd0\u7b97\uff0c\u4e14\u5177\u6709\u5927\u91cf\u5feb\u901f\u5bc4\u5b58\u5668\uff0c\u5927\u91cf\u6781\u6709\u53ef\u80fd\u7528\u5230\u7684\u6570\u636e\u4e5f\u88ab\u653e\u5165\u7f13\u5b58\u4e2d\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e00\u4e2a\u9876\u70b9\u6216\u8005\u50cf\u7d20\u5206\u914d\u4e00\u4e2a\u5c0f\u7684\u5bc4\u5b58\u5668\uff0c\u5728\u9700\u8981\u8bfb\u53d6\u6750\u8d28\u8fd9\u6837\u53ea\u80fd\u5b58\u5728\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u65f6\uff0c\u6211\u4eec\u4e0d\u65ad\u505aSwift\uff0c\u5373\u5904\u7406\u4e0b\u4e00\u4e2a\u9876\u70b9\uff0c\u76f4\u5230\u4ece\u76f8\u8f83\u4e8e\u5bc4\u5b58\u5668\u66f4\u6162\u7684\u7f13\u5b58\u8bfb\u53d6\u5230\u4e86Texture\u4fe1\u606f\u3002\u8fd9\u79cdSwift\u4e0d\u6539\u53d8\u4e0a\u4e00\u4e2a\u5904\u7406\u9876\u70b9\u7684\u5bc4\u5b58\u5668\u6570\u636e\uff0c\u4e5f\u57fa\u672c\u4e0d\u82b1\u8d39\u65f6\u95f4\u3002 \u5728\u8fd9\u6837\u7684\u5e76\u884c\u7ed3\u6784\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4e0d\u65ad\u505aSWIFT\u64cd\u4f5c\u4f7f\u5f97GPU\u7684\u6838\u5fc3\u4e0d\u505c\u5728\u5904\u7406\u7247\u6bb5\uff08Fragment\uff09\u3002\u6bcf\u4e00\u6b21\u50cf\u7d20\u7740\u8272\u5668\uff08Pixel Shader\uff09\u7684\u8c03\u7528\u6210\u4e3a\u4e00\u4e2a\u7ebf\u7a0b\uff08Thread\uff09\uff0c\u8fd9\u6837\u4e00\u4e2a\u7ebf\u7a0b\u5305\u542b\u4e86\u7528\u4e8e\u50a8\u5b58\u8f93\u5165\u6570\u636e\u7684\u7f13\u5b58\u4ee5\u53ca\u591f\u5176\u8fd0\u884c\u7684\u5bc4\u5b58\u5668\u3002\u4f7f\u7528\u540c\u4e00\u4e2a\u7740\u8272\u5668\u7684\u7ebf\u7a0b\u88ab\u7ec4\u6210\u4e00\u675f\uff08N\u5361\u4e0a\u4e3a32\u4e2a\u7ebf\u7a0b\uff09\uff0c\u79f0\u4e3aWarp\uff08AMD\u79f0\u4e3awavefronts\uff09\u3002\u4e00\u4e2aWarp\u5c06\u88ab\u4e00\u5b9a\u6570\u91cf\uff088\uff5e64\u4e2a\uff09\u7684\u6838\u5fc3\u6765\u6267\u884c\u3002 \u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u5982\u679c\u9700\u8981\u8bfb\u53d6\u5185\u5b58\uff0c\u5219\u4e00\u4e2aWarp\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u90fd\u4f1a\u540c\u65f6stall\uff0c\u8fd9\u65f6\u5019\u5904\u7406\u5668\u76f4\u63a5\u5207\u6362\u4e0b\u4e00\u4e2aWarp\u8fdb\u884c\u5904\u7406\uff0c\u56e0\u4e3a\u6bcf\u4e2aWarp\u90fd\u6709\u81ea\u5df1\u7684\u5bc4\u5b58\u5668\u548c\u7f13\u5b58\uff0c\u56e0\u6b64\u6570\u636e\u4e0d\u4f1a\u6709\u53d8\u5316\uff0c\u800c\u4e14\u6548\u7387\u6781\u9ad8\u3002\u5f71\u54cd\u5904\u7406\u6548\u7387\u7684\u4e3b\u8981\u6709\u4e24\u6761\uff1a1\u3001\u56e0\u4e3a\u6570\u636e\u91cf\u5bfc\u81f4\u7684Occupancy\uff0c2\u3001\u5206\u652f\u9009\u62e9\uff08if\uff09 \u5982\u4e0a\u56fe\uff0c\u4e00\u6bb5\u7a0b\u5e8f\uff08Program\uff09\u88ab\u5206\u53d1\u5230\u4e00\u7ec4\u7ec4Warp\u4e2d\uff0c\u5f53\u9047\u5230txr\u6307\u4ee4\uff0c\u5373\u9700\u8981\u53ca\u6027\u80fd\u5185\u5b58\u8bfb\u53d6\u65f6\uff0cswap\u5230\u53e6\u4e00\u4e2aWarp\u8fdb\u884c\u5904\u7406\u3002\u8fd9\u6837\uff0c\u5904\u7406\u5668\u5c31\u4f1a\u4e00\u76f4\u5728\u5de5\u4f5c\u3002","title":"GPU\u7b80\u8ff0"},{"location":"Real-time_Rendering/Chapter_2/#gpu_1","text":"GPU\u4e2d\u4f7f\u7528\u786c\u4ef6\u5b9e\u73b0\u4e86\u51e0\u4f55\u5904\u7406\uff08Geometry Processing\uff09\uff0c\u5149\u6805\u8bdd\u4ee5\u53ca\u50cf\u7d20\u5904\u7406\uff08Pixel Processing\uff09\u3002\u5728GPU\u4e2d\uff0c\u4e00\u4e9b\u9636\u6bb5\u662f\u53ef\u7f16\u7a0b\u7684\uff0c\u800c\u53e6\u4e00\u4e9b\u9636\u6bb5\u53ea\u80fd\u914d\u7f6e\u3002\u4e0a\u56fe\u4e2d\u7eff\u8272\u7684\u662f\u53ef\u7f16\u7a0b\u7684\uff0c\u9ec4\u8272\u7684\u90e8\u5206\u662f\u53ef\u914d\u7f6e\u7684\uff0c\u800c\u84dd\u8272\u7684\u90e8\u5206\u5219\u662f\u56fa\u5b9a\u7ba1\u7ebf\u3002 \u5728GPU\u7684\u5b9e\u73b0\u4e2d\uff0c\u5373\u4f7f\u5728Graphics API\u4e2d\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\u7a0b\u5e8f\u4e5f\u53ef\u80fd\u5728\u4e0d\u540c\u7684\u786c\u4ef6\u9636\u6bb5\u8fdb\u884c\u5904\u7406\u3002\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u5173\u6ce8GPU\u7a0b\u5e8f\u7684\u6548\u7387\u65f6\uff0c\u4e0d\u80fd\u53ea\u5173\u6ce8\u903b\u8f91\u8bed\u8a00\u4e0a\u7684\u6548\u7387\u3002 \u51e0\u4e2a\u53ef\u914d\u7f6e\u7684\u9636\u6bb5\uff1a - Screen Mapping\u9700\u8981\u914d\u7f6e\u7a97\u53e3\u548c\u89c6\u7a97\u5927\u5c0f - Merger\u867d\u7136\u4f7f\u7528\u56fa\u5b9a\u7ba1\u7ebf\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u5404\u79cdbuffer\u53d6\u5f97\u4e0d\u540c\u7684\u6548\u679c","title":"GPU\u5b9e\u73b0\u6e32\u67d3\u7ba1\u7ebf"},{"location":"Real-time_Rendering/Chapter_2/#_1","text":"\u76f8\u6bd4\u4e8e\u8fc7\u53bb\u4f7f\u7528\u9876\u70b9\u5904\u7406\u5668\u548c\u7247\u6bb5\u5904\u7406\u5668\u7684\u9636\u6bb5\uff0c\u76ee\u524d\u7684\u7740\u8272\u5668\u66f4\u52a0\u7edf\u4e00\uff0c\u4f7f\u7528\u540c\u6837\u7684\u6307\u4ee4\u96c6\uff0c\u6709\u7740\u76f8\u540c\u7684\u7f16\u7a0b\u6a21\u578b\uff08Common Programming Model\uff09\u3002c\u8bed\u8a00\u98ce\u683c\u7684\u7740\u8272\u5668\u8bed\u8a00\u6709GLSL\uff0cHLSL\u7b49\u7b49\u3002\u4e3a\u4e86\u4e0e\u5e73\u53f0\u65e0\u5173\uff0cHLSL\u88ab\u7f16\u8bd1\u4e3a\u865a\u62df\u673a\u5668\u5b57\u8282\u7801\u8fdb\u884c\u50a8\u5b58\u3002\u800c\u5728\u4e3b\u673a\u4e0a\uff0c\u4e00\u822c\u5219\u4e0d\u9700\u8981\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u4e3b\u673a\u4e00\u822c\u4f7f\u7528\u56fa\u5b9a\u7684\u6307\u4ee4\u96c6\u3002GPU\u4f7f\u752832bit\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u4f5c\u4e3a\u57fa\u672c\u7c7b\u578b\uff0c\u4e00\u822c\u7528\u4e8e\u8868\u793a\u4f4d\u7f6e\uff08xyzw\uff09\u3001\u6cd5\u5411\u91cf\u3001\u77e9\u9635\u884c\u3001\u989c\u8272\uff08rgba\uff09\u3001\u6750\u8d28\u5750\u6807\u7b49\u7b49\uff08uvwq\uff09\u3002\u6574\u6570\u7c7b\u578b\u4e00\u822c\u7528\u4e8e\u8868\u793a\u7d22\u5f15\uff08indices\uff09\uff0c\u8ba1\u6570\u5668\u548cbitmask\u3002 draw call\u89e6\u53d1GPU\u5904\u7406\u4e00\u7ec4 \u56fe\u5143 \uff0c\u800c\u4e00\u822c\u7740\u8272\u5668\u9636\u6bb5\u5f00\u59cb\u7684\u8f93\u5165\u6709\u4e24\u79cd\uff1auniform\uff0c\u5373\u4e00\u6b21draw call\u4e2d\u4e0d\u4f1a\u6539\u53d8\u7684\u6570\u636e\uff08\u6750\u8d28\u662f\u4e00\u79cd\u7279\u6b8a\u7684uniform\uff0c\u56e0\u4e3a\u6570\u636e\u91cf\u5de8\u5927\uff09\uff1b\u800cvarying\u5219\u662f\u4f1a\u6839\u636e\u4e0a\u4e00\u4e2a\u6d41\u7a0b\u4e2d\u7684\u8f93\u51fa\u800c\u51b3\u5b9a\u3002 flow control\uff1a\u5982\u679c\u6761\u4ef6\u8bed\u53e5\u53ea\u548cunifrom\u76f8\u5173\uff0c\u5219\u79f0\u4e3a\u9759\u6001\u6d41\uff0c\u5176\u6548\u7387\u9ad8\u4e8e\u57fa\u4e8e\u53ef\u53d8\u8f93\u5165\u7684\u6761\u4ef6\u8bed\u53e5\u7684\u52a8\u6001\u6d41\u3002","title":"\u53ef\u7f16\u7a0b\u7740\u8272\u5668\u9636\u6bb5"},{"location":"Real-time_Rendering/Chapter_2/#api","text":"1980s shade tree / RenderMan\uff08\u5f71\u89c6\u5236\u4f5c\uff09 1996 3dfx \u6d88\u8d39\u7ea7\u663e\u5361 OpenGL 1.1 Geforce256 Geforce3 \u4f7f\u7528DirectX 8.0\u6216OpenGL\u6269\u5c55\u9a71\u52a8\u7684\u53ef\u7f16\u7a0b\u9876\u70b9\u7740\u8272\u5668 DX 9.0 HLSL OpenGL ES 1.0 WebGL Metal Vulcan","title":"\u7740\u8272\u5668\u8bed\u8a00\u548cAPI\u7684\u8fdb\u5316"},{"location":"Real-time_Rendering/Chapter_2/#_2","text":"\u5c3d\u7ba1\u9876\u70b9\u7740\u8272\u5668\u662f\u7b2c\u4e00\u4e2a\u7531\u7f16\u7a0b\u63a7\u5236\u7684\u9636\u6bb5\uff0c\u5176\u4e4b\u524d\u5176\u5b9e\u5df2\u7ecf\u8fdb\u884c\u4e86\u4e00\u4e9b\u5904\u7406\u4e86\u3002\u8fd9\u4e9b\u5904\u7406\u4e3b\u8981\u662f\u5bf9\u56fe\u5143\u6570\u636e\u8fdb\u884c\u7ec4\u88c5\uff08Assemble\uff09\uff0c\u5373\u6839\u636eindex\u5c06\u9876\u70b9\u7684pos\uff0cnormal\uff0ctexcoord\u7b49\u6570\u636e\u8fdb\u884c\u7ec4\u5408\uff0c\u4f20\u9012\u7ed9\u9876\u70b9\u7740\u8272\u5668\u3002 \u4e00\u4e2a\u9876\u70b9\uff08Vertex\uff09\u4e00\u822c\u5305\u542b\u4e86\u4f4d\u7f6e\uff08position\uff09\uff0c\u7eb9\u7406\u5750\u6807\uff08texture coordinates\uff09\uff0c\u989c\u8272\uff08color\uff09\u4ee5\u53ca\u9876\u70b9\u6cd5\u7ebf\uff08vertex normal\uff09\u3002\u8fd9\u91cc\uff0c\u4e00\u4e2a\u4e09\u89d2\u9762\u5176\u5b9e\u672c\u8eab\u5c31\u5177\u6709\u4e00\u4e2a\u6cd5\u7ebf\u65b9\u5411\uff0c\u4f46\u662f\u9876\u70b9\u6cd5\u7ebf\u53ef\u7528\u4e8e\u5bf9\u9690\u542b\u66f2\u9762\u7684\u63cf\u8ff0\u3002","title":"\u9876\u70b9\u7740\u8272\u5668"}]}